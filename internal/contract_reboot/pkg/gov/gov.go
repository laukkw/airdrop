// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package gov

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// GovConfig is an auto generated low-level Go binding around an user-defined struct.
type GovConfig struct {
	Owner            common.Address
	PlatformToken    common.Address
	Quorum           *big.Int
	Threshold        *big.Int
	VotingPeriod     *big.Int
	EffectiveDelay   *big.Int
	ExpirationPeriod *big.Int
	ProposalDeposit  *big.Int
	Blindbox         common.Address
	Prizepool        common.Address
}

// GovPoll is an auto generated low-level Go binding around an user-defined struct.
type GovPoll struct {
	Id                    *big.Int
	Creator               common.Address
	Status                uint8
	YesVotes              *big.Int
	NoVotes               *big.Int
	EndHeight             *big.Int
	Title                 string
	Description           string
	Link                  string
	Target                common.Address
	Selector              string
	Data                  []byte
	DepositAmount         *big.Int
	TotalBalanceAtEndPoll *big.Int
}

// GovStakerResponse is an auto generated low-level Go binding around an user-defined struct.
type GovStakerResponse struct {
	Balance       *big.Int
	Share         *big.Int
	LockedBalance []GovvoteResp
	MaxIdx        *big.Int
}

// GovState is an auto generated low-level Go binding around an user-defined struct.
type GovState struct {
	PollCount    *big.Int
	TotalShare   *big.Int
	TotalDeposit *big.Int
}

// GovVoterInfo is an auto generated low-level Go binding around an user-defined struct.
type GovVoterInfo struct {
	User    common.Address
	Vote    uint8
	Balance *big.Int
}

// GovVoterManager is an auto generated low-level Go binding around an user-defined struct.
type GovVoterManager struct {
	User    []common.Address
	Vote    []uint8
	Balance []*big.Int
}

// GovvoteResp is an auto generated low-level Go binding around an user-defined struct.
type GovvoteResp struct {
	PollId *big.Int
	Value  GovVoterInfo
}

// StoreMetaData contains all meta data concerning the Store contract.
var StoreMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_platform_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_voting_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_effective_delay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiration_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_proposal_deposit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_poll_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enumGov.VoteOption\",\"name\":\"vote\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"cast_vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_poll_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_end_height\",\"type\":\"uint256\"}],\"name\":\"create_poll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"end_poll_log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"execute_log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"expire_log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake_voting_token\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"to_binary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_platform_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_quorum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_voting_period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_effective_delay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_expiration_period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_proposal_deposit\",\"type\":\"uint256\"}],\"name\":\"update_config\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw_voting_tokens\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poll_id\",\"type\":\"uint256\"},{\"internalType\":\"enumGov.VoteOption\",\"name\":\"vote\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CastVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deposit_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_link\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_selector\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"CreatePoll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poll_id\",\"type\":\"uint256\"}],\"name\":\"EndPoll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poll_id\",\"type\":\"uint256\"}],\"name\":\"ExcutePoll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poll_id\",\"type\":\"uint256\"}],\"name\":\"ExpirePoll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platform_lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staking_addr\",\"type\":\"address\"}],\"name\":\"Init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DESC_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LINK_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TITLE_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_USER_VOTER_NUMBER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_DESC_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_LINK_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TITLE_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QueryConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"platform_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voting_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"effective_delay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposal_deposit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"blindbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prizepool\",\"type\":\"address\"}],\"internalType\":\"structGov.Config\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poll_id\",\"type\":\"uint256\"}],\"name\":\"QueryPoll\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"enumGov.PollStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"yes_votes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"no_votes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end_height\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"link\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"selector\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deposit_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_balance_at_end_poll\",\"type\":\"uint256\"}],\"internalType\":\"structGov.Poll\",\"name\":\"poll\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enumGov.PollStatus\",\"name\":\"fileter\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_start_after\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isAsc\",\"type\":\"bool\"}],\"name\":\"QueryPolls\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"enumGov.PollStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"yes_votes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"no_votes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end_height\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"link\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"selector\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deposit_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_balance_at_end_poll\",\"type\":\"uint256\"}],\"internalType\":\"structGov.Poll[]\",\"name\":\"poll\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"QueryStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poll_id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"enumGov.VoteOption\",\"name\":\"vote\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"structGov.VoterInfo\",\"name\":\"value\",\"type\":\"tuple\"}],\"internalType\":\"structGov.voteResp[]\",\"name\":\"locked_balance\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"maxIdx\",\"type\":\"uint256\"}],\"internalType\":\"structGov.StakerResponse\",\"name\":\"staker\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QueryState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poll_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_share\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_deposit\",\"type\":\"uint256\"}],\"internalType\":\"structGov.State\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poll_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isAsc\",\"type\":\"bool\"}],\"name\":\"QueryVoters\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"user\",\"type\":\"address[]\"},{\"internalType\":\"enumGov.VoteOption[]\",\"name\":\"vote\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balance\",\"type\":\"uint256[]\"}],\"internalType\":\"structGov.VoterManager\",\"name\":\"vote\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"StakeVotingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_platform_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_voting_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_effective_delay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiration_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_proposal_deposit\",\"type\":\"uint256\"}],\"name\":\"UpdateConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawVotingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"platform_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voting_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"effective_delay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposal_deposit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"blindbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prizepool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poll_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_share\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_deposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "",
}

// StoreABI is the input ABI used to generate the binding from.
// Deprecated: Use StoreMetaData.ABI instead.
var StoreABI = StoreMetaData.ABI

// StoreBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StoreMetaData.Bin instead.
var StoreBin = StoreMetaData.Bin

// DeployStore deploys a new Ethereum contract, binding an instance of Store to it.
func DeployStore(auth *bind.TransactOpts, backend bind.ContractBackend, _owner common.Address, _platform_token common.Address, _quorum *big.Int, _threshold *big.Int, _voting_period *big.Int, _effective_delay *big.Int, _expiration_period *big.Int, _proposal_deposit *big.Int) (common.Address, *types.Transaction, *Store, error) {
	parsed, err := StoreMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StoreBin), backend, _owner, _platform_token, _quorum, _threshold, _voting_period, _effective_delay, _expiration_period, _proposal_deposit)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Store{StoreCaller: StoreCaller{contract: contract}, StoreTransactor: StoreTransactor{contract: contract}, StoreFilterer: StoreFilterer{contract: contract}}, nil
}

// Store is an auto generated Go binding around an Ethereum contract.
type Store struct {
	StoreCaller     // Read-only binding to the contract
	StoreTransactor // Write-only binding to the contract
	StoreFilterer   // Log filterer for contract events
}

// StoreCaller is an auto generated read-only Go binding around an Ethereum contract.
type StoreCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoreTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StoreTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoreFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StoreFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoreSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StoreSession struct {
	Contract     *Store            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StoreCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StoreCallerSession struct {
	Contract *StoreCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// StoreTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StoreTransactorSession struct {
	Contract     *StoreTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StoreRaw is an auto generated low-level Go binding around an Ethereum contract.
type StoreRaw struct {
	Contract *Store // Generic contract binding to access the raw methods on
}

// StoreCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StoreCallerRaw struct {
	Contract *StoreCaller // Generic read-only contract binding to access the raw methods on
}

// StoreTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StoreTransactorRaw struct {
	Contract *StoreTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStore creates a new instance of Store, bound to a specific deployed contract.
func NewStore(address common.Address, backend bind.ContractBackend) (*Store, error) {
	contract, err := bindStore(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Store{StoreCaller: StoreCaller{contract: contract}, StoreTransactor: StoreTransactor{contract: contract}, StoreFilterer: StoreFilterer{contract: contract}}, nil
}

// NewStoreCaller creates a new read-only instance of Store, bound to a specific deployed contract.
func NewStoreCaller(address common.Address, caller bind.ContractCaller) (*StoreCaller, error) {
	contract, err := bindStore(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StoreCaller{contract: contract}, nil
}

// NewStoreTransactor creates a new write-only instance of Store, bound to a specific deployed contract.
func NewStoreTransactor(address common.Address, transactor bind.ContractTransactor) (*StoreTransactor, error) {
	contract, err := bindStore(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StoreTransactor{contract: contract}, nil
}

// NewStoreFilterer creates a new log filterer instance of Store, bound to a specific deployed contract.
func NewStoreFilterer(address common.Address, filterer bind.ContractFilterer) (*StoreFilterer, error) {
	contract, err := bindStore(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StoreFilterer{contract: contract}, nil
}

// bindStore binds a generic wrapper to an already deployed contract.
func bindStore(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StoreABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Store *StoreRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Store.Contract.StoreCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Store *StoreRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Store.Contract.StoreTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Store *StoreRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Store.Contract.StoreTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Store *StoreCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Store.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Store *StoreTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Store.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Store *StoreTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Store.Contract.contract.Transact(opts, method, params...)
}

// MAXDESCLENGTH is a free data retrieval call binding the contract method 0x4591ef1a.
//
// Solidity: function MAX_DESC_LENGTH() view returns(uint256)
func (_Store *StoreCaller) MAXDESCLENGTH(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "MAX_DESC_LENGTH")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXDESCLENGTH is a free data retrieval call binding the contract method 0x4591ef1a.
//
// Solidity: function MAX_DESC_LENGTH() view returns(uint256)
func (_Store *StoreSession) MAXDESCLENGTH() (*big.Int, error) {
	return _Store.Contract.MAXDESCLENGTH(&_Store.CallOpts)
}

// MAXDESCLENGTH is a free data retrieval call binding the contract method 0x4591ef1a.
//
// Solidity: function MAX_DESC_LENGTH() view returns(uint256)
func (_Store *StoreCallerSession) MAXDESCLENGTH() (*big.Int, error) {
	return _Store.Contract.MAXDESCLENGTH(&_Store.CallOpts)
}

// MAXLIMIT is a free data retrieval call binding the contract method 0x114cccd2.
//
// Solidity: function MAX_LIMIT() view returns(uint256)
func (_Store *StoreCaller) MAXLIMIT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "MAX_LIMIT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXLIMIT is a free data retrieval call binding the contract method 0x114cccd2.
//
// Solidity: function MAX_LIMIT() view returns(uint256)
func (_Store *StoreSession) MAXLIMIT() (*big.Int, error) {
	return _Store.Contract.MAXLIMIT(&_Store.CallOpts)
}

// MAXLIMIT is a free data retrieval call binding the contract method 0x114cccd2.
//
// Solidity: function MAX_LIMIT() view returns(uint256)
func (_Store *StoreCallerSession) MAXLIMIT() (*big.Int, error) {
	return _Store.Contract.MAXLIMIT(&_Store.CallOpts)
}

// MAXLINKLENGTH is a free data retrieval call binding the contract method 0x71a685ec.
//
// Solidity: function MAX_LINK_LENGTH() view returns(uint256)
func (_Store *StoreCaller) MAXLINKLENGTH(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "MAX_LINK_LENGTH")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXLINKLENGTH is a free data retrieval call binding the contract method 0x71a685ec.
//
// Solidity: function MAX_LINK_LENGTH() view returns(uint256)
func (_Store *StoreSession) MAXLINKLENGTH() (*big.Int, error) {
	return _Store.Contract.MAXLINKLENGTH(&_Store.CallOpts)
}

// MAXLINKLENGTH is a free data retrieval call binding the contract method 0x71a685ec.
//
// Solidity: function MAX_LINK_LENGTH() view returns(uint256)
func (_Store *StoreCallerSession) MAXLINKLENGTH() (*big.Int, error) {
	return _Store.Contract.MAXLINKLENGTH(&_Store.CallOpts)
}

// MAXTITLELENGTH is a free data retrieval call binding the contract method 0x2ef9a160.
//
// Solidity: function MAX_TITLE_LENGTH() view returns(uint256)
func (_Store *StoreCaller) MAXTITLELENGTH(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "MAX_TITLE_LENGTH")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXTITLELENGTH is a free data retrieval call binding the contract method 0x2ef9a160.
//
// Solidity: function MAX_TITLE_LENGTH() view returns(uint256)
func (_Store *StoreSession) MAXTITLELENGTH() (*big.Int, error) {
	return _Store.Contract.MAXTITLELENGTH(&_Store.CallOpts)
}

// MAXTITLELENGTH is a free data retrieval call binding the contract method 0x2ef9a160.
//
// Solidity: function MAX_TITLE_LENGTH() view returns(uint256)
func (_Store *StoreCallerSession) MAXTITLELENGTH() (*big.Int, error) {
	return _Store.Contract.MAXTITLELENGTH(&_Store.CallOpts)
}

// MAXUSERVOTERNUMBER is a free data retrieval call binding the contract method 0xb75ea8c5.
//
// Solidity: function MAX_USER_VOTER_NUMBER() view returns(uint256)
func (_Store *StoreCaller) MAXUSERVOTERNUMBER(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "MAX_USER_VOTER_NUMBER")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXUSERVOTERNUMBER is a free data retrieval call binding the contract method 0xb75ea8c5.
//
// Solidity: function MAX_USER_VOTER_NUMBER() view returns(uint256)
func (_Store *StoreSession) MAXUSERVOTERNUMBER() (*big.Int, error) {
	return _Store.Contract.MAXUSERVOTERNUMBER(&_Store.CallOpts)
}

// MAXUSERVOTERNUMBER is a free data retrieval call binding the contract method 0xb75ea8c5.
//
// Solidity: function MAX_USER_VOTER_NUMBER() view returns(uint256)
func (_Store *StoreCallerSession) MAXUSERVOTERNUMBER() (*big.Int, error) {
	return _Store.Contract.MAXUSERVOTERNUMBER(&_Store.CallOpts)
}

// MINDESCLENGTH is a free data retrieval call binding the contract method 0x8b83f044.
//
// Solidity: function MIN_DESC_LENGTH() view returns(uint256)
func (_Store *StoreCaller) MINDESCLENGTH(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "MIN_DESC_LENGTH")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINDESCLENGTH is a free data retrieval call binding the contract method 0x8b83f044.
//
// Solidity: function MIN_DESC_LENGTH() view returns(uint256)
func (_Store *StoreSession) MINDESCLENGTH() (*big.Int, error) {
	return _Store.Contract.MINDESCLENGTH(&_Store.CallOpts)
}

// MINDESCLENGTH is a free data retrieval call binding the contract method 0x8b83f044.
//
// Solidity: function MIN_DESC_LENGTH() view returns(uint256)
func (_Store *StoreCallerSession) MINDESCLENGTH() (*big.Int, error) {
	return _Store.Contract.MINDESCLENGTH(&_Store.CallOpts)
}

// MINLINKLENGTH is a free data retrieval call binding the contract method 0xf212284d.
//
// Solidity: function MIN_LINK_LENGTH() view returns(uint256)
func (_Store *StoreCaller) MINLINKLENGTH(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "MIN_LINK_LENGTH")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINLINKLENGTH is a free data retrieval call binding the contract method 0xf212284d.
//
// Solidity: function MIN_LINK_LENGTH() view returns(uint256)
func (_Store *StoreSession) MINLINKLENGTH() (*big.Int, error) {
	return _Store.Contract.MINLINKLENGTH(&_Store.CallOpts)
}

// MINLINKLENGTH is a free data retrieval call binding the contract method 0xf212284d.
//
// Solidity: function MIN_LINK_LENGTH() view returns(uint256)
func (_Store *StoreCallerSession) MINLINKLENGTH() (*big.Int, error) {
	return _Store.Contract.MINLINKLENGTH(&_Store.CallOpts)
}

// MINTITLELENGTH is a free data retrieval call binding the contract method 0xf7f29f0c.
//
// Solidity: function MIN_TITLE_LENGTH() view returns(uint256)
func (_Store *StoreCaller) MINTITLELENGTH(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "MIN_TITLE_LENGTH")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINTITLELENGTH is a free data retrieval call binding the contract method 0xf7f29f0c.
//
// Solidity: function MIN_TITLE_LENGTH() view returns(uint256)
func (_Store *StoreSession) MINTITLELENGTH() (*big.Int, error) {
	return _Store.Contract.MINTITLELENGTH(&_Store.CallOpts)
}

// MINTITLELENGTH is a free data retrieval call binding the contract method 0xf7f29f0c.
//
// Solidity: function MIN_TITLE_LENGTH() view returns(uint256)
func (_Store *StoreCallerSession) MINTITLELENGTH() (*big.Int, error) {
	return _Store.Contract.MINTITLELENGTH(&_Store.CallOpts)
}

// PERCENTPRECISION is a free data retrieval call binding the contract method 0xffe8e372.
//
// Solidity: function PERCENT_PRECISION() view returns(uint256)
func (_Store *StoreCaller) PERCENTPRECISION(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "PERCENT_PRECISION")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PERCENTPRECISION is a free data retrieval call binding the contract method 0xffe8e372.
//
// Solidity: function PERCENT_PRECISION() view returns(uint256)
func (_Store *StoreSession) PERCENTPRECISION() (*big.Int, error) {
	return _Store.Contract.PERCENTPRECISION(&_Store.CallOpts)
}

// PERCENTPRECISION is a free data retrieval call binding the contract method 0xffe8e372.
//
// Solidity: function PERCENT_PRECISION() view returns(uint256)
func (_Store *StoreCallerSession) PERCENTPRECISION() (*big.Int, error) {
	return _Store.Contract.PERCENTPRECISION(&_Store.CallOpts)
}

// QueryConfig is a free data retrieval call binding the contract method 0xf2090893.
//
// Solidity: function QueryConfig() view returns((address,address,uint256,uint256,uint256,uint256,uint256,uint256,address,address))
func (_Store *StoreCaller) QueryConfig(opts *bind.CallOpts) (GovConfig, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "QueryConfig")

	if err != nil {
		return *new(GovConfig), err
	}

	out0 := *abi.ConvertType(out[0], new(GovConfig)).(*GovConfig)

	return out0, err

}

// QueryConfig is a free data retrieval call binding the contract method 0xf2090893.
//
// Solidity: function QueryConfig() view returns((address,address,uint256,uint256,uint256,uint256,uint256,uint256,address,address))
func (_Store *StoreSession) QueryConfig() (GovConfig, error) {
	return _Store.Contract.QueryConfig(&_Store.CallOpts)
}

// QueryConfig is a free data retrieval call binding the contract method 0xf2090893.
//
// Solidity: function QueryConfig() view returns((address,address,uint256,uint256,uint256,uint256,uint256,uint256,address,address))
func (_Store *StoreCallerSession) QueryConfig() (GovConfig, error) {
	return _Store.Contract.QueryConfig(&_Store.CallOpts)
}

// QueryPoll is a free data retrieval call binding the contract method 0x89ca100c.
//
// Solidity: function QueryPoll(uint256 _poll_id) view returns((uint256,address,uint8,uint256,uint256,uint256,string,string,string,address,string,bytes,uint256,uint256) poll)
func (_Store *StoreCaller) QueryPoll(opts *bind.CallOpts, _poll_id *big.Int) (GovPoll, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "QueryPoll", _poll_id)

	if err != nil {
		return *new(GovPoll), err
	}

	out0 := *abi.ConvertType(out[0], new(GovPoll)).(*GovPoll)

	return out0, err

}

// QueryPoll is a free data retrieval call binding the contract method 0x89ca100c.
//
// Solidity: function QueryPoll(uint256 _poll_id) view returns((uint256,address,uint8,uint256,uint256,uint256,string,string,string,address,string,bytes,uint256,uint256) poll)
func (_Store *StoreSession) QueryPoll(_poll_id *big.Int) (GovPoll, error) {
	return _Store.Contract.QueryPoll(&_Store.CallOpts, _poll_id)
}

// QueryPoll is a free data retrieval call binding the contract method 0x89ca100c.
//
// Solidity: function QueryPoll(uint256 _poll_id) view returns((uint256,address,uint8,uint256,uint256,uint256,string,string,string,address,string,bytes,uint256,uint256) poll)
func (_Store *StoreCallerSession) QueryPoll(_poll_id *big.Int) (GovPoll, error) {
	return _Store.Contract.QueryPoll(&_Store.CallOpts, _poll_id)
}

// QueryPolls is a free data retrieval call binding the contract method 0x569d1839.
//
// Solidity: function QueryPolls(uint8 fileter, uint256 _start_after, uint256 _limit, bool _isAsc) view returns((uint256,address,uint8,uint256,uint256,uint256,string,string,string,address,string,bytes,uint256,uint256)[] poll, uint256 len)
func (_Store *StoreCaller) QueryPolls(opts *bind.CallOpts, fileter uint8, _start_after *big.Int, _limit *big.Int, _isAsc bool) (struct {
	Poll []GovPoll
	Len  *big.Int
}, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "QueryPolls", fileter, _start_after, _limit, _isAsc)

	outstruct := new(struct {
		Poll []GovPoll
		Len  *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Poll = *abi.ConvertType(out[0], new([]GovPoll)).(*[]GovPoll)
	outstruct.Len = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// QueryPolls is a free data retrieval call binding the contract method 0x569d1839.
//
// Solidity: function QueryPolls(uint8 fileter, uint256 _start_after, uint256 _limit, bool _isAsc) view returns((uint256,address,uint8,uint256,uint256,uint256,string,string,string,address,string,bytes,uint256,uint256)[] poll, uint256 len)
func (_Store *StoreSession) QueryPolls(fileter uint8, _start_after *big.Int, _limit *big.Int, _isAsc bool) (struct {
	Poll []GovPoll
	Len  *big.Int
}, error) {
	return _Store.Contract.QueryPolls(&_Store.CallOpts, fileter, _start_after, _limit, _isAsc)
}

// QueryPolls is a free data retrieval call binding the contract method 0x569d1839.
//
// Solidity: function QueryPolls(uint8 fileter, uint256 _start_after, uint256 _limit, bool _isAsc) view returns((uint256,address,uint8,uint256,uint256,uint256,string,string,string,address,string,bytes,uint256,uint256)[] poll, uint256 len)
func (_Store *StoreCallerSession) QueryPolls(fileter uint8, _start_after *big.Int, _limit *big.Int, _isAsc bool) (struct {
	Poll []GovPoll
	Len  *big.Int
}, error) {
	return _Store.Contract.QueryPolls(&_Store.CallOpts, fileter, _start_after, _limit, _isAsc)
}

// QueryStaker is a free data retrieval call binding the contract method 0xe1be4ca4.
//
// Solidity: function QueryStaker(address user) view returns((uint256,uint256,(uint256,(address,uint8,uint256))[],uint256) staker)
func (_Store *StoreCaller) QueryStaker(opts *bind.CallOpts, user common.Address) (GovStakerResponse, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "QueryStaker", user)

	if err != nil {
		return *new(GovStakerResponse), err
	}

	out0 := *abi.ConvertType(out[0], new(GovStakerResponse)).(*GovStakerResponse)

	return out0, err

}

// QueryStaker is a free data retrieval call binding the contract method 0xe1be4ca4.
//
// Solidity: function QueryStaker(address user) view returns((uint256,uint256,(uint256,(address,uint8,uint256))[],uint256) staker)
func (_Store *StoreSession) QueryStaker(user common.Address) (GovStakerResponse, error) {
	return _Store.Contract.QueryStaker(&_Store.CallOpts, user)
}

// QueryStaker is a free data retrieval call binding the contract method 0xe1be4ca4.
//
// Solidity: function QueryStaker(address user) view returns((uint256,uint256,(uint256,(address,uint8,uint256))[],uint256) staker)
func (_Store *StoreCallerSession) QueryStaker(user common.Address) (GovStakerResponse, error) {
	return _Store.Contract.QueryStaker(&_Store.CallOpts, user)
}

// QueryState is a free data retrieval call binding the contract method 0xe89b1506.
//
// Solidity: function QueryState() view returns((uint256,uint256,uint256))
func (_Store *StoreCaller) QueryState(opts *bind.CallOpts) (GovState, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "QueryState")

	if err != nil {
		return *new(GovState), err
	}

	out0 := *abi.ConvertType(out[0], new(GovState)).(*GovState)

	return out0, err

}

// QueryState is a free data retrieval call binding the contract method 0xe89b1506.
//
// Solidity: function QueryState() view returns((uint256,uint256,uint256))
func (_Store *StoreSession) QueryState() (GovState, error) {
	return _Store.Contract.QueryState(&_Store.CallOpts)
}

// QueryState is a free data retrieval call binding the contract method 0xe89b1506.
//
// Solidity: function QueryState() view returns((uint256,uint256,uint256))
func (_Store *StoreCallerSession) QueryState() (GovState, error) {
	return _Store.Contract.QueryState(&_Store.CallOpts)
}

// QueryVoters is a free data retrieval call binding the contract method 0x2b63d336.
//
// Solidity: function QueryVoters(uint256 poll_id, uint256 _start, uint256 _limit, bool _isAsc) view returns((address[],uint8[],uint256[]) vote, uint256 len)
func (_Store *StoreCaller) QueryVoters(opts *bind.CallOpts, poll_id *big.Int, _start *big.Int, _limit *big.Int, _isAsc bool) (struct {
	Vote GovVoterManager
	Len  *big.Int
}, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "QueryVoters", poll_id, _start, _limit, _isAsc)

	outstruct := new(struct {
		Vote GovVoterManager
		Len  *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Vote = *abi.ConvertType(out[0], new(GovVoterManager)).(*GovVoterManager)
	outstruct.Len = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// QueryVoters is a free data retrieval call binding the contract method 0x2b63d336.
//
// Solidity: function QueryVoters(uint256 poll_id, uint256 _start, uint256 _limit, bool _isAsc) view returns((address[],uint8[],uint256[]) vote, uint256 len)
func (_Store *StoreSession) QueryVoters(poll_id *big.Int, _start *big.Int, _limit *big.Int, _isAsc bool) (struct {
	Vote GovVoterManager
	Len  *big.Int
}, error) {
	return _Store.Contract.QueryVoters(&_Store.CallOpts, poll_id, _start, _limit, _isAsc)
}

// QueryVoters is a free data retrieval call binding the contract method 0x2b63d336.
//
// Solidity: function QueryVoters(uint256 poll_id, uint256 _start, uint256 _limit, bool _isAsc) view returns((address[],uint8[],uint256[]) vote, uint256 len)
func (_Store *StoreCallerSession) QueryVoters(poll_id *big.Int, _start *big.Int, _limit *big.Int, _isAsc bool) (struct {
	Vote GovVoterManager
	Len  *big.Int
}, error) {
	return _Store.Contract.QueryVoters(&_Store.CallOpts, poll_id, _start, _limit, _isAsc)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(address owner, address platform_token, uint256 quorum, uint256 threshold, uint256 voting_period, uint256 effective_delay, uint256 expiration_period, uint256 proposal_deposit, address blindbox, address prizepool)
func (_Store *StoreCaller) Config(opts *bind.CallOpts) (struct {
	Owner            common.Address
	PlatformToken    common.Address
	Quorum           *big.Int
	Threshold        *big.Int
	VotingPeriod     *big.Int
	EffectiveDelay   *big.Int
	ExpirationPeriod *big.Int
	ProposalDeposit  *big.Int
	Blindbox         common.Address
	Prizepool        common.Address
}, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "config")

	outstruct := new(struct {
		Owner            common.Address
		PlatformToken    common.Address
		Quorum           *big.Int
		Threshold        *big.Int
		VotingPeriod     *big.Int
		EffectiveDelay   *big.Int
		ExpirationPeriod *big.Int
		ProposalDeposit  *big.Int
		Blindbox         common.Address
		Prizepool        common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Owner = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.PlatformToken = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.Quorum = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Threshold = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VotingPeriod = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.EffectiveDelay = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.ExpirationPeriod = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)
	outstruct.ProposalDeposit = *abi.ConvertType(out[7], new(*big.Int)).(**big.Int)
	outstruct.Blindbox = *abi.ConvertType(out[8], new(common.Address)).(*common.Address)
	outstruct.Prizepool = *abi.ConvertType(out[9], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(address owner, address platform_token, uint256 quorum, uint256 threshold, uint256 voting_period, uint256 effective_delay, uint256 expiration_period, uint256 proposal_deposit, address blindbox, address prizepool)
func (_Store *StoreSession) Config() (struct {
	Owner            common.Address
	PlatformToken    common.Address
	Quorum           *big.Int
	Threshold        *big.Int
	VotingPeriod     *big.Int
	EffectiveDelay   *big.Int
	ExpirationPeriod *big.Int
	ProposalDeposit  *big.Int
	Blindbox         common.Address
	Prizepool        common.Address
}, error) {
	return _Store.Contract.Config(&_Store.CallOpts)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(address owner, address platform_token, uint256 quorum, uint256 threshold, uint256 voting_period, uint256 effective_delay, uint256 expiration_period, uint256 proposal_deposit, address blindbox, address prizepool)
func (_Store *StoreCallerSession) Config() (struct {
	Owner            common.Address
	PlatformToken    common.Address
	Quorum           *big.Int
	Threshold        *big.Int
	VotingPeriod     *big.Int
	EffectiveDelay   *big.Int
	ExpirationPeriod *big.Int
	ProposalDeposit  *big.Int
	Blindbox         common.Address
	Prizepool        common.Address
}, error) {
	return _Store.Contract.Config(&_Store.CallOpts)
}

// State is a free data retrieval call binding the contract method 0xc19d93fb.
//
// Solidity: function state() view returns(uint256 poll_count, uint256 total_share, uint256 total_deposit)
func (_Store *StoreCaller) State(opts *bind.CallOpts) (struct {
	PollCount    *big.Int
	TotalShare   *big.Int
	TotalDeposit *big.Int
}, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "state")

	outstruct := new(struct {
		PollCount    *big.Int
		TotalShare   *big.Int
		TotalDeposit *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.PollCount = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.TotalShare = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.TotalDeposit = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// State is a free data retrieval call binding the contract method 0xc19d93fb.
//
// Solidity: function state() view returns(uint256 poll_count, uint256 total_share, uint256 total_deposit)
func (_Store *StoreSession) State() (struct {
	PollCount    *big.Int
	TotalShare   *big.Int
	TotalDeposit *big.Int
}, error) {
	return _Store.Contract.State(&_Store.CallOpts)
}

// State is a free data retrieval call binding the contract method 0xc19d93fb.
//
// Solidity: function state() view returns(uint256 poll_count, uint256 total_share, uint256 total_deposit)
func (_Store *StoreCallerSession) State() (struct {
	PollCount    *big.Int
	TotalShare   *big.Int
	TotalDeposit *big.Int
}, error) {
	return _Store.Contract.State(&_Store.CallOpts)
}

// CastVote is a paid mutator transaction binding the contract method 0x466a27d3.
//
// Solidity: function CastVote(uint256 _poll_id, uint8 vote, uint256 _amount) returns()
func (_Store *StoreTransactor) CastVote(opts *bind.TransactOpts, _poll_id *big.Int, vote uint8, _amount *big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "CastVote", _poll_id, vote, _amount)
}

// CastVote is a paid mutator transaction binding the contract method 0x466a27d3.
//
// Solidity: function CastVote(uint256 _poll_id, uint8 vote, uint256 _amount) returns()
func (_Store *StoreSession) CastVote(_poll_id *big.Int, vote uint8, _amount *big.Int) (*types.Transaction, error) {
	return _Store.Contract.CastVote(&_Store.TransactOpts, _poll_id, vote, _amount)
}

// CastVote is a paid mutator transaction binding the contract method 0x466a27d3.
//
// Solidity: function CastVote(uint256 _poll_id, uint8 vote, uint256 _amount) returns()
func (_Store *StoreTransactorSession) CastVote(_poll_id *big.Int, vote uint8, _amount *big.Int) (*types.Transaction, error) {
	return _Store.Contract.CastVote(&_Store.TransactOpts, _poll_id, vote, _amount)
}

// CreatePoll is a paid mutator transaction binding the contract method 0xcad44783.
//
// Solidity: function CreatePoll(uint256 _deposit_amount, string _title, string _description, string _link, address _target, string _selector, bytes _data) returns()
func (_Store *StoreTransactor) CreatePoll(opts *bind.TransactOpts, _deposit_amount *big.Int, _title string, _description string, _link string, _target common.Address, _selector string, _data []byte) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "CreatePoll", _deposit_amount, _title, _description, _link, _target, _selector, _data)
}

// CreatePoll is a paid mutator transaction binding the contract method 0xcad44783.
//
// Solidity: function CreatePoll(uint256 _deposit_amount, string _title, string _description, string _link, address _target, string _selector, bytes _data) returns()
func (_Store *StoreSession) CreatePoll(_deposit_amount *big.Int, _title string, _description string, _link string, _target common.Address, _selector string, _data []byte) (*types.Transaction, error) {
	return _Store.Contract.CreatePoll(&_Store.TransactOpts, _deposit_amount, _title, _description, _link, _target, _selector, _data)
}

// CreatePoll is a paid mutator transaction binding the contract method 0xcad44783.
//
// Solidity: function CreatePoll(uint256 _deposit_amount, string _title, string _description, string _link, address _target, string _selector, bytes _data) returns()
func (_Store *StoreTransactorSession) CreatePoll(_deposit_amount *big.Int, _title string, _description string, _link string, _target common.Address, _selector string, _data []byte) (*types.Transaction, error) {
	return _Store.Contract.CreatePoll(&_Store.TransactOpts, _deposit_amount, _title, _description, _link, _target, _selector, _data)
}

// EndPoll is a paid mutator transaction binding the contract method 0x0fc47b09.
//
// Solidity: function EndPoll(uint256 _poll_id) returns()
func (_Store *StoreTransactor) EndPoll(opts *bind.TransactOpts, _poll_id *big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "EndPoll", _poll_id)
}

// EndPoll is a paid mutator transaction binding the contract method 0x0fc47b09.
//
// Solidity: function EndPoll(uint256 _poll_id) returns()
func (_Store *StoreSession) EndPoll(_poll_id *big.Int) (*types.Transaction, error) {
	return _Store.Contract.EndPoll(&_Store.TransactOpts, _poll_id)
}

// EndPoll is a paid mutator transaction binding the contract method 0x0fc47b09.
//
// Solidity: function EndPoll(uint256 _poll_id) returns()
func (_Store *StoreTransactorSession) EndPoll(_poll_id *big.Int) (*types.Transaction, error) {
	return _Store.Contract.EndPoll(&_Store.TransactOpts, _poll_id)
}

// ExcutePoll is a paid mutator transaction binding the contract method 0xe762a71e.
//
// Solidity: function ExcutePoll(uint256 _poll_id) returns()
func (_Store *StoreTransactor) ExcutePoll(opts *bind.TransactOpts, _poll_id *big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "ExcutePoll", _poll_id)
}

// ExcutePoll is a paid mutator transaction binding the contract method 0xe762a71e.
//
// Solidity: function ExcutePoll(uint256 _poll_id) returns()
func (_Store *StoreSession) ExcutePoll(_poll_id *big.Int) (*types.Transaction, error) {
	return _Store.Contract.ExcutePoll(&_Store.TransactOpts, _poll_id)
}

// ExcutePoll is a paid mutator transaction binding the contract method 0xe762a71e.
//
// Solidity: function ExcutePoll(uint256 _poll_id) returns()
func (_Store *StoreTransactorSession) ExcutePoll(_poll_id *big.Int) (*types.Transaction, error) {
	return _Store.Contract.ExcutePoll(&_Store.TransactOpts, _poll_id)
}

// ExpirePoll is a paid mutator transaction binding the contract method 0x690100ba.
//
// Solidity: function ExpirePoll(uint256 _poll_id) returns()
func (_Store *StoreTransactor) ExpirePoll(opts *bind.TransactOpts, _poll_id *big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "ExpirePoll", _poll_id)
}

// ExpirePoll is a paid mutator transaction binding the contract method 0x690100ba.
//
// Solidity: function ExpirePoll(uint256 _poll_id) returns()
func (_Store *StoreSession) ExpirePoll(_poll_id *big.Int) (*types.Transaction, error) {
	return _Store.Contract.ExpirePoll(&_Store.TransactOpts, _poll_id)
}

// ExpirePoll is a paid mutator transaction binding the contract method 0x690100ba.
//
// Solidity: function ExpirePoll(uint256 _poll_id) returns()
func (_Store *StoreTransactorSession) ExpirePoll(_poll_id *big.Int) (*types.Transaction, error) {
	return _Store.Contract.ExpirePoll(&_Store.TransactOpts, _poll_id)
}

// Init is a paid mutator transaction binding the contract method 0x45acd56f.
//
// Solidity: function Init(address _platform_lp, address _staking_addr) returns()
func (_Store *StoreTransactor) Init(opts *bind.TransactOpts, _platform_lp common.Address, _staking_addr common.Address) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "Init", _platform_lp, _staking_addr)
}

// Init is a paid mutator transaction binding the contract method 0x45acd56f.
//
// Solidity: function Init(address _platform_lp, address _staking_addr) returns()
func (_Store *StoreSession) Init(_platform_lp common.Address, _staking_addr common.Address) (*types.Transaction, error) {
	return _Store.Contract.Init(&_Store.TransactOpts, _platform_lp, _staking_addr)
}

// Init is a paid mutator transaction binding the contract method 0x45acd56f.
//
// Solidity: function Init(address _platform_lp, address _staking_addr) returns()
func (_Store *StoreTransactorSession) Init(_platform_lp common.Address, _staking_addr common.Address) (*types.Transaction, error) {
	return _Store.Contract.Init(&_Store.TransactOpts, _platform_lp, _staking_addr)
}

// StakeVotingTokens is a paid mutator transaction binding the contract method 0x33ae2532.
//
// Solidity: function StakeVotingTokens(uint256 _amount) returns()
func (_Store *StoreTransactor) StakeVotingTokens(opts *bind.TransactOpts, _amount *big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "StakeVotingTokens", _amount)
}

// StakeVotingTokens is a paid mutator transaction binding the contract method 0x33ae2532.
//
// Solidity: function StakeVotingTokens(uint256 _amount) returns()
func (_Store *StoreSession) StakeVotingTokens(_amount *big.Int) (*types.Transaction, error) {
	return _Store.Contract.StakeVotingTokens(&_Store.TransactOpts, _amount)
}

// StakeVotingTokens is a paid mutator transaction binding the contract method 0x33ae2532.
//
// Solidity: function StakeVotingTokens(uint256 _amount) returns()
func (_Store *StoreTransactorSession) StakeVotingTokens(_amount *big.Int) (*types.Transaction, error) {
	return _Store.Contract.StakeVotingTokens(&_Store.TransactOpts, _amount)
}

// UpdateConfig is a paid mutator transaction binding the contract method 0x4e9d309b.
//
// Solidity: function UpdateConfig(address _owner, address _platform_token, uint256 _quorum, uint256 _threshold, uint256 _voting_period, uint256 _effective_delay, uint256 _expiration_period, uint256 _proposal_deposit) returns()
func (_Store *StoreTransactor) UpdateConfig(opts *bind.TransactOpts, _owner common.Address, _platform_token common.Address, _quorum *big.Int, _threshold *big.Int, _voting_period *big.Int, _effective_delay *big.Int, _expiration_period *big.Int, _proposal_deposit *big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "UpdateConfig", _owner, _platform_token, _quorum, _threshold, _voting_period, _effective_delay, _expiration_period, _proposal_deposit)
}

// UpdateConfig is a paid mutator transaction binding the contract method 0x4e9d309b.
//
// Solidity: function UpdateConfig(address _owner, address _platform_token, uint256 _quorum, uint256 _threshold, uint256 _voting_period, uint256 _effective_delay, uint256 _expiration_period, uint256 _proposal_deposit) returns()
func (_Store *StoreSession) UpdateConfig(_owner common.Address, _platform_token common.Address, _quorum *big.Int, _threshold *big.Int, _voting_period *big.Int, _effective_delay *big.Int, _expiration_period *big.Int, _proposal_deposit *big.Int) (*types.Transaction, error) {
	return _Store.Contract.UpdateConfig(&_Store.TransactOpts, _owner, _platform_token, _quorum, _threshold, _voting_period, _effective_delay, _expiration_period, _proposal_deposit)
}

// UpdateConfig is a paid mutator transaction binding the contract method 0x4e9d309b.
//
// Solidity: function UpdateConfig(address _owner, address _platform_token, uint256 _quorum, uint256 _threshold, uint256 _voting_period, uint256 _effective_delay, uint256 _expiration_period, uint256 _proposal_deposit) returns()
func (_Store *StoreTransactorSession) UpdateConfig(_owner common.Address, _platform_token common.Address, _quorum *big.Int, _threshold *big.Int, _voting_period *big.Int, _effective_delay *big.Int, _expiration_period *big.Int, _proposal_deposit *big.Int) (*types.Transaction, error) {
	return _Store.Contract.UpdateConfig(&_Store.TransactOpts, _owner, _platform_token, _quorum, _threshold, _voting_period, _effective_delay, _expiration_period, _proposal_deposit)
}

// WithdrawVotingTokens is a paid mutator transaction binding the contract method 0xe108e635.
//
// Solidity: function WithdrawVotingTokens(uint256 _amount) returns()
func (_Store *StoreTransactor) WithdrawVotingTokens(opts *bind.TransactOpts, _amount *big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "WithdrawVotingTokens", _amount)
}

// WithdrawVotingTokens is a paid mutator transaction binding the contract method 0xe108e635.
//
// Solidity: function WithdrawVotingTokens(uint256 _amount) returns()
func (_Store *StoreSession) WithdrawVotingTokens(_amount *big.Int) (*types.Transaction, error) {
	return _Store.Contract.WithdrawVotingTokens(&_Store.TransactOpts, _amount)
}

// WithdrawVotingTokens is a paid mutator transaction binding the contract method 0xe108e635.
//
// Solidity: function WithdrawVotingTokens(uint256 _amount) returns()
func (_Store *StoreTransactorSession) WithdrawVotingTokens(_amount *big.Int) (*types.Transaction, error) {
	return _Store.Contract.WithdrawVotingTokens(&_Store.TransactOpts, _amount)
}

// StoreCastVoteIterator is returned from FilterCastVote and is used to iterate over the raw logs and unpacked data for CastVote events raised by the Store contract.
type StoreCastVoteIterator struct {
	Event *StoreCastVote // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreCastVoteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreCastVote)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreCastVote)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreCastVoteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreCastVoteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreCastVote represents a CastVote event raised by the Store contract.
type StoreCastVote struct {
	User   common.Address
	PollId *big.Int
	Vote   uint8
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterCastVote is a free log retrieval operation binding the contract event 0x64181ed62232bbc65a9963c235252f2a4cc65d0c5793a0c99cad2844a2725789.
//
// Solidity: event cast_vote(address _user, uint256 _poll_id, uint8 vote, uint256 _amount)
func (_Store *StoreFilterer) FilterCastVote(opts *bind.FilterOpts) (*StoreCastVoteIterator, error) {

	logs, sub, err := _Store.contract.FilterLogs(opts, "cast_vote")
	if err != nil {
		return nil, err
	}
	return &StoreCastVoteIterator{contract: _Store.contract, event: "cast_vote", logs: logs, sub: sub}, nil
}

// WatchCastVote is a free log subscription operation binding the contract event 0x64181ed62232bbc65a9963c235252f2a4cc65d0c5793a0c99cad2844a2725789.
//
// Solidity: event cast_vote(address _user, uint256 _poll_id, uint8 vote, uint256 _amount)
func (_Store *StoreFilterer) WatchCastVote(opts *bind.WatchOpts, sink chan<- *StoreCastVote) (event.Subscription, error) {

	logs, sub, err := _Store.contract.WatchLogs(opts, "cast_vote")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreCastVote)
				if err := _Store.contract.UnpackLog(event, "cast_vote", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCastVote is a log parse operation binding the contract event 0x64181ed62232bbc65a9963c235252f2a4cc65d0c5793a0c99cad2844a2725789.
//
// Solidity: event cast_vote(address _user, uint256 _poll_id, uint8 vote, uint256 _amount)
func (_Store *StoreFilterer) ParseCastVote(log types.Log) (*StoreCastVote, error) {
	event := new(StoreCastVote)
	if err := _Store.contract.UnpackLog(event, "cast_vote", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StoreCreatePollIterator is returned from FilterCreatePoll and is used to iterate over the raw logs and unpacked data for CreatePoll events raised by the Store contract.
type StoreCreatePollIterator struct {
	Event *StoreCreatePoll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreCreatePollIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreCreatePoll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreCreatePoll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreCreatePollIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreCreatePollIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreCreatePoll represents a CreatePoll event raised by the Store contract.
type StoreCreatePoll struct {
	Creator   common.Address
	PollId    *big.Int
	EndHeight *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterCreatePoll is a free log retrieval operation binding the contract event 0xfd345e42c4911180178ec3cd183a68587b3bf1e5a641a6d84503b366653ce048.
//
// Solidity: event create_poll(address _creator, uint256 _poll_id, uint256 _end_height)
func (_Store *StoreFilterer) FilterCreatePoll(opts *bind.FilterOpts) (*StoreCreatePollIterator, error) {

	logs, sub, err := _Store.contract.FilterLogs(opts, "create_poll")
	if err != nil {
		return nil, err
	}
	return &StoreCreatePollIterator{contract: _Store.contract, event: "create_poll", logs: logs, sub: sub}, nil
}

// WatchCreatePoll is a free log subscription operation binding the contract event 0xfd345e42c4911180178ec3cd183a68587b3bf1e5a641a6d84503b366653ce048.
//
// Solidity: event create_poll(address _creator, uint256 _poll_id, uint256 _end_height)
func (_Store *StoreFilterer) WatchCreatePoll(opts *bind.WatchOpts, sink chan<- *StoreCreatePoll) (event.Subscription, error) {

	logs, sub, err := _Store.contract.WatchLogs(opts, "create_poll")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreCreatePoll)
				if err := _Store.contract.UnpackLog(event, "create_poll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreatePoll is a log parse operation binding the contract event 0xfd345e42c4911180178ec3cd183a68587b3bf1e5a641a6d84503b366653ce048.
//
// Solidity: event create_poll(address _creator, uint256 _poll_id, uint256 _end_height)
func (_Store *StoreFilterer) ParseCreatePoll(log types.Log) (*StoreCreatePoll, error) {
	event := new(StoreCreatePoll)
	if err := _Store.contract.UnpackLog(event, "create_poll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StoreEndPollLogIterator is returned from FilterEndPollLog and is used to iterate over the raw logs and unpacked data for EndPollLog events raised by the Store contract.
type StoreEndPollLogIterator struct {
	Event *StoreEndPollLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreEndPollLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreEndPollLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreEndPollLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreEndPollLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreEndPollLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreEndPollLog represents a EndPollLog event raised by the Store contract.
type StoreEndPollLog struct {
	Arg0 *big.Int
	Arg1 string
	Arg2 bool
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterEndPollLog is a free log retrieval operation binding the contract event 0x0950b932ae5a3e46be952937f16f7557d6add7bc12c995c3d7c557bf8f4334bd.
//
// Solidity: event end_poll_log(uint256 arg0, string arg1, bool arg2)
func (_Store *StoreFilterer) FilterEndPollLog(opts *bind.FilterOpts) (*StoreEndPollLogIterator, error) {

	logs, sub, err := _Store.contract.FilterLogs(opts, "end_poll_log")
	if err != nil {
		return nil, err
	}
	return &StoreEndPollLogIterator{contract: _Store.contract, event: "end_poll_log", logs: logs, sub: sub}, nil
}

// WatchEndPollLog is a free log subscription operation binding the contract event 0x0950b932ae5a3e46be952937f16f7557d6add7bc12c995c3d7c557bf8f4334bd.
//
// Solidity: event end_poll_log(uint256 arg0, string arg1, bool arg2)
func (_Store *StoreFilterer) WatchEndPollLog(opts *bind.WatchOpts, sink chan<- *StoreEndPollLog) (event.Subscription, error) {

	logs, sub, err := _Store.contract.WatchLogs(opts, "end_poll_log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreEndPollLog)
				if err := _Store.contract.UnpackLog(event, "end_poll_log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEndPollLog is a log parse operation binding the contract event 0x0950b932ae5a3e46be952937f16f7557d6add7bc12c995c3d7c557bf8f4334bd.
//
// Solidity: event end_poll_log(uint256 arg0, string arg1, bool arg2)
func (_Store *StoreFilterer) ParseEndPollLog(log types.Log) (*StoreEndPollLog, error) {
	event := new(StoreEndPollLog)
	if err := _Store.contract.UnpackLog(event, "end_poll_log", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StoreExecuteLogIterator is returned from FilterExecuteLog and is used to iterate over the raw logs and unpacked data for ExecuteLog events raised by the Store contract.
type StoreExecuteLogIterator struct {
	Event *StoreExecuteLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreExecuteLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreExecuteLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreExecuteLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreExecuteLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreExecuteLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreExecuteLog represents a ExecuteLog event raised by the Store contract.
type StoreExecuteLog struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterExecuteLog is a free log retrieval operation binding the contract event 0x8ec758e2f3d5c816caba78046d4de5ebdf1e5d5f329d7c176bfd2dd2622fb93c.
//
// Solidity: event execute_log(uint256 arg0)
func (_Store *StoreFilterer) FilterExecuteLog(opts *bind.FilterOpts) (*StoreExecuteLogIterator, error) {

	logs, sub, err := _Store.contract.FilterLogs(opts, "execute_log")
	if err != nil {
		return nil, err
	}
	return &StoreExecuteLogIterator{contract: _Store.contract, event: "execute_log", logs: logs, sub: sub}, nil
}

// WatchExecuteLog is a free log subscription operation binding the contract event 0x8ec758e2f3d5c816caba78046d4de5ebdf1e5d5f329d7c176bfd2dd2622fb93c.
//
// Solidity: event execute_log(uint256 arg0)
func (_Store *StoreFilterer) WatchExecuteLog(opts *bind.WatchOpts, sink chan<- *StoreExecuteLog) (event.Subscription, error) {

	logs, sub, err := _Store.contract.WatchLogs(opts, "execute_log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreExecuteLog)
				if err := _Store.contract.UnpackLog(event, "execute_log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecuteLog is a log parse operation binding the contract event 0x8ec758e2f3d5c816caba78046d4de5ebdf1e5d5f329d7c176bfd2dd2622fb93c.
//
// Solidity: event execute_log(uint256 arg0)
func (_Store *StoreFilterer) ParseExecuteLog(log types.Log) (*StoreExecuteLog, error) {
	event := new(StoreExecuteLog)
	if err := _Store.contract.UnpackLog(event, "execute_log", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StoreExpireLogIterator is returned from FilterExpireLog and is used to iterate over the raw logs and unpacked data for ExpireLog events raised by the Store contract.
type StoreExpireLogIterator struct {
	Event *StoreExpireLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreExpireLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreExpireLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreExpireLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreExpireLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreExpireLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreExpireLog represents a ExpireLog event raised by the Store contract.
type StoreExpireLog struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterExpireLog is a free log retrieval operation binding the contract event 0x19f39e9842ad4e1d30ae06de1390debcfd9d79398b0e2d800d8b640c3329eb1c.
//
// Solidity: event expire_log(uint256 arg0)
func (_Store *StoreFilterer) FilterExpireLog(opts *bind.FilterOpts) (*StoreExpireLogIterator, error) {

	logs, sub, err := _Store.contract.FilterLogs(opts, "expire_log")
	if err != nil {
		return nil, err
	}
	return &StoreExpireLogIterator{contract: _Store.contract, event: "expire_log", logs: logs, sub: sub}, nil
}

// WatchExpireLog is a free log subscription operation binding the contract event 0x19f39e9842ad4e1d30ae06de1390debcfd9d79398b0e2d800d8b640c3329eb1c.
//
// Solidity: event expire_log(uint256 arg0)
func (_Store *StoreFilterer) WatchExpireLog(opts *bind.WatchOpts, sink chan<- *StoreExpireLog) (event.Subscription, error) {

	logs, sub, err := _Store.contract.WatchLogs(opts, "expire_log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreExpireLog)
				if err := _Store.contract.UnpackLog(event, "expire_log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExpireLog is a log parse operation binding the contract event 0x19f39e9842ad4e1d30ae06de1390debcfd9d79398b0e2d800d8b640c3329eb1c.
//
// Solidity: event expire_log(uint256 arg0)
func (_Store *StoreFilterer) ParseExpireLog(log types.Log) (*StoreExpireLog, error) {
	event := new(StoreExpireLog)
	if err := _Store.contract.UnpackLog(event, "expire_log", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StoreStakeVotingTokenIterator is returned from FilterStakeVotingToken and is used to iterate over the raw logs and unpacked data for StakeVotingToken events raised by the Store contract.
type StoreStakeVotingTokenIterator struct {
	Event *StoreStakeVotingToken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreStakeVotingTokenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreStakeVotingToken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreStakeVotingToken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreStakeVotingTokenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreStakeVotingTokenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreStakeVotingToken represents a StakeVotingToken event raised by the Store contract.
type StoreStakeVotingToken struct {
	User   common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterStakeVotingToken is a free log retrieval operation binding the contract event 0x5f9622392aaeb057345a56c5cd49c4625a50bda0f6ea6c3bc5d984eae20f42f9.
//
// Solidity: event stake_voting_token(address _user, uint256 _amount)
func (_Store *StoreFilterer) FilterStakeVotingToken(opts *bind.FilterOpts) (*StoreStakeVotingTokenIterator, error) {

	logs, sub, err := _Store.contract.FilterLogs(opts, "stake_voting_token")
	if err != nil {
		return nil, err
	}
	return &StoreStakeVotingTokenIterator{contract: _Store.contract, event: "stake_voting_token", logs: logs, sub: sub}, nil
}

// WatchStakeVotingToken is a free log subscription operation binding the contract event 0x5f9622392aaeb057345a56c5cd49c4625a50bda0f6ea6c3bc5d984eae20f42f9.
//
// Solidity: event stake_voting_token(address _user, uint256 _amount)
func (_Store *StoreFilterer) WatchStakeVotingToken(opts *bind.WatchOpts, sink chan<- *StoreStakeVotingToken) (event.Subscription, error) {

	logs, sub, err := _Store.contract.WatchLogs(opts, "stake_voting_token")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreStakeVotingToken)
				if err := _Store.contract.UnpackLog(event, "stake_voting_token", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakeVotingToken is a log parse operation binding the contract event 0x5f9622392aaeb057345a56c5cd49c4625a50bda0f6ea6c3bc5d984eae20f42f9.
//
// Solidity: event stake_voting_token(address _user, uint256 _amount)
func (_Store *StoreFilterer) ParseStakeVotingToken(log types.Log) (*StoreStakeVotingToken, error) {
	event := new(StoreStakeVotingToken)
	if err := _Store.contract.UnpackLog(event, "stake_voting_token", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StoreToBinaryIterator is returned from FilterToBinary and is used to iterate over the raw logs and unpacked data for ToBinary events raised by the Store contract.
type StoreToBinaryIterator struct {
	Event *StoreToBinary // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreToBinaryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreToBinary)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreToBinary)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreToBinaryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreToBinaryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreToBinary represents a ToBinary event raised by the Store contract.
type StoreToBinary struct {
	Arg0 common.Address
	Arg1 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterToBinary is a free log retrieval operation binding the contract event 0xd4313888366d81f9fad069c50b8646ac4c612db2da57cf73b34351126b75f5d2.
//
// Solidity: event to_binary(address arg0, uint256 arg1)
func (_Store *StoreFilterer) FilterToBinary(opts *bind.FilterOpts) (*StoreToBinaryIterator, error) {

	logs, sub, err := _Store.contract.FilterLogs(opts, "to_binary")
	if err != nil {
		return nil, err
	}
	return &StoreToBinaryIterator{contract: _Store.contract, event: "to_binary", logs: logs, sub: sub}, nil
}

// WatchToBinary is a free log subscription operation binding the contract event 0xd4313888366d81f9fad069c50b8646ac4c612db2da57cf73b34351126b75f5d2.
//
// Solidity: event to_binary(address arg0, uint256 arg1)
func (_Store *StoreFilterer) WatchToBinary(opts *bind.WatchOpts, sink chan<- *StoreToBinary) (event.Subscription, error) {

	logs, sub, err := _Store.contract.WatchLogs(opts, "to_binary")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreToBinary)
				if err := _Store.contract.UnpackLog(event, "to_binary", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseToBinary is a log parse operation binding the contract event 0xd4313888366d81f9fad069c50b8646ac4c612db2da57cf73b34351126b75f5d2.
//
// Solidity: event to_binary(address arg0, uint256 arg1)
func (_Store *StoreFilterer) ParseToBinary(log types.Log) (*StoreToBinary, error) {
	event := new(StoreToBinary)
	if err := _Store.contract.UnpackLog(event, "to_binary", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StoreUpdateConfigIterator is returned from FilterUpdateConfig and is used to iterate over the raw logs and unpacked data for UpdateConfig events raised by the Store contract.
type StoreUpdateConfigIterator struct {
	Event *StoreUpdateConfig // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreUpdateConfigIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreUpdateConfig)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreUpdateConfig)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreUpdateConfigIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreUpdateConfigIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreUpdateConfig represents a UpdateConfig event raised by the Store contract.
type StoreUpdateConfig struct {
	Owner            common.Address
	PlatformToken    common.Address
	Quorum           *big.Int
	Threshold        *big.Int
	VotingPeriod     *big.Int
	EffectiveDelay   *big.Int
	ExpirationPeriod *big.Int
	ProposalDeposit  *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterUpdateConfig is a free log retrieval operation binding the contract event 0x54f07a61a8c81594bc1ebd08a4b811f020ec28c7b4466f8d5e4d2640bf2ef223.
//
// Solidity: event update_config(address _owner, address _platform_token, uint256 _quorum, uint256 _threshold, uint256 _voting_period, uint256 _effective_delay, uint256 _expiration_period, uint256 _proposal_deposit)
func (_Store *StoreFilterer) FilterUpdateConfig(opts *bind.FilterOpts) (*StoreUpdateConfigIterator, error) {

	logs, sub, err := _Store.contract.FilterLogs(opts, "update_config")
	if err != nil {
		return nil, err
	}
	return &StoreUpdateConfigIterator{contract: _Store.contract, event: "update_config", logs: logs, sub: sub}, nil
}

// WatchUpdateConfig is a free log subscription operation binding the contract event 0x54f07a61a8c81594bc1ebd08a4b811f020ec28c7b4466f8d5e4d2640bf2ef223.
//
// Solidity: event update_config(address _owner, address _platform_token, uint256 _quorum, uint256 _threshold, uint256 _voting_period, uint256 _effective_delay, uint256 _expiration_period, uint256 _proposal_deposit)
func (_Store *StoreFilterer) WatchUpdateConfig(opts *bind.WatchOpts, sink chan<- *StoreUpdateConfig) (event.Subscription, error) {

	logs, sub, err := _Store.contract.WatchLogs(opts, "update_config")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreUpdateConfig)
				if err := _Store.contract.UnpackLog(event, "update_config", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateConfig is a log parse operation binding the contract event 0x54f07a61a8c81594bc1ebd08a4b811f020ec28c7b4466f8d5e4d2640bf2ef223.
//
// Solidity: event update_config(address _owner, address _platform_token, uint256 _quorum, uint256 _threshold, uint256 _voting_period, uint256 _effective_delay, uint256 _expiration_period, uint256 _proposal_deposit)
func (_Store *StoreFilterer) ParseUpdateConfig(log types.Log) (*StoreUpdateConfig, error) {
	event := new(StoreUpdateConfig)
	if err := _Store.contract.UnpackLog(event, "update_config", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StoreWithdrawVotingTokensIterator is returned from FilterWithdrawVotingTokens and is used to iterate over the raw logs and unpacked data for WithdrawVotingTokens events raised by the Store contract.
type StoreWithdrawVotingTokensIterator struct {
	Event *StoreWithdrawVotingTokens // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreWithdrawVotingTokensIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreWithdrawVotingTokens)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreWithdrawVotingTokens)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreWithdrawVotingTokensIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreWithdrawVotingTokensIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreWithdrawVotingTokens represents a WithdrawVotingTokens event raised by the Store contract.
type StoreWithdrawVotingTokens struct {
	User   common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdrawVotingTokens is a free log retrieval operation binding the contract event 0x95fe4b1cb121346dff97e22eb74c34027d0e73942b15d5e7b9c8a5c69d60d570.
//
// Solidity: event withdraw_voting_tokens(address _user, uint256 _amount)
func (_Store *StoreFilterer) FilterWithdrawVotingTokens(opts *bind.FilterOpts) (*StoreWithdrawVotingTokensIterator, error) {

	logs, sub, err := _Store.contract.FilterLogs(opts, "withdraw_voting_tokens")
	if err != nil {
		return nil, err
	}
	return &StoreWithdrawVotingTokensIterator{contract: _Store.contract, event: "withdraw_voting_tokens", logs: logs, sub: sub}, nil
}

// WatchWithdrawVotingTokens is a free log subscription operation binding the contract event 0x95fe4b1cb121346dff97e22eb74c34027d0e73942b15d5e7b9c8a5c69d60d570.
//
// Solidity: event withdraw_voting_tokens(address _user, uint256 _amount)
func (_Store *StoreFilterer) WatchWithdrawVotingTokens(opts *bind.WatchOpts, sink chan<- *StoreWithdrawVotingTokens) (event.Subscription, error) {

	logs, sub, err := _Store.contract.WatchLogs(opts, "withdraw_voting_tokens")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreWithdrawVotingTokens)
				if err := _Store.contract.UnpackLog(event, "withdraw_voting_tokens", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawVotingTokens is a log parse operation binding the contract event 0x95fe4b1cb121346dff97e22eb74c34027d0e73942b15d5e7b9c8a5c69d60d570.
//
// Solidity: event withdraw_voting_tokens(address _user, uint256 _amount)
func (_Store *StoreFilterer) ParseWithdrawVotingTokens(log types.Log) (*StoreWithdrawVotingTokens, error) {
	event := new(StoreWithdrawVotingTokens)
	if err := _Store.contract.UnpackLog(event, "withdraw_voting_tokens", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
