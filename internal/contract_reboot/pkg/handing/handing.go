// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package handing

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// HandingCard is an auto generated low-level Go binding around an user-defined struct.
type HandingCard struct {
	Types        *big.Int
	RandomNumber *big.Int
	SeriesId     *big.Int
	User         common.Address
	MixCard      []*big.Int
	Grade        *big.Int
	TokenId      *big.Int
	Cycle        *big.Int
}

// StoreMetaData contains all meta data concerning the Store contract.
var StoreMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cycle_card_log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"received_log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_series_id\",\"type\":\"uint256\"}],\"name\":\"record_draw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_mix_card\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_grade\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_series_id\",\"type\":\"uint256\"}],\"name\":\"record_mix\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reset_number\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CYCLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_AWARD_PLAYER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DRAW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RECEIVE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RECEIVE_QUERY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RECORD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECORD_NUMBER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"}],\"name\":\"award\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"random_number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"grade\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardList_arr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenId\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lens\",\"type\":\"uint256\"}],\"name\":\"queryCardListByValue\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"random_number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"mix_card\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"grade\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"}],\"internalType\":\"structHanding.Card[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"queryCardListLens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryNowReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"queryReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"queryUserRecieved\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_series_id\",\"type\":\"uint256\"}],\"name\":\"queryWaitFill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryWaitUserSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"received\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_box\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_mix\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_mix_grade_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_series_id\",\"type\":\"uint256\"}],\"name\":\"record\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max_draw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max_receive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max_player\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max_record\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max_record_number\",\"type\":\"uint256\"}],\"name\":\"resetNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recorder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_button\",\"type\":\"bool\"}],\"name\":\"reset_recorder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040526103e86001600050909055600a6002600050909055600a60036000509090556107d060046000509090556201518060056000509090556014600660005090905560146007600050909055600160086000509090556001600960006101000a81548160ff0219169083151502179055503480156100805760006000fd5b505b42600b6000506000016000508190909055505b61009a565b6146d680620000aa6000396000f3fe60806040523480156100115760006000fd5b506004361061015d5760003560e01c8063645c2c46116100c4578063c2ec396b1161007d578063c2ec396b146103e9578063c37220ea14610407578063ce43e08e14610438578063d9ef52d114610454578063d9f035aa14610472578063fa705453146104a85761015d565b8063645c2c4614610335578063672f65fd146103555780636b9c9da21461038557806383a6deb5146103a3578063866a09d7146103ad5780639e8d48d0146103cb5761015d565b806334ece5701161011657806334ece57014610239578063473e3718146102695780635734772f1461028757806357387528146102a357806359a4aacd146102d45780635f18c03c146103045761015d565b80630184e9521461016357806308b3f9f414610193578063150b7a02146101b157806316c60d82146101e1578063184b9559146101ff578063269499841461021b5761015d565b60006000fd5b61017d60048036038101906101789190613593565b6104c4565b60405161018a9190614093565b60405180910390f35b61019b610bd0565b6040516101a8919061428a565b60405180910390f35b6101cb60048036038101906101c691906133b9565b610bd9565b6040516101d891906140af565b60405180910390f35b6101e9610bf2565b6040516101f6919061428a565b60405180910390f35b61021960048036038101906102149190613367565b610c13565b005b610223610dbd565b604051610230919061428a565b60405180910390f35b610253600480360381019061024e9190613593565b610dc6565b604051610260919061428a565b60405180910390f35b610271610dee565b60405161027e919061428a565b60405180910390f35b6102a1600480360381019061029c9190613439565b610df7565b005b6102bd60048036038101906102b89190613478565b610ee8565b6040516102cb9291906142d0565b60405180910390f35b6102ee60048036038101906102e991906135e9565b610f6e565b6040516102fb919061403f565b60405180910390f35b61031e6004803603810190610319919061333c565b6111da565b60405161032c929190614062565b60405180910390f35b61033d61135a565b60405161034c939291906142fa565b60405180910390f35b61036f600480360381019061036a919061333c565b611400565b60405161037c919061428a565b60405180910390f35b61038d61145d565b60405161039a919061428a565b60405180910390f35b6103ab611466565b005b6103b561199c565b6040516103c2919061428a565b60405180910390f35b6103d36119a5565b6040516103e0919061428a565b60405180910390f35b6103f16119ae565b6040516103fe919061428a565b60405180910390f35b610421600480360381019061041c919061333c565b6119b7565b60405161042f9291906142a6565b60405180910390f35b610452600480360381019061044d9190613628565b611a7f565b005b61045c611ba3565b604051610469919061428a565b60405180910390f35b61048c60048036038101906104879190613593565b611bac565b60405161049f9796959493929190614332565b60405180910390f35b6104c260048036038101906104bd91906134b7565b611c23565b005b600061037882141561056657600060005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610561576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055890614227565b60405180910390fd5b6105d9565b600160005054600b600050600101600050541015806105975750600560005054600b60005060000160005054420310155b15156105d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cf90614161565b60405180910390fd5b5b6000600090506000600090506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630926e497600036336040518463ffffffff1660e01b8152600401610647939291906140cb565b602060405180830381600087803b1580156106625760006000fd5b505af1158015610677573d600060003e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069b91906135be565b90506000600090505b6106b96011600050611f5e909063ffffffff16565b811015610b445760006106d9826011600050611f7790919063ffffffff16565b90506000601060005060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005090506000600090505b8180549050811015610b17576000600f60005060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000506000848481548110151561078e57fe5b906000526020600020900160005b50548152602001908152602001600020600050905060008160000160005054111561086f576000816000016000505490506000600090506002600050548a830111156107f5578960026000505403915081506001905080505b61082482868681548110151561080757fe5b906000526020600020900160005b5054888b611fc763ffffffff16565b8183600001600050540383600001600050819090905550818a01995089506002600050548a101580156108545750805b1561086c5760009a5050505050505050505050610bcb565b50505b6000816002016000508054905011156109ea576000600090505b81600201600050805490508110156109e85761098d82600201600050828154811015156108b257fe5b906000526020600020900160005b5080548060200260200160405190810160405280929190818152602001828054801561090e57602002820191906000526020600020905b8160005054815260200190600101908083116108f7575b505050505086868681548110151561092257fe5b906000526020600020900160005b5054856003016000508581548110151561094657fe5b906000526020600020900160005b50548b86604051602001610969929190613e59565b6040516020818303038152906040528051906020012060001c61236e63ffffffff16565b6109a3826002016000508261266d63ffffffff16565b506109ba82600301600050826128bd63ffffffff16565b6001890198508850600260005054891015156109e25760009950505050505050505050610bcb565b5b610889565b505b600f60005060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060008484815481101515610a3f57fe5b906000526020600020900160005b50548152602001908152602001600020600060008201600050600090556001820160005060009055600282016000610a85919061305e565b600382016000610a959190613080565b5050610aa783836128bd63ffffffff16565b6000601060005060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050805490501415610b1057610b0f84601160005061299290919063ffffffff16565b5b505b61072b565b506001850194508450600360005054851115610b3c5760009650505050505050610bcb565b50505b6106a4565b507fb8ddec2a573c54805f4eda63b034770ea118dbf7d43265eb51e2757f83086a77600860005054604051610b79919061428a565b60405180910390a142600b6000506000016000508190909055506000600b6000506001016000508190909055506008600081815054809291906001019190509090555060019350505050610bcb565050505b919050565b60036000505481565b600063150b7a0260e01b9050610bea565b949350505050565b6000610c096011600050611f5e909063ffffffff16565b9050610c10565b90565b600960009054906101000a900460ff161515610c64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5b90614182565b60405180910390fd5b82600960016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600060005060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600060005060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600960006101000a81548160ff0219169083151502179055505b505050565b60056000505481565b600e60005081815481101515610dd857fe5b906000526020600020900160005b915090505481565b60046000505481565b600060005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610e88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7f90614269565b60405180910390fd5b80600060005060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b5b5050565b600060006000600f60005060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060008581526020019081526020016000206000509050806000016000505481600201600050805490509250925050610f6756505b9250929050565b606060006000610f88600e60005086612bd563ffffffff16565b91509150811515610fa15760608093505050506111d456505b60148411610faf5783610fb2565b60145b93508350600e60005080549050848201101515610fdc57806001600e600050805490500303935083505b60608467ffffffffffffffff81118015610ff65760006000fd5b5060405190808252806020026020018201604052801561103057816020015b61101d6130a2565b8152602001906001900390816110155790505b509050600060006001840190505b868401811115156111c357600d6000506000600e6000508381548110151561106257fe5b906000526020600020900160005b50548152602001908152602001600020600050604051806101000160405290816000820160005054815260200160018201600050548152602001600282016000505481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160005080548060200260200160405190810160405280929190818152602001828054801561116157602002820191906000526020600020905b81600050548152602001906001019080831161114a575b50505050508152602001600582016000505481526020016006820160005054815260200160078201600050548152602001505083838151811015156111a257fe5b602002602001018190525081806001019250505b808060010191505061103e565b50819450505050506111d456505050505b92915050565b606060006000601360005060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060000160005080549050905060006007600050548211611245578161124c565b6007600050545b905060608167ffffffffffffffff811180156112685760006000fd5b506040519080825280602002602001820160405280156112975781602001602082028036833780820191505090505b5090506000600090505b8281101561134357601360005060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060000160005081600186030381548110151561130657fe5b906000526020600020900160005b5054828281518110151561132457fe5b60200260200101909081815260200150505b80806001019150506112a1565b50808394509450505050611355565050505b915091565b6000600060006000600560005054600b60005060000160005054014210611382576000611398565b42600560005054600b6000506000016000505401035b90506000600082146113ab5760006113ae565b60015b90508015156113de57600160005054600b6000506001016000505410156113d65760006113d9565b60015b905080505b600b60005060010160005054828294509450945050506113fb5650505b909192565b6000601360005060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050600001600050805490509050611458565b919050565b60076000505481565b6000601360005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050600001600050805490501115156114f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f090614248565b60405180910390fd5b6000601360005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050600001600050805490509050600060066000505482116115605781611567565b6006600050545b90506000600090505b81811015611996576000601360005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000506000016000506001601360005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050600001600050805490500381548110151561162357fe5b906000526020600020900160005b5054905061163d6130a2565b600d6000506000838152602001908152602001600020600050604051806101000160405290816000820160005054815260200160018201600050548152602001600282016000505481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160005080548060200260200160405190810160405280929190818152602001828054801561173457602002820191906000526020600020905b81600050548152602001906001019080831161171d575b505050505081526020016005820160005054815260200160068201600050548152602001600782016000505481526020015050905060018160000151141561181857600960019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e223809a3383604001518460200151866040518563ffffffff1660e01b81526004016117df9493929190613f1e565b600060405180830381600087803b1580156117fa5760006000fd5b505af115801561180f573d600060003e3d6000fd5b505050506118ca565b6002816000015114156118c957600960019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635c4d06e33383604001518460a001518560200151876040518663ffffffff1660e01b8152600401611894959493929190613f64565b600060405180830381600087803b1580156118af5760006000fd5b505af11580156118c4573d600060003e3d6000fd5b505050505b5b601360005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050600001600050805480151561192057fe5b600190038181906000526020600020900160005b506000905590557fb2c43027fac36495538271603f897d278549ce5407fab2d01994a54f5682378c3383836000015160405161197293929190613ee6565b60405180910390a160018410151561198e578380600190039450505b50505b611570565b5050505b565b60066000505481565b60086000505481565b60016000505481565b6000600060006000601360005060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000506000016000508054905011611a1a576000611a1d565b60015b9050601360005060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060000160005080549050819250925050611a7a56505b915091565b600060005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515611b10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0790614269565b60405180910390fd5b8360066000508190909055508460056000508190909055508560016000508190909055508160026000508190909055508260036000508190909055508060046000508190909055507fb18159c9a645dd9e7cd9f068a9472bb2f2c281e6fe39931c65720430b7282272868686868686604051611b91969594939291906143a2565b60405180910390a15b5b505050505050565b60026000505481565b600d6000506020528060005260406000206000915090508060000160005054908060010160005054908060020160005054908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050160005054908060060160005054908060070160005054905087565b600060005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515611cb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cab90614269565b60405180910390fd5b611ccb866011600050612cbb90919063ffffffff16565b1515611ce957611ce8866011600050612d1690919063ffffffff16565b5b6000600f60005060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050600083815260200190815260200160002060005090506000861115611da157858160000160008282825054019250508190909055507f428ca455fcc35615bf73a74d6e6c6f8808e14ac5001ef6e5a23703b886f7974c878784604051611d9893929190614007565b60405180910390a15b600060009050600084118015611dba5750600086869050115b15611e8e57611e1682600201600050878780806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050612ea163ffffffff16565b8160030160005084908060018154018082558091505060019003906000526020600020900160005b909190919091509090556001905080507fae23064f66d65508a3e83912a8b1418734a4c84ee8eedb6f05f9b87df8127d0b8887878787604051611e85959493929190613fb8565b60405180910390a15b611ee2601060005060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005084612f2963ffffffff16565b808701600b6000506001016000828282505401925050819090905550600460005054600b60005060010160005054101515611f52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4990614140565b60405180910390fd5b50505b5b505050505050565b600081600101600050805490509050611f72565b919050565b60008260010160005082815481101515611f8d57fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050611fc1565b92915050565b6060600960019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f3c3fceb866040518263ffffffff1660e01b8152600401612024919061428a565b600060405180830381600087803b15801561203f5760006000fd5b505af1158015612054573d600060003e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061207d919061354f565b90506000600090505b815181101561236557601360005060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060000160005082828151811015156120e857fe5b6020026020010151908060018154018082558091505060019003906000526020600020900160005b9091909190915090905582868686858581518110151561212c57fe5b6020026020010151604051602001612148959493929190613e86565b6040516020818303038152906040528051906020012060001c600d6000506000848481518110151561217657fe5b6020026020010151815260200190815260200160002060005060010160005081909090555084600d600050600084848151811015156121b157fe5b6020026020010151815260200190815260200160002060005060020160005081909090555083600d600050600084848151811015156121ec57fe5b6020026020010151815260200190815260200160002060005060030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600d6000506000848481518110151561225d57fe5b60200260200101518152602001908152602001600020600050600001600050819090905550818181518110151561229057fe5b6020026020010151600d600050600084848151811015156122ad57fe5b60200260200101518152602001908152602001600020600050600601600050819090905550600860005054600d600050600084848151811015156122ed57fe5b60200260200101518152602001908152602001600020600050600701600050819090905550600e600050828281518110151561232557fe5b6020026020010151908060018154018082558091505060019003906000526020600020900160005b909190919091509090555b8080600101915050612086565b50505b50505050565b6000600960019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166358c61c026040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156123db5760006000fd5b505af11580156123f0573d600060003e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241491906135be565b9050601360005060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060000160005081908060018154018082558091505060019003906000526020600020900160005b90919091909150909055818585856040516020016124a39493929190613e0a565b6040516020818303038152906040528051906020012060001c600d600050600083815260200190815260200160002060005060010160005081909090555084600d600050600083815260200190815260200160002060005060030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600d600050600083815260200190815260200160002060005060050160005081909090555085600d60005060008381526020019081526020016000206000506004016000509080519060200190612595929190613100565b506002600d600050600083815260200190815260200160002060005060000160005081909090555083600d600050600083815260200190815260200160002060005060020160005081909090555080600d6000506000838152602001908152602001600020600050600601600050819090905550600860005054600d6000506000838152602001908152602001600020600050600701600050819090905550600e60005081908060018154018082558091505060019003906000526020600020900160005b90919091909150909055505b5050505050565b60608280549050821015156126b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126ae906141c4565b60405180910390fd5b82828154811015156126c557fe5b906000526020600020900160005b6126dd9190613080565b5b60018380549050038210156127e55782828154811015156126fb57fe5b906000526020600020900160005b6127139190613080565b6000600090505b836001840181548110151561272b57fe5b906000526020600020900160005b50805490508110156127d757838381548110151561275357fe5b906000526020600020900160005b50846001850181548110151561277357fe5b906000526020600020900160005b508281548110151561278f57fe5b906000526020600020900160005b5054908060018154018082558091505060019003906000526020600020900160005b909190919091509090555b808060010191505061271a565b5081806001019250506126de565b8280548015156127f157fe5b600190038181906000526020600020900160005b61280f9190613080565b905582805480602002602001604051908101604052809291908181526020016000905b828210156128ac578382906000526020600020900160005b5080548060200260200160405190810160405280929190818152602001828054801561289857602002820191906000526020600020905b816000505481526020019060010190808311612881575b505050505081526020019060010190612832565b5050505090506128b7565b92915050565b818054905081101515612905576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128fc906141e5565b60405180910390fd5b5b600182805490500381101561296657816001820181548110151561292657fe5b906000526020600020900160005b5054828281548110151561294457fe5b906000526020600020900160005b508190909055508080600101915050612906565b81805480151561297257fe5b600190038181906000526020600020900160005b506000905590555b5050565b6129a28282612cbb63ffffffff16565b15156129e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129da9061411f565b60405180910390fd5b600060018360000160005060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000505403905060006001846001016000508054905003905060008460010160005082815481101515612a5a57fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050808560010160005084815481101515612a9e57fe5b906000526020600020900160005b6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600183018560000160005060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000508190909055508460000160005060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060009055846001016000508054801515612b9657fe5b600190038181906000526020600020900160005b6101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555050505b5050565b60006000600084805490501415612bf6576000600080905091509150612cb4565b6000600090506000600186805490500390505b8082111515612ca0576000612c248383612f8063ffffffff16565b9050858782815481101515612c3557fe5b906000526020600020900160005b50541415612c5e5760018194509450505050612cb456612c9a565b858782815481101515612c6d57fe5b906000526020600020900160005b50541115612c90576001810391508150612c99565b60018101925082505b5b50612c09565b60006000809050935093505050612cb45650505b9250929050565b600060008360000160005060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000505414159050612d10565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612d88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d7f906141a3565b60405180910390fd5b612d988282612cbb63ffffffff16565b151515612dda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dd1906140fe565b60405180910390fd5b8160010160005081908060018154018082558091505060019003906000526020600020900160005b9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600101600050805490508260000160005060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000508190909055505b5050565b60008151111515612ee7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ede90614206565b60405180910390fd5b8181908060018154018082558091505060019003906000526020600020900160005b909190919091509080519060200190612f23929190613100565b505b5050565b60006000612f3d8484612fd263ffffffff16565b8093508192505050801515612f79578383908060018154018082558091505060019003906000526020600020900160005b909190919091509090555b50505b5050565b60006002600283811515612f9057fe5b06600285811515612f9d57fe5b0601811515612fa857fe5b04600283811515612fb557fe5b04600285811515612fc257fe5b0401019050612fcc565b92915050565b60006000600084805490501415612ff3576000600080905091509150613057565b6000600090505b84805490508110156130465783858281548110151561301557fe5b906000526020600020900160005b50541415613038576001819250925050613057565b5b8080600101915050612ffa565b506000600080905091509150613057565b9250929050565b508054600082559060005260206000209081019061307c9190613152565b5b50565b508054600082559060005260206000209081019061309e9190613182565b5b50565b604051806101000160405280600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000815260200160008152602001600081526020015090565b828054828255906000526020600020908101928215613141579160200282015b828111156131405782518260005090905591602001919060010190613120565b5b50905061314e9190613182565b5090565b61317f919061315c565b8082111561317b57600081816131729190613080565b5060010161315c565b5090565b90565b6131aa919061318c565b808211156131a6576000818150600090555060010161318c565b5090565b905661469f565b6000813590506131c08161464e565b5b92915050565b6000600083601f84011215156131dd5760006000fd5b8235905067ffffffffffffffff8111156131f75760006000fd5b6020830191508360208202830111156132105760006000fd5b5b9250929050565b600082601f830112151561322c5760006000fd5b815161323f61323a82614433565b614404565b915081818352602084019350602081019050838560208402820111156132655760006000fd5b60005b83811015613296578161327b8882613326565b8452602084019350602083019250505b600181019050613268565b505050505b92915050565b6000813590506132b081614669565b5b92915050565b600082601f83011215156132cb5760006000fd5b81356132de6132d98261445d565b614404565b915080825260208301602083018583830111156132fb5760006000fd5b6133068382846145ed565b5050505b92915050565b60008135905061331f81614684565b5b92915050565b60008151905061333581614684565b5b92915050565b60006020828403121561334f5760006000fd5b600061335d848285016131b1565b9150505b92915050565b6000600060006060848603121561337e5760006000fd5b600061338c868287016131b1565b935050602061339d868287016131b1565b92505060406133ae868287016131b1565b9150505b9250925092565b6000600060006000608085870312156133d25760006000fd5b60006133e0878288016131b1565b94505060206133f1878288016131b1565b935050604061340287828801613310565b925050606085013567ffffffffffffffff8111156134205760006000fd5b61342c878288016132b7565b9150505b92959194509250565b600060006040838503121561344e5760006000fd5b600061345c858286016131b1565b925050602061346d858286016132a1565b9150505b9250929050565b600060006040838503121561348d5760006000fd5b600061349b858286016131b1565b92505060206134ac85828601613310565b9150505b9250929050565b60006000600060006000600060a087890312156134d45760006000fd5b60006134e289828a016131b1565b96505060206134f389828a01613310565b955050604087013567ffffffffffffffff8111156135115760006000fd5b61351d89828a016131c7565b9450945050606061353089828a01613310565b925050608061354189828a01613310565b9150505b9295509295509295565b6000602082840312156135625760006000fd5b600082015167ffffffffffffffff81111561357d5760006000fd5b61358984828501613218565b9150505b92915050565b6000602082840312156135a65760006000fd5b60006135b484828501613310565b9150505b92915050565b6000602082840312156135d15760006000fd5b60006135df84828501613326565b9150505b92915050565b60006000604083850312156135fe5760006000fd5b600061360c85828601613310565b925050602061361d85828601613310565b9150505b9250929050565b60006000600060006000600060c087890312156136455760006000fd5b600061365389828a01613310565b965050602061366489828a01613310565b955050604061367589828a01613310565b945050606061368689828a01613310565b935050608061369789828a01613310565b92505060a06136a889828a01613310565b9150505b9295509295509295565b60006136c28383613d21565b90505b92915050565b60006136d78383613dd2565b6020830190505b92915050565b6136ed816145b4565b82525b5050565b6136fd8161453b565b82525b5050565b61370d8161453b565b82525b5050565b6137256137208261453b565b6145fd565b82525b5050565b6000613737826144ad565b61374181856144e1565b9350836020820285016137538561448b565b8060005b85811015613790578484038952815161377085826136b6565b945061377b836144c5565b925060208a019950505b600181019050613757565b5082975087955050505050505b92915050565b60006137af8385614505565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156137df5760006000fd5b6020830292506137f08385846145ed565b82840190505b9392505050565b6000613808826144b9565b61381281856144f3565b935061381d8361449c565b8060005b8381101561384f57815161383588826136cb565b9750613840836144d3565b9250505b600181019050613821565b508593505050505b92915050565b6000613868826144b9565b6138728185614505565b935061387d8361449c565b8060005b838110156138af57815161389588826136cb565b97506138a0836144d3565b9250505b600181019050613881565b508593505050505b92915050565b6138c68161454e565b82525b5050565b6138d68161455b565b82525b5050565b60006138e98385614517565b93506138f68385846145ed565b6138ff8361462e565b840190505b9392505050565b6000613918602f83614529565b91507f4c6962416464726573735365743a2076616c756520616c72656164792065786960008301527f73747320696e20746865207365742e000000000000000000000000000000000060208301526040820190505b919050565b600061397f602383614529565b91507f4c6962416464726573735365743a2076616c756520646f65736e27742065786960008301527f73742e000000000000000000000000000000000000000000000000000000000060208301526040820190505b919050565b60006139e6602d83614529565b91507f48616e64696e67204572723a206472617720636f756e7420726561636820746860008301527f65207570706572206c696d69740000000000000000000000000000000000000060208301526040820190505b919050565b6000613a4d602683614529565b91507f48616e64696e674f7574204572723a636f6e646974696f6e732077657265206e60008301527f6f74206d6574000000000000000000000000000000000000000000000000000060208301526040820190505b919050565b6000613ab4601983614529565b91507f4572723a6f6e6c79206265206d6f646966696564206f6e63650000000000000060008301526020820190505b919050565b6000613af5602183614529565b91507f4c6962416464726573735365743a2076616c75652063616e277420626520307860008301527f300000000000000000000000000000000000000000000000000000000000000060208301526040820190505b919050565b6000613b5c601a83614529565b91507f496e6465783a20696e646578206f7574206f6620626f756e647300000000000060008301526020820190505b919050565b6000613b9d602083614529565b91507f48616e64696e67204572723a20696e646578206f7574206f6620626f756e647360008301526020820190505b919050565b6000613bde602483614529565b91507f456d7074792041727261793a2063616e206e6f742061646420656d707479206160008301527f727261790000000000000000000000000000000000000000000000000000000060208301526040820190505b919050565b6000613c45601883614529565b91507f48616e64696e674f7574204572723a4e6f20616363657373000000000000000060008301526020820190505b919050565b6000613c86601583614529565b91507f48616e64696e67204572723a6e6f20726577617264000000000000000000000060008301526020820190505b919050565b6000613cc7602883614529565b91507f48616e64696e674f7574204572723a6e6f20726967687420746f206b6565702060008301527f6163636f756e747300000000000000000000000000000000000000000000000060208301526040820190505b919050565b600061010083016000830151613d3a6000860182613dd2565b506020830151613d4d6020860182613dd2565b506040830151613d606040860182613dd2565b506060830151613d7360608601826136f4565b5060808301518482036080860152613d8b82826137fd565b91505060a0830151613da060a0860182613dd2565b5060c0830151613db360c0860182613dd2565b5060e0830151613dc660e0860182613dd2565b50809150505b92915050565b613ddb816145a9565b82525b5050565b613deb816145a9565b82525b5050565b613e03613dfe826145a9565b614623565b82525b5050565b6000613e168287613df2565b602082019150613e268286613714565b601482019150613e368285613df2565b602082019150613e468284613df2565b6020820191508190505b95945050505050565b6000613e658285613df2565b602082019150613e758284613df2565b6020820191508190505b9392505050565b6000613e928288613df2565b602082019150613ea28287613df2565b602082019150613eb28286613df2565b602082019150613ec28285613714565b601482019150613ed28284613df2565b6020820191508190505b9695505050505050565b6000606082019050613efb60008301866136e4565b613f086020830185613de2565b613f156040830184613de2565b5b949350505050565b6000608082019050613f3360008301876136e4565b613f406020830186613de2565b613f4d6040830185613de2565b613f5a6060830184613de2565b5b95945050505050565b600060a082019050613f7960008301886136e4565b613f866020830187613de2565b613f936040830186613de2565b613fa06060830185613de2565b613fad6080830184613de2565b5b9695505050505050565b6000608082019050613fcd6000830188613704565b8181036020830152613fe08186886137a3565b9050613fef6040830185613de2565b613ffc6060830184613de2565b5b9695505050505050565b600060608201905061401c6000830186613704565b6140296020830185613de2565b6140366040830184613de2565b5b949350505050565b60006020820190508181036000830152614059818461372c565b90505b92915050565b6000604082019050818103600083015261407c818561385d565b905061408b6020830184613de2565b5b9392505050565b60006020820190506140a860008301846138bd565b5b92915050565b60006020820190506140c460008301846138cd565b5b92915050565b600060408201905081810360008301526140e68185876138dd565b90506140f560208301846136e4565b5b949350505050565b600060208201905081810360008301526141178161390b565b90505b919050565b6000602082019050818103600083015261413881613972565b90505b919050565b60006020820190508181036000830152614159816139d9565b90505b919050565b6000602082019050818103600083015261417a81613a40565b90505b919050565b6000602082019050818103600083015261419b81613aa7565b90505b919050565b600060208201905081810360008301526141bc81613ae8565b90505b919050565b600060208201905081810360008301526141dd81613b4f565b90505b919050565b600060208201905081810360008301526141fe81613b90565b90505b919050565b6000602082019050818103600083015261421f81613bd1565b90505b919050565b6000602082019050818103600083015261424081613c38565b90505b919050565b6000602082019050818103600083015261426181613c79565b90505b919050565b6000602082019050818103600083015261428281613cba565b90505b919050565b600060208201905061429f6000830184613de2565b5b92915050565b60006040820190506142bb6000830185613de2565b6142c860208301846138bd565b5b9392505050565b60006040820190506142e56000830185613de2565b6142f26020830184613de2565b5b9392505050565b600060608201905061430f6000830186613de2565b61431c6020830185613de2565b61432960408301846138bd565b5b949350505050565b600060e082019050614347600083018a613de2565b6143546020830189613de2565b6143616040830188613de2565b61436e6060830187613704565b61437b6080830186613de2565b61438860a0830185613de2565b61439560c0830184613de2565b5b98975050505050505050565b600060c0820190506143b76000830189613de2565b6143c46020830188613de2565b6143d16040830187613de2565b6143de6060830186613de2565b6143eb6080830185613de2565b6143f860a0830184613de2565b5b979650505050505050565b6000604051905081810181811067ffffffffffffffff821117156144285760006000fd5b80604052505b919050565b600067ffffffffffffffff82111561444b5760006000fd5b6020820290506020810190505b919050565b600067ffffffffffffffff8211156144755760006000fd5b601f19601f83011690506020810190505b919050565b60008190506020820190505b919050565b60008190506020820190505b919050565b6000815190505b919050565b6000815190505b919050565b60006020820190505b919050565b60006020820190505b919050565b60008282526020820190505b92915050565b60008282526020820190505b92915050565b60008282526020820190505b92915050565b60008282526020820190505b92915050565b60008282526020820190505b92915050565b600061454682614588565b90505b919050565b600081151590505b919050565b60007fffffffff00000000000000000000000000000000000000000000000000000000821690505b919050565b600073ffffffffffffffffffffffffffffffffffffffff821690505b919050565b60008190505b919050565b60006145bf826145c7565b90505b919050565b60006145d2826145da565b90505b919050565b60006145e582614588565b90505b919050565b828183376000838301525b505050565b600061460882614610565b90505b919050565b600061461b82614640565b90505b919050565b60008190505b919050565b6000601f19601f83011690505b919050565b60008160601b90505b919050565b6146578161453b565b811415156146655760006000fd5b5b50565b6146728161454e565b811415156146805760006000fd5b5b50565b61468d816145a9565b8114151561469b5760006000fd5b5b50565bfea2646970667358221220baf69df0eb25f1213305c0f0a85c9159b9ca50e1a10dd6d4e40d172ddb03e57564736f6c63430006050033",
}

// StoreABI is the input ABI used to generate the binding from.
// Deprecated: Use StoreMetaData.ABI instead.
var StoreABI = StoreMetaData.ABI

// StoreBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StoreMetaData.Bin instead.
var StoreBin = StoreMetaData.Bin

// DeployStore deploys a new Ethereum contract, binding an instance of Store to it.
func DeployStore(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Store, error) {
	parsed, err := StoreMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StoreBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Store{StoreCaller: StoreCaller{contract: contract}, StoreTransactor: StoreTransactor{contract: contract}, StoreFilterer: StoreFilterer{contract: contract}}, nil
}

// Store is an auto generated Go binding around an Ethereum contract.
type Store struct {
	StoreCaller     // Read-only binding to the contract
	StoreTransactor // Write-only binding to the contract
	StoreFilterer   // Log filterer for contract events
}

// StoreCaller is an auto generated read-only Go binding around an Ethereum contract.
type StoreCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoreTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StoreTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoreFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StoreFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoreSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StoreSession struct {
	Contract     *Store            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StoreCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StoreCallerSession struct {
	Contract *StoreCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// StoreTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StoreTransactorSession struct {
	Contract     *StoreTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StoreRaw is an auto generated low-level Go binding around an Ethereum contract.
type StoreRaw struct {
	Contract *Store // Generic contract binding to access the raw methods on
}

// StoreCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StoreCallerRaw struct {
	Contract *StoreCaller // Generic read-only contract binding to access the raw methods on
}

// StoreTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StoreTransactorRaw struct {
	Contract *StoreTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStore creates a new instance of Store, bound to a specific deployed contract.
func NewStore(address common.Address, backend bind.ContractBackend) (*Store, error) {
	contract, err := bindStore(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Store{StoreCaller: StoreCaller{contract: contract}, StoreTransactor: StoreTransactor{contract: contract}, StoreFilterer: StoreFilterer{contract: contract}}, nil
}

// NewStoreCaller creates a new read-only instance of Store, bound to a specific deployed contract.
func NewStoreCaller(address common.Address, caller bind.ContractCaller) (*StoreCaller, error) {
	contract, err := bindStore(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StoreCaller{contract: contract}, nil
}

// NewStoreTransactor creates a new write-only instance of Store, bound to a specific deployed contract.
func NewStoreTransactor(address common.Address, transactor bind.ContractTransactor) (*StoreTransactor, error) {
	contract, err := bindStore(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StoreTransactor{contract: contract}, nil
}

// NewStoreFilterer creates a new log filterer instance of Store, bound to a specific deployed contract.
func NewStoreFilterer(address common.Address, filterer bind.ContractFilterer) (*StoreFilterer, error) {
	contract, err := bindStore(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StoreFilterer{contract: contract}, nil
}

// bindStore binds a generic wrapper to an already deployed contract.
func bindStore(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StoreABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Store *StoreRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Store.Contract.StoreCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Store *StoreRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Store.Contract.StoreTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Store *StoreRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Store.Contract.StoreTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Store *StoreCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Store.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Store *StoreTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Store.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Store *StoreTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Store.Contract.contract.Transact(opts, method, params...)
}

// CYCLE is a free data retrieval call binding the contract method 0x9e8d48d0.
//
// Solidity: function CYCLE() view returns(uint256)
func (_Store *StoreCaller) CYCLE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "CYCLE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CYCLE is a free data retrieval call binding the contract method 0x9e8d48d0.
//
// Solidity: function CYCLE() view returns(uint256)
func (_Store *StoreSession) CYCLE() (*big.Int, error) {
	return _Store.Contract.CYCLE(&_Store.CallOpts)
}

// CYCLE is a free data retrieval call binding the contract method 0x9e8d48d0.
//
// Solidity: function CYCLE() view returns(uint256)
func (_Store *StoreCallerSession) CYCLE() (*big.Int, error) {
	return _Store.Contract.CYCLE(&_Store.CallOpts)
}

// MAXAWARDPLAYER is a free data retrieval call binding the contract method 0x08b3f9f4.
//
// Solidity: function MAX_AWARD_PLAYER() view returns(uint256)
func (_Store *StoreCaller) MAXAWARDPLAYER(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "MAX_AWARD_PLAYER")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXAWARDPLAYER is a free data retrieval call binding the contract method 0x08b3f9f4.
//
// Solidity: function MAX_AWARD_PLAYER() view returns(uint256)
func (_Store *StoreSession) MAXAWARDPLAYER() (*big.Int, error) {
	return _Store.Contract.MAXAWARDPLAYER(&_Store.CallOpts)
}

// MAXAWARDPLAYER is a free data retrieval call binding the contract method 0x08b3f9f4.
//
// Solidity: function MAX_AWARD_PLAYER() view returns(uint256)
func (_Store *StoreCallerSession) MAXAWARDPLAYER() (*big.Int, error) {
	return _Store.Contract.MAXAWARDPLAYER(&_Store.CallOpts)
}

// MAXDRAW is a free data retrieval call binding the contract method 0xc2ec396b.
//
// Solidity: function MAX_DRAW() view returns(uint256)
func (_Store *StoreCaller) MAXDRAW(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "MAX_DRAW")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXDRAW is a free data retrieval call binding the contract method 0xc2ec396b.
//
// Solidity: function MAX_DRAW() view returns(uint256)
func (_Store *StoreSession) MAXDRAW() (*big.Int, error) {
	return _Store.Contract.MAXDRAW(&_Store.CallOpts)
}

// MAXDRAW is a free data retrieval call binding the contract method 0xc2ec396b.
//
// Solidity: function MAX_DRAW() view returns(uint256)
func (_Store *StoreCallerSession) MAXDRAW() (*big.Int, error) {
	return _Store.Contract.MAXDRAW(&_Store.CallOpts)
}

// MAXRECEIVE is a free data retrieval call binding the contract method 0x866a09d7.
//
// Solidity: function MAX_RECEIVE() view returns(uint256)
func (_Store *StoreCaller) MAXRECEIVE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "MAX_RECEIVE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXRECEIVE is a free data retrieval call binding the contract method 0x866a09d7.
//
// Solidity: function MAX_RECEIVE() view returns(uint256)
func (_Store *StoreSession) MAXRECEIVE() (*big.Int, error) {
	return _Store.Contract.MAXRECEIVE(&_Store.CallOpts)
}

// MAXRECEIVE is a free data retrieval call binding the contract method 0x866a09d7.
//
// Solidity: function MAX_RECEIVE() view returns(uint256)
func (_Store *StoreCallerSession) MAXRECEIVE() (*big.Int, error) {
	return _Store.Contract.MAXRECEIVE(&_Store.CallOpts)
}

// MAXRECEIVEQUERY is a free data retrieval call binding the contract method 0x6b9c9da2.
//
// Solidity: function MAX_RECEIVE_QUERY() view returns(uint256)
func (_Store *StoreCaller) MAXRECEIVEQUERY(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "MAX_RECEIVE_QUERY")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXRECEIVEQUERY is a free data retrieval call binding the contract method 0x6b9c9da2.
//
// Solidity: function MAX_RECEIVE_QUERY() view returns(uint256)
func (_Store *StoreSession) MAXRECEIVEQUERY() (*big.Int, error) {
	return _Store.Contract.MAXRECEIVEQUERY(&_Store.CallOpts)
}

// MAXRECEIVEQUERY is a free data retrieval call binding the contract method 0x6b9c9da2.
//
// Solidity: function MAX_RECEIVE_QUERY() view returns(uint256)
func (_Store *StoreCallerSession) MAXRECEIVEQUERY() (*big.Int, error) {
	return _Store.Contract.MAXRECEIVEQUERY(&_Store.CallOpts)
}

// MAXRECORD is a free data retrieval call binding the contract method 0xd9ef52d1.
//
// Solidity: function MAX_RECORD() view returns(uint256)
func (_Store *StoreCaller) MAXRECORD(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "MAX_RECORD")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXRECORD is a free data retrieval call binding the contract method 0xd9ef52d1.
//
// Solidity: function MAX_RECORD() view returns(uint256)
func (_Store *StoreSession) MAXRECORD() (*big.Int, error) {
	return _Store.Contract.MAXRECORD(&_Store.CallOpts)
}

// MAXRECORD is a free data retrieval call binding the contract method 0xd9ef52d1.
//
// Solidity: function MAX_RECORD() view returns(uint256)
func (_Store *StoreCallerSession) MAXRECORD() (*big.Int, error) {
	return _Store.Contract.MAXRECORD(&_Store.CallOpts)
}

// MAXTIME is a free data retrieval call binding the contract method 0x26949984.
//
// Solidity: function MAX_TIME() view returns(uint256)
func (_Store *StoreCaller) MAXTIME(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "MAX_TIME")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXTIME is a free data retrieval call binding the contract method 0x26949984.
//
// Solidity: function MAX_TIME() view returns(uint256)
func (_Store *StoreSession) MAXTIME() (*big.Int, error) {
	return _Store.Contract.MAXTIME(&_Store.CallOpts)
}

// MAXTIME is a free data retrieval call binding the contract method 0x26949984.
//
// Solidity: function MAX_TIME() view returns(uint256)
func (_Store *StoreCallerSession) MAXTIME() (*big.Int, error) {
	return _Store.Contract.MAXTIME(&_Store.CallOpts)
}

// RECORDNUMBER is a free data retrieval call binding the contract method 0x473e3718.
//
// Solidity: function RECORD_NUMBER() view returns(uint256)
func (_Store *StoreCaller) RECORDNUMBER(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "RECORD_NUMBER")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RECORDNUMBER is a free data retrieval call binding the contract method 0x473e3718.
//
// Solidity: function RECORD_NUMBER() view returns(uint256)
func (_Store *StoreSession) RECORDNUMBER() (*big.Int, error) {
	return _Store.Contract.RECORDNUMBER(&_Store.CallOpts)
}

// RECORDNUMBER is a free data retrieval call binding the contract method 0x473e3718.
//
// Solidity: function RECORD_NUMBER() view returns(uint256)
func (_Store *StoreCallerSession) RECORDNUMBER() (*big.Int, error) {
	return _Store.Contract.RECORDNUMBER(&_Store.CallOpts)
}

// CardList is a free data retrieval call binding the contract method 0xd9f035aa.
//
// Solidity: function cardList(uint256 ) view returns(uint256 types, uint256 random_number, uint256 seriesId, address user, uint256 grade, uint256 tokenId, uint256 cycle)
func (_Store *StoreCaller) CardList(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Types        *big.Int
	RandomNumber *big.Int
	SeriesId     *big.Int
	User         common.Address
	Grade        *big.Int
	TokenId      *big.Int
	Cycle        *big.Int
}, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "cardList", arg0)

	outstruct := new(struct {
		Types        *big.Int
		RandomNumber *big.Int
		SeriesId     *big.Int
		User         common.Address
		Grade        *big.Int
		TokenId      *big.Int
		Cycle        *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Types = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.RandomNumber = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.SeriesId = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.User = *abi.ConvertType(out[3], new(common.Address)).(*common.Address)
	outstruct.Grade = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.TokenId = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.Cycle = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// CardList is a free data retrieval call binding the contract method 0xd9f035aa.
//
// Solidity: function cardList(uint256 ) view returns(uint256 types, uint256 random_number, uint256 seriesId, address user, uint256 grade, uint256 tokenId, uint256 cycle)
func (_Store *StoreSession) CardList(arg0 *big.Int) (struct {
	Types        *big.Int
	RandomNumber *big.Int
	SeriesId     *big.Int
	User         common.Address
	Grade        *big.Int
	TokenId      *big.Int
	Cycle        *big.Int
}, error) {
	return _Store.Contract.CardList(&_Store.CallOpts, arg0)
}

// CardList is a free data retrieval call binding the contract method 0xd9f035aa.
//
// Solidity: function cardList(uint256 ) view returns(uint256 types, uint256 random_number, uint256 seriesId, address user, uint256 grade, uint256 tokenId, uint256 cycle)
func (_Store *StoreCallerSession) CardList(arg0 *big.Int) (struct {
	Types        *big.Int
	RandomNumber *big.Int
	SeriesId     *big.Int
	User         common.Address
	Grade        *big.Int
	TokenId      *big.Int
	Cycle        *big.Int
}, error) {
	return _Store.Contract.CardList(&_Store.CallOpts, arg0)
}

// CardListArr is a free data retrieval call binding the contract method 0x34ece570.
//
// Solidity: function cardList_arr(uint256 ) view returns(uint256)
func (_Store *StoreCaller) CardListArr(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "cardList_arr", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CardListArr is a free data retrieval call binding the contract method 0x34ece570.
//
// Solidity: function cardList_arr(uint256 ) view returns(uint256)
func (_Store *StoreSession) CardListArr(arg0 *big.Int) (*big.Int, error) {
	return _Store.Contract.CardListArr(&_Store.CallOpts, arg0)
}

// CardListArr is a free data retrieval call binding the contract method 0x34ece570.
//
// Solidity: function cardList_arr(uint256 ) view returns(uint256)
func (_Store *StoreCallerSession) CardListArr(arg0 *big.Int) (*big.Int, error) {
	return _Store.Contract.CardListArr(&_Store.CallOpts, arg0)
}

// QueryCardListByValue is a free data retrieval call binding the contract method 0x59a4aacd.
//
// Solidity: function queryCardListByValue(uint256 _tokenId, uint256 lens) view returns((uint256,uint256,uint256,address,uint256[],uint256,uint256,uint256)[])
func (_Store *StoreCaller) QueryCardListByValue(opts *bind.CallOpts, _tokenId *big.Int, lens *big.Int) ([]HandingCard, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "queryCardListByValue", _tokenId, lens)

	if err != nil {
		return *new([]HandingCard), err
	}

	out0 := *abi.ConvertType(out[0], new([]HandingCard)).(*[]HandingCard)

	return out0, err

}

// QueryCardListByValue is a free data retrieval call binding the contract method 0x59a4aacd.
//
// Solidity: function queryCardListByValue(uint256 _tokenId, uint256 lens) view returns((uint256,uint256,uint256,address,uint256[],uint256,uint256,uint256)[])
func (_Store *StoreSession) QueryCardListByValue(_tokenId *big.Int, lens *big.Int) ([]HandingCard, error) {
	return _Store.Contract.QueryCardListByValue(&_Store.CallOpts, _tokenId, lens)
}

// QueryCardListByValue is a free data retrieval call binding the contract method 0x59a4aacd.
//
// Solidity: function queryCardListByValue(uint256 _tokenId, uint256 lens) view returns((uint256,uint256,uint256,address,uint256[],uint256,uint256,uint256)[])
func (_Store *StoreCallerSession) QueryCardListByValue(_tokenId *big.Int, lens *big.Int) ([]HandingCard, error) {
	return _Store.Contract.QueryCardListByValue(&_Store.CallOpts, _tokenId, lens)
}

// QueryCardListLens is a free data retrieval call binding the contract method 0x672f65fd.
//
// Solidity: function queryCardListLens(address _user) view returns(uint256)
func (_Store *StoreCaller) QueryCardListLens(opts *bind.CallOpts, _user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "queryCardListLens", _user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// QueryCardListLens is a free data retrieval call binding the contract method 0x672f65fd.
//
// Solidity: function queryCardListLens(address _user) view returns(uint256)
func (_Store *StoreSession) QueryCardListLens(_user common.Address) (*big.Int, error) {
	return _Store.Contract.QueryCardListLens(&_Store.CallOpts, _user)
}

// QueryCardListLens is a free data retrieval call binding the contract method 0x672f65fd.
//
// Solidity: function queryCardListLens(address _user) view returns(uint256)
func (_Store *StoreCallerSession) QueryCardListLens(_user common.Address) (*big.Int, error) {
	return _Store.Contract.QueryCardListLens(&_Store.CallOpts, _user)
}

// QueryNowReward is a free data retrieval call binding the contract method 0x645c2c46.
//
// Solidity: function queryNowReward() view returns(uint256, uint256, bool)
func (_Store *StoreCaller) QueryNowReward(opts *bind.CallOpts) (*big.Int, *big.Int, bool, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "queryNowReward")

	if err != nil {
		return *new(*big.Int), *new(*big.Int), *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(bool)).(*bool)

	return out0, out1, out2, err

}

// QueryNowReward is a free data retrieval call binding the contract method 0x645c2c46.
//
// Solidity: function queryNowReward() view returns(uint256, uint256, bool)
func (_Store *StoreSession) QueryNowReward() (*big.Int, *big.Int, bool, error) {
	return _Store.Contract.QueryNowReward(&_Store.CallOpts)
}

// QueryNowReward is a free data retrieval call binding the contract method 0x645c2c46.
//
// Solidity: function queryNowReward() view returns(uint256, uint256, bool)
func (_Store *StoreCallerSession) QueryNowReward() (*big.Int, *big.Int, bool, error) {
	return _Store.Contract.QueryNowReward(&_Store.CallOpts)
}

// QueryReward is a free data retrieval call binding the contract method 0xc37220ea.
//
// Solidity: function queryReward(address _user) view returns(uint256, bool)
func (_Store *StoreCaller) QueryReward(opts *bind.CallOpts, _user common.Address) (*big.Int, bool, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "queryReward", _user)

	if err != nil {
		return *new(*big.Int), *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(bool)).(*bool)

	return out0, out1, err

}

// QueryReward is a free data retrieval call binding the contract method 0xc37220ea.
//
// Solidity: function queryReward(address _user) view returns(uint256, bool)
func (_Store *StoreSession) QueryReward(_user common.Address) (*big.Int, bool, error) {
	return _Store.Contract.QueryReward(&_Store.CallOpts, _user)
}

// QueryReward is a free data retrieval call binding the contract method 0xc37220ea.
//
// Solidity: function queryReward(address _user) view returns(uint256, bool)
func (_Store *StoreCallerSession) QueryReward(_user common.Address) (*big.Int, bool, error) {
	return _Store.Contract.QueryReward(&_Store.CallOpts, _user)
}

// QueryUserRecieved is a free data retrieval call binding the contract method 0x5f18c03c.
//
// Solidity: function queryUserRecieved(address _user) view returns(uint256[], uint256)
func (_Store *StoreCaller) QueryUserRecieved(opts *bind.CallOpts, _user common.Address) ([]*big.Int, *big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "queryUserRecieved", _user)

	if err != nil {
		return *new([]*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// QueryUserRecieved is a free data retrieval call binding the contract method 0x5f18c03c.
//
// Solidity: function queryUserRecieved(address _user) view returns(uint256[], uint256)
func (_Store *StoreSession) QueryUserRecieved(_user common.Address) ([]*big.Int, *big.Int, error) {
	return _Store.Contract.QueryUserRecieved(&_Store.CallOpts, _user)
}

// QueryUserRecieved is a free data retrieval call binding the contract method 0x5f18c03c.
//
// Solidity: function queryUserRecieved(address _user) view returns(uint256[], uint256)
func (_Store *StoreCallerSession) QueryUserRecieved(_user common.Address) ([]*big.Int, *big.Int, error) {
	return _Store.Contract.QueryUserRecieved(&_Store.CallOpts, _user)
}

// QueryWaitFill is a free data retrieval call binding the contract method 0x57387528.
//
// Solidity: function queryWaitFill(address _user, uint256 _series_id) view returns(uint256, uint256)
func (_Store *StoreCaller) QueryWaitFill(opts *bind.CallOpts, _user common.Address, _series_id *big.Int) (*big.Int, *big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "queryWaitFill", _user, _series_id)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// QueryWaitFill is a free data retrieval call binding the contract method 0x57387528.
//
// Solidity: function queryWaitFill(address _user, uint256 _series_id) view returns(uint256, uint256)
func (_Store *StoreSession) QueryWaitFill(_user common.Address, _series_id *big.Int) (*big.Int, *big.Int, error) {
	return _Store.Contract.QueryWaitFill(&_Store.CallOpts, _user, _series_id)
}

// QueryWaitFill is a free data retrieval call binding the contract method 0x57387528.
//
// Solidity: function queryWaitFill(address _user, uint256 _series_id) view returns(uint256, uint256)
func (_Store *StoreCallerSession) QueryWaitFill(_user common.Address, _series_id *big.Int) (*big.Int, *big.Int, error) {
	return _Store.Contract.QueryWaitFill(&_Store.CallOpts, _user, _series_id)
}

// QueryWaitUserSize is a free data retrieval call binding the contract method 0x16c60d82.
//
// Solidity: function queryWaitUserSize() view returns(uint256)
func (_Store *StoreCaller) QueryWaitUserSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "queryWaitUserSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// QueryWaitUserSize is a free data retrieval call binding the contract method 0x16c60d82.
//
// Solidity: function queryWaitUserSize() view returns(uint256)
func (_Store *StoreSession) QueryWaitUserSize() (*big.Int, error) {
	return _Store.Contract.QueryWaitUserSize(&_Store.CallOpts)
}

// QueryWaitUserSize is a free data retrieval call binding the contract method 0x16c60d82.
//
// Solidity: function queryWaitUserSize() view returns(uint256)
func (_Store *StoreCallerSession) QueryWaitUserSize() (*big.Int, error) {
	return _Store.Contract.QueryWaitUserSize(&_Store.CallOpts)
}

// Award is a paid mutator transaction binding the contract method 0x0184e952.
//
// Solidity: function award(uint256 types) returns(bool)
func (_Store *StoreTransactor) Award(opts *bind.TransactOpts, types *big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "award", types)
}

// Award is a paid mutator transaction binding the contract method 0x0184e952.
//
// Solidity: function award(uint256 types) returns(bool)
func (_Store *StoreSession) Award(types *big.Int) (*types.Transaction, error) {
	return _Store.Contract.Award(&_Store.TransactOpts, types)
}

// Award is a paid mutator transaction binding the contract method 0x0184e952.
//
// Solidity: function award(uint256 types) returns(bool)
func (_Store *StoreTransactorSession) Award(types *big.Int) (*types.Transaction, error) {
	return _Store.Contract.Award(&_Store.TransactOpts, types)
}

// Init is a paid mutator transaction binding the contract method 0x184b9559.
//
// Solidity: function init(address _nft, address _owner, address _tokenId) returns()
func (_Store *StoreTransactor) Init(opts *bind.TransactOpts, _nft common.Address, _owner common.Address, _tokenId common.Address) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "init", _nft, _owner, _tokenId)
}

// Init is a paid mutator transaction binding the contract method 0x184b9559.
//
// Solidity: function init(address _nft, address _owner, address _tokenId) returns()
func (_Store *StoreSession) Init(_nft common.Address, _owner common.Address, _tokenId common.Address) (*types.Transaction, error) {
	return _Store.Contract.Init(&_Store.TransactOpts, _nft, _owner, _tokenId)
}

// Init is a paid mutator transaction binding the contract method 0x184b9559.
//
// Solidity: function init(address _nft, address _owner, address _tokenId) returns()
func (_Store *StoreTransactorSession) Init(_nft common.Address, _owner common.Address, _tokenId common.Address) (*types.Transaction, error) {
	return _Store.Contract.Init(&_Store.TransactOpts, _nft, _owner, _tokenId)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) returns(bytes4)
func (_Store *StoreTransactor) OnERC721Received(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "onERC721Received", arg0, arg1, arg2, arg3)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) returns(bytes4)
func (_Store *StoreSession) OnERC721Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _Store.Contract.OnERC721Received(&_Store.TransactOpts, arg0, arg1, arg2, arg3)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) returns(bytes4)
func (_Store *StoreTransactorSession) OnERC721Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _Store.Contract.OnERC721Received(&_Store.TransactOpts, arg0, arg1, arg2, arg3)
}

// Received is a paid mutator transaction binding the contract method 0x83a6deb5.
//
// Solidity: function received() returns()
func (_Store *StoreTransactor) Received(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "received")
}

// Received is a paid mutator transaction binding the contract method 0x83a6deb5.
//
// Solidity: function received() returns()
func (_Store *StoreSession) Received() (*types.Transaction, error) {
	return _Store.Contract.Received(&_Store.TransactOpts)
}

// Received is a paid mutator transaction binding the contract method 0x83a6deb5.
//
// Solidity: function received() returns()
func (_Store *StoreTransactorSession) Received() (*types.Transaction, error) {
	return _Store.Contract.Received(&_Store.TransactOpts)
}

// Record is a paid mutator transaction binding the contract method 0xfa705453.
//
// Solidity: function record(address _user, uint256 _box, uint256[] _mix, uint256 _mix_grade_id, uint256 _series_id) returns()
func (_Store *StoreTransactor) Record(opts *bind.TransactOpts, _user common.Address, _box *big.Int, _mix []*big.Int, _mix_grade_id *big.Int, _series_id *big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "record", _user, _box, _mix, _mix_grade_id, _series_id)
}

// Record is a paid mutator transaction binding the contract method 0xfa705453.
//
// Solidity: function record(address _user, uint256 _box, uint256[] _mix, uint256 _mix_grade_id, uint256 _series_id) returns()
func (_Store *StoreSession) Record(_user common.Address, _box *big.Int, _mix []*big.Int, _mix_grade_id *big.Int, _series_id *big.Int) (*types.Transaction, error) {
	return _Store.Contract.Record(&_Store.TransactOpts, _user, _box, _mix, _mix_grade_id, _series_id)
}

// Record is a paid mutator transaction binding the contract method 0xfa705453.
//
// Solidity: function record(address _user, uint256 _box, uint256[] _mix, uint256 _mix_grade_id, uint256 _series_id) returns()
func (_Store *StoreTransactorSession) Record(_user common.Address, _box *big.Int, _mix []*big.Int, _mix_grade_id *big.Int, _series_id *big.Int) (*types.Transaction, error) {
	return _Store.Contract.Record(&_Store.TransactOpts, _user, _box, _mix, _mix_grade_id, _series_id)
}

// ResetNumber is a paid mutator transaction binding the contract method 0xce43e08e.
//
// Solidity: function resetNumber(uint256 max_draw, uint256 max_time, uint256 max_receive, uint256 max_player, uint256 max_record, uint256 max_record_number) returns()
func (_Store *StoreTransactor) ResetNumber(opts *bind.TransactOpts, max_draw *big.Int, max_time *big.Int, max_receive *big.Int, max_player *big.Int, max_record *big.Int, max_record_number *big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "resetNumber", max_draw, max_time, max_receive, max_player, max_record, max_record_number)
}

// ResetNumber is a paid mutator transaction binding the contract method 0xce43e08e.
//
// Solidity: function resetNumber(uint256 max_draw, uint256 max_time, uint256 max_receive, uint256 max_player, uint256 max_record, uint256 max_record_number) returns()
func (_Store *StoreSession) ResetNumber(max_draw *big.Int, max_time *big.Int, max_receive *big.Int, max_player *big.Int, max_record *big.Int, max_record_number *big.Int) (*types.Transaction, error) {
	return _Store.Contract.ResetNumber(&_Store.TransactOpts, max_draw, max_time, max_receive, max_player, max_record, max_record_number)
}

// ResetNumber is a paid mutator transaction binding the contract method 0xce43e08e.
//
// Solidity: function resetNumber(uint256 max_draw, uint256 max_time, uint256 max_receive, uint256 max_player, uint256 max_record, uint256 max_record_number) returns()
func (_Store *StoreTransactorSession) ResetNumber(max_draw *big.Int, max_time *big.Int, max_receive *big.Int, max_player *big.Int, max_record *big.Int, max_record_number *big.Int) (*types.Transaction, error) {
	return _Store.Contract.ResetNumber(&_Store.TransactOpts, max_draw, max_time, max_receive, max_player, max_record, max_record_number)
}

// ResetRecorder is a paid mutator transaction binding the contract method 0x5734772f.
//
// Solidity: function reset_recorder(address _recorder, bool _button) returns()
func (_Store *StoreTransactor) ResetRecorder(opts *bind.TransactOpts, _recorder common.Address, _button bool) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "reset_recorder", _recorder, _button)
}

// ResetRecorder is a paid mutator transaction binding the contract method 0x5734772f.
//
// Solidity: function reset_recorder(address _recorder, bool _button) returns()
func (_Store *StoreSession) ResetRecorder(_recorder common.Address, _button bool) (*types.Transaction, error) {
	return _Store.Contract.ResetRecorder(&_Store.TransactOpts, _recorder, _button)
}

// ResetRecorder is a paid mutator transaction binding the contract method 0x5734772f.
//
// Solidity: function reset_recorder(address _recorder, bool _button) returns()
func (_Store *StoreTransactorSession) ResetRecorder(_recorder common.Address, _button bool) (*types.Transaction, error) {
	return _Store.Contract.ResetRecorder(&_Store.TransactOpts, _recorder, _button)
}

// StoreCycleCardLogIterator is returned from FilterCycleCardLog and is used to iterate over the raw logs and unpacked data for CycleCardLog events raised by the Store contract.
type StoreCycleCardLogIterator struct {
	Event *StoreCycleCardLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreCycleCardLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreCycleCardLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreCycleCardLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreCycleCardLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreCycleCardLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreCycleCardLog represents a CycleCardLog event raised by the Store contract.
type StoreCycleCardLog struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterCycleCardLog is a free log retrieval operation binding the contract event 0xb8ddec2a573c54805f4eda63b034770ea118dbf7d43265eb51e2757f83086a77.
//
// Solidity: event cycle_card_log(uint256 arg0)
func (_Store *StoreFilterer) FilterCycleCardLog(opts *bind.FilterOpts) (*StoreCycleCardLogIterator, error) {

	logs, sub, err := _Store.contract.FilterLogs(opts, "cycle_card_log")
	if err != nil {
		return nil, err
	}
	return &StoreCycleCardLogIterator{contract: _Store.contract, event: "cycle_card_log", logs: logs, sub: sub}, nil
}

// WatchCycleCardLog is a free log subscription operation binding the contract event 0xb8ddec2a573c54805f4eda63b034770ea118dbf7d43265eb51e2757f83086a77.
//
// Solidity: event cycle_card_log(uint256 arg0)
func (_Store *StoreFilterer) WatchCycleCardLog(opts *bind.WatchOpts, sink chan<- *StoreCycleCardLog) (event.Subscription, error) {

	logs, sub, err := _Store.contract.WatchLogs(opts, "cycle_card_log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreCycleCardLog)
				if err := _Store.contract.UnpackLog(event, "cycle_card_log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCycleCardLog is a log parse operation binding the contract event 0xb8ddec2a573c54805f4eda63b034770ea118dbf7d43265eb51e2757f83086a77.
//
// Solidity: event cycle_card_log(uint256 arg0)
func (_Store *StoreFilterer) ParseCycleCardLog(log types.Log) (*StoreCycleCardLog, error) {
	event := new(StoreCycleCardLog)
	if err := _Store.contract.UnpackLog(event, "cycle_card_log", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StoreReceivedLogIterator is returned from FilterReceivedLog and is used to iterate over the raw logs and unpacked data for ReceivedLog events raised by the Store contract.
type StoreReceivedLogIterator struct {
	Event *StoreReceivedLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreReceivedLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreReceivedLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreReceivedLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreReceivedLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreReceivedLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreReceivedLog represents a ReceivedLog event raised by the Store contract.
type StoreReceivedLog struct {
	Arg0 common.Address
	Arg1 *big.Int
	Arg2 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterReceivedLog is a free log retrieval operation binding the contract event 0xb2c43027fac36495538271603f897d278549ce5407fab2d01994a54f5682378c.
//
// Solidity: event received_log(address arg0, uint256 arg1, uint256 arg2)
func (_Store *StoreFilterer) FilterReceivedLog(opts *bind.FilterOpts) (*StoreReceivedLogIterator, error) {

	logs, sub, err := _Store.contract.FilterLogs(opts, "received_log")
	if err != nil {
		return nil, err
	}
	return &StoreReceivedLogIterator{contract: _Store.contract, event: "received_log", logs: logs, sub: sub}, nil
}

// WatchReceivedLog is a free log subscription operation binding the contract event 0xb2c43027fac36495538271603f897d278549ce5407fab2d01994a54f5682378c.
//
// Solidity: event received_log(address arg0, uint256 arg1, uint256 arg2)
func (_Store *StoreFilterer) WatchReceivedLog(opts *bind.WatchOpts, sink chan<- *StoreReceivedLog) (event.Subscription, error) {

	logs, sub, err := _Store.contract.WatchLogs(opts, "received_log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreReceivedLog)
				if err := _Store.contract.UnpackLog(event, "received_log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReceivedLog is a log parse operation binding the contract event 0xb2c43027fac36495538271603f897d278549ce5407fab2d01994a54f5682378c.
//
// Solidity: event received_log(address arg0, uint256 arg1, uint256 arg2)
func (_Store *StoreFilterer) ParseReceivedLog(log types.Log) (*StoreReceivedLog, error) {
	event := new(StoreReceivedLog)
	if err := _Store.contract.UnpackLog(event, "received_log", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StoreRecordDrawIterator is returned from FilterRecordDraw and is used to iterate over the raw logs and unpacked data for RecordDraw events raised by the Store contract.
type StoreRecordDrawIterator struct {
	Event *StoreRecordDraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreRecordDrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreRecordDraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreRecordDraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreRecordDrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreRecordDrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreRecordDraw represents a RecordDraw event raised by the Store contract.
type StoreRecordDraw struct {
	User     common.Address
	Number   *big.Int
	SeriesId *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterRecordDraw is a free log retrieval operation binding the contract event 0x428ca455fcc35615bf73a74d6e6c6f8808e14ac5001ef6e5a23703b886f7974c.
//
// Solidity: event record_draw(address user, uint256 number, uint256 _series_id)
func (_Store *StoreFilterer) FilterRecordDraw(opts *bind.FilterOpts) (*StoreRecordDrawIterator, error) {

	logs, sub, err := _Store.contract.FilterLogs(opts, "record_draw")
	if err != nil {
		return nil, err
	}
	return &StoreRecordDrawIterator{contract: _Store.contract, event: "record_draw", logs: logs, sub: sub}, nil
}

// WatchRecordDraw is a free log subscription operation binding the contract event 0x428ca455fcc35615bf73a74d6e6c6f8808e14ac5001ef6e5a23703b886f7974c.
//
// Solidity: event record_draw(address user, uint256 number, uint256 _series_id)
func (_Store *StoreFilterer) WatchRecordDraw(opts *bind.WatchOpts, sink chan<- *StoreRecordDraw) (event.Subscription, error) {

	logs, sub, err := _Store.contract.WatchLogs(opts, "record_draw")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreRecordDraw)
				if err := _Store.contract.UnpackLog(event, "record_draw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRecordDraw is a log parse operation binding the contract event 0x428ca455fcc35615bf73a74d6e6c6f8808e14ac5001ef6e5a23703b886f7974c.
//
// Solidity: event record_draw(address user, uint256 number, uint256 _series_id)
func (_Store *StoreFilterer) ParseRecordDraw(log types.Log) (*StoreRecordDraw, error) {
	event := new(StoreRecordDraw)
	if err := _Store.contract.UnpackLog(event, "record_draw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StoreRecordMixIterator is returned from FilterRecordMix and is used to iterate over the raw logs and unpacked data for RecordMix events raised by the Store contract.
type StoreRecordMixIterator struct {
	Event *StoreRecordMix // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreRecordMixIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreRecordMix)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreRecordMix)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreRecordMixIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreRecordMixIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreRecordMix represents a RecordMix event raised by the Store contract.
type StoreRecordMix struct {
	User     common.Address
	MixCard  []*big.Int
	Grade    *big.Int
	SeriesId *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterRecordMix is a free log retrieval operation binding the contract event 0xae23064f66d65508a3e83912a8b1418734a4c84ee8eedb6f05f9b87df8127d0b.
//
// Solidity: event record_mix(address user, uint256[] _mix_card, uint256 _grade, uint256 _series_id)
func (_Store *StoreFilterer) FilterRecordMix(opts *bind.FilterOpts) (*StoreRecordMixIterator, error) {

	logs, sub, err := _Store.contract.FilterLogs(opts, "record_mix")
	if err != nil {
		return nil, err
	}
	return &StoreRecordMixIterator{contract: _Store.contract, event: "record_mix", logs: logs, sub: sub}, nil
}

// WatchRecordMix is a free log subscription operation binding the contract event 0xae23064f66d65508a3e83912a8b1418734a4c84ee8eedb6f05f9b87df8127d0b.
//
// Solidity: event record_mix(address user, uint256[] _mix_card, uint256 _grade, uint256 _series_id)
func (_Store *StoreFilterer) WatchRecordMix(opts *bind.WatchOpts, sink chan<- *StoreRecordMix) (event.Subscription, error) {

	logs, sub, err := _Store.contract.WatchLogs(opts, "record_mix")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreRecordMix)
				if err := _Store.contract.UnpackLog(event, "record_mix", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRecordMix is a log parse operation binding the contract event 0xae23064f66d65508a3e83912a8b1418734a4c84ee8eedb6f05f9b87df8127d0b.
//
// Solidity: event record_mix(address user, uint256[] _mix_card, uint256 _grade, uint256 _series_id)
func (_Store *StoreFilterer) ParseRecordMix(log types.Log) (*StoreRecordMix, error) {
	event := new(StoreRecordMix)
	if err := _Store.contract.UnpackLog(event, "record_mix", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StoreResetNumberIterator is returned from FilterResetNumber and is used to iterate over the raw logs and unpacked data for ResetNumber events raised by the Store contract.
type StoreResetNumberIterator struct {
	Event *StoreResetNumber // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreResetNumberIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreResetNumber)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreResetNumber)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreResetNumberIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreResetNumberIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreResetNumber represents a ResetNumber event raised by the Store contract.
type StoreResetNumber struct {
	Arg0 *big.Int
	Arg1 *big.Int
	Arg2 *big.Int
	Arg3 *big.Int
	Arg4 *big.Int
	Arg5 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterResetNumber is a free log retrieval operation binding the contract event 0xb18159c9a645dd9e7cd9f068a9472bb2f2c281e6fe39931c65720430b7282272.
//
// Solidity: event reset_number(uint256 arg0, uint256 arg1, uint256 arg2, uint256 arg3, uint256 arg4, uint256 arg5)
func (_Store *StoreFilterer) FilterResetNumber(opts *bind.FilterOpts) (*StoreResetNumberIterator, error) {

	logs, sub, err := _Store.contract.FilterLogs(opts, "reset_number")
	if err != nil {
		return nil, err
	}
	return &StoreResetNumberIterator{contract: _Store.contract, event: "reset_number", logs: logs, sub: sub}, nil
}

// WatchResetNumber is a free log subscription operation binding the contract event 0xb18159c9a645dd9e7cd9f068a9472bb2f2c281e6fe39931c65720430b7282272.
//
// Solidity: event reset_number(uint256 arg0, uint256 arg1, uint256 arg2, uint256 arg3, uint256 arg4, uint256 arg5)
func (_Store *StoreFilterer) WatchResetNumber(opts *bind.WatchOpts, sink chan<- *StoreResetNumber) (event.Subscription, error) {

	logs, sub, err := _Store.contract.WatchLogs(opts, "reset_number")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreResetNumber)
				if err := _Store.contract.UnpackLog(event, "reset_number", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseResetNumber is a log parse operation binding the contract event 0xb18159c9a645dd9e7cd9f068a9472bb2f2c281e6fe39931c65720430b7282272.
//
// Solidity: event reset_number(uint256 arg0, uint256 arg1, uint256 arg2, uint256 arg3, uint256 arg4, uint256 arg5)
func (_Store *StoreFilterer) ParseResetNumber(log types.Log) (*StoreResetNumber, error) {
	event := new(StoreResetNumber)
	if err := _Store.contract.UnpackLog(event, "reset_number", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
