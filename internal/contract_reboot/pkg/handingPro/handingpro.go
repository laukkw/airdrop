// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package handingPro

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StoreMetaData contains all meta data concerning the Store contract.
var StoreMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"linkToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_series_id\",\"type\":\"uint256\"}],\"name\":\"drawLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_series_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_grade\",\"type\":\"uint256\"}],\"name\":\"mixLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"receivedLog\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CYCLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DRAW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RNG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_box\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_series_id\",\"type\":\"uint256\"}],\"name\":\"XATEST\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"award\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardListDraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardListMix\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"grade\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clrng\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"linkToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countDown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cycle_rng\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"draw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"last_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"draw_count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRandomNumber\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"types\",\"type\":\"uint256[]\"}],\"name\":\"received\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_box\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_series_id\",\"type\":\"uint256\"}],\"name\":\"record_draw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mix_grade_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_series_id\",\"type\":\"uint256\"}],\"name\":\"record_mix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recorder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_draw_wait\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_draw_number\",\"type\":\"uint256\"}],\"name\":\"resetLotteryLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recorder\",\"type\":\"address\"}],\"name\":\"resetRecorder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// StoreABI is the input ABI used to generate the binding from.
// Deprecated: Use StoreMetaData.ABI instead.
var StoreABI = StoreMetaData.ABI

// StoreBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StoreMetaData.Bin instead.
var StoreBin = StoreMetaData.Bin

// DeployStore deploys a new Ethereum contract, binding an instance of Store to it.
func DeployStore(auth *bind.TransactOpts, backend bind.ContractBackend, keyHash [32]byte, fee *big.Int, vrfCoordinator common.Address, linkToken common.Address) (common.Address, *types.Transaction, *Store, error) {
	parsed, err := StoreMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StoreBin), backend, keyHash, fee, vrfCoordinator, linkToken)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Store{StoreCaller: StoreCaller{contract: contract}, StoreTransactor: StoreTransactor{contract: contract}, StoreFilterer: StoreFilterer{contract: contract}}, nil
}

// Store is an auto generated Go binding around an Ethereum contract.
type Store struct {
	StoreCaller     // Read-only binding to the contract
	StoreTransactor // Write-only binding to the contract
	StoreFilterer   // Log filterer for contract events
}

// StoreCaller is an auto generated read-only Go binding around an Ethereum contract.
type StoreCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoreTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StoreTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoreFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StoreFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoreSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StoreSession struct {
	Contract     *Store            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StoreCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StoreCallerSession struct {
	Contract *StoreCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// StoreTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StoreTransactorSession struct {
	Contract     *StoreTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StoreRaw is an auto generated low-level Go binding around an Ethereum contract.
type StoreRaw struct {
	Contract *Store // Generic contract binding to access the raw methods on
}

// StoreCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StoreCallerRaw struct {
	Contract *StoreCaller // Generic read-only contract binding to access the raw methods on
}

// StoreTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StoreTransactorRaw struct {
	Contract *StoreTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStore creates a new instance of Store, bound to a specific deployed contract.
func NewStore(address common.Address, backend bind.ContractBackend) (*Store, error) {
	contract, err := bindStore(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Store{StoreCaller: StoreCaller{contract: contract}, StoreTransactor: StoreTransactor{contract: contract}, StoreFilterer: StoreFilterer{contract: contract}}, nil
}

// NewStoreCaller creates a new read-only instance of Store, bound to a specific deployed contract.
func NewStoreCaller(address common.Address, caller bind.ContractCaller) (*StoreCaller, error) {
	contract, err := bindStore(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StoreCaller{contract: contract}, nil
}

// NewStoreTransactor creates a new write-only instance of Store, bound to a specific deployed contract.
func NewStoreTransactor(address common.Address, transactor bind.ContractTransactor) (*StoreTransactor, error) {
	contract, err := bindStore(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StoreTransactor{contract: contract}, nil
}

// NewStoreFilterer creates a new log filterer instance of Store, bound to a specific deployed contract.
func NewStoreFilterer(address common.Address, filterer bind.ContractFilterer) (*StoreFilterer, error) {
	contract, err := bindStore(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StoreFilterer{contract: contract}, nil
}

// bindStore binds a generic wrapper to an already deployed contract.
func bindStore(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StoreABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Store *StoreRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Store.Contract.StoreCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Store *StoreRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Store.Contract.StoreTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Store *StoreRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Store.Contract.StoreTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Store *StoreCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Store.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Store *StoreTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Store.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Store *StoreTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Store.Contract.contract.Transact(opts, method, params...)
}

// CYCLE is a free data retrieval call binding the contract method 0x9e8d48d0.
//
// Solidity: function CYCLE() view returns(uint256)
func (_Store *StoreCaller) CYCLE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "CYCLE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CYCLE is a free data retrieval call binding the contract method 0x9e8d48d0.
//
// Solidity: function CYCLE() view returns(uint256)
func (_Store *StoreSession) CYCLE() (*big.Int, error) {
	return _Store.Contract.CYCLE(&_Store.CallOpts)
}

// CYCLE is a free data retrieval call binding the contract method 0x9e8d48d0.
//
// Solidity: function CYCLE() view returns(uint256)
func (_Store *StoreCallerSession) CYCLE() (*big.Int, error) {
	return _Store.Contract.CYCLE(&_Store.CallOpts)
}

// MAXDRAW is a free data retrieval call binding the contract method 0xc2ec396b.
//
// Solidity: function MAX_DRAW() view returns(uint256)
func (_Store *StoreCaller) MAXDRAW(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "MAX_DRAW")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXDRAW is a free data retrieval call binding the contract method 0xc2ec396b.
//
// Solidity: function MAX_DRAW() view returns(uint256)
func (_Store *StoreSession) MAXDRAW() (*big.Int, error) {
	return _Store.Contract.MAXDRAW(&_Store.CallOpts)
}

// MAXDRAW is a free data retrieval call binding the contract method 0xc2ec396b.
//
// Solidity: function MAX_DRAW() view returns(uint256)
func (_Store *StoreCallerSession) MAXDRAW() (*big.Int, error) {
	return _Store.Contract.MAXDRAW(&_Store.CallOpts)
}

// MAXTIME is a free data retrieval call binding the contract method 0x26949984.
//
// Solidity: function MAX_TIME() view returns(uint256)
func (_Store *StoreCaller) MAXTIME(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "MAX_TIME")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXTIME is a free data retrieval call binding the contract method 0x26949984.
//
// Solidity: function MAX_TIME() view returns(uint256)
func (_Store *StoreSession) MAXTIME() (*big.Int, error) {
	return _Store.Contract.MAXTIME(&_Store.CallOpts)
}

// MAXTIME is a free data retrieval call binding the contract method 0x26949984.
//
// Solidity: function MAX_TIME() view returns(uint256)
func (_Store *StoreCallerSession) MAXTIME() (*big.Int, error) {
	return _Store.Contract.MAXTIME(&_Store.CallOpts)
}

// RNG is a free data retrieval call binding the contract method 0xf7149220.
//
// Solidity: function RNG() view returns(uint256)
func (_Store *StoreCaller) RNG(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "RNG")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RNG is a free data retrieval call binding the contract method 0xf7149220.
//
// Solidity: function RNG() view returns(uint256)
func (_Store *StoreSession) RNG() (*big.Int, error) {
	return _Store.Contract.RNG(&_Store.CallOpts)
}

// RNG is a free data retrieval call binding the contract method 0xf7149220.
//
// Solidity: function RNG() view returns(uint256)
func (_Store *StoreCallerSession) RNG() (*big.Int, error) {
	return _Store.Contract.RNG(&_Store.CallOpts)
}

// CardListDraw is a free data retrieval call binding the contract method 0x78ea1891.
//
// Solidity: function cardListDraw(uint256 ) view returns(uint256 seriesId, address user, uint256 cycle)
func (_Store *StoreCaller) CardListDraw(opts *bind.CallOpts, arg0 *big.Int) (struct {
	SeriesId *big.Int
	User     common.Address
	Cycle    *big.Int
}, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "cardListDraw", arg0)

	outstruct := new(struct {
		SeriesId *big.Int
		User     common.Address
		Cycle    *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.SeriesId = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.User = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.Cycle = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// CardListDraw is a free data retrieval call binding the contract method 0x78ea1891.
//
// Solidity: function cardListDraw(uint256 ) view returns(uint256 seriesId, address user, uint256 cycle)
func (_Store *StoreSession) CardListDraw(arg0 *big.Int) (struct {
	SeriesId *big.Int
	User     common.Address
	Cycle    *big.Int
}, error) {
	return _Store.Contract.CardListDraw(&_Store.CallOpts, arg0)
}

// CardListDraw is a free data retrieval call binding the contract method 0x78ea1891.
//
// Solidity: function cardListDraw(uint256 ) view returns(uint256 seriesId, address user, uint256 cycle)
func (_Store *StoreCallerSession) CardListDraw(arg0 *big.Int) (struct {
	SeriesId *big.Int
	User     common.Address
	Cycle    *big.Int
}, error) {
	return _Store.Contract.CardListDraw(&_Store.CallOpts, arg0)
}

// CardListMix is a free data retrieval call binding the contract method 0xab70b865.
//
// Solidity: function cardListMix(uint256 ) view returns(uint256 seriesId, address user, uint256 grade, uint256 cycle)
func (_Store *StoreCaller) CardListMix(opts *bind.CallOpts, arg0 *big.Int) (struct {
	SeriesId *big.Int
	User     common.Address
	Grade    *big.Int
	Cycle    *big.Int
}, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "cardListMix", arg0)

	outstruct := new(struct {
		SeriesId *big.Int
		User     common.Address
		Grade    *big.Int
		Cycle    *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.SeriesId = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.User = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.Grade = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Cycle = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// CardListMix is a free data retrieval call binding the contract method 0xab70b865.
//
// Solidity: function cardListMix(uint256 ) view returns(uint256 seriesId, address user, uint256 grade, uint256 cycle)
func (_Store *StoreSession) CardListMix(arg0 *big.Int) (struct {
	SeriesId *big.Int
	User     common.Address
	Grade    *big.Int
	Cycle    *big.Int
}, error) {
	return _Store.Contract.CardListMix(&_Store.CallOpts, arg0)
}

// CardListMix is a free data retrieval call binding the contract method 0xab70b865.
//
// Solidity: function cardListMix(uint256 ) view returns(uint256 seriesId, address user, uint256 grade, uint256 cycle)
func (_Store *StoreCallerSession) CardListMix(arg0 *big.Int) (struct {
	SeriesId *big.Int
	User     common.Address
	Grade    *big.Int
	Cycle    *big.Int
}, error) {
	return _Store.Contract.CardListMix(&_Store.CallOpts, arg0)
}

// Clrng is a free data retrieval call binding the contract method 0xdf54cf62.
//
// Solidity: function clrng() view returns(bytes32 keyHash, uint256 fee, address vrfCoordinator, address linkToken)
func (_Store *StoreCaller) Clrng(opts *bind.CallOpts) (struct {
	KeyHash        [32]byte
	Fee            *big.Int
	VrfCoordinator common.Address
	LinkToken      common.Address
}, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "clrng")

	outstruct := new(struct {
		KeyHash        [32]byte
		Fee            *big.Int
		VrfCoordinator common.Address
		LinkToken      common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.KeyHash = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.Fee = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.VrfCoordinator = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.LinkToken = *abi.ConvertType(out[3], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// Clrng is a free data retrieval call binding the contract method 0xdf54cf62.
//
// Solidity: function clrng() view returns(bytes32 keyHash, uint256 fee, address vrfCoordinator, address linkToken)
func (_Store *StoreSession) Clrng() (struct {
	KeyHash        [32]byte
	Fee            *big.Int
	VrfCoordinator common.Address
	LinkToken      common.Address
}, error) {
	return _Store.Contract.Clrng(&_Store.CallOpts)
}

// Clrng is a free data retrieval call binding the contract method 0xdf54cf62.
//
// Solidity: function clrng() view returns(bytes32 keyHash, uint256 fee, address vrfCoordinator, address linkToken)
func (_Store *StoreCallerSession) Clrng() (struct {
	KeyHash        [32]byte
	Fee            *big.Int
	VrfCoordinator common.Address
	LinkToken      common.Address
}, error) {
	return _Store.Contract.Clrng(&_Store.CallOpts)
}

// CountDown is a free data retrieval call binding the contract method 0x5fcbd5b6.
//
// Solidity: function countDown() view returns(uint256, uint256, uint256, bool)
func (_Store *StoreCaller) CountDown(opts *bind.CallOpts) (*big.Int, *big.Int, *big.Int, bool, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "countDown")

	if err != nil {
		return *new(*big.Int), *new(*big.Int), *new(*big.Int), *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	out3 := *abi.ConvertType(out[3], new(bool)).(*bool)

	return out0, out1, out2, out3, err

}

// CountDown is a free data retrieval call binding the contract method 0x5fcbd5b6.
//
// Solidity: function countDown() view returns(uint256, uint256, uint256, bool)
func (_Store *StoreSession) CountDown() (*big.Int, *big.Int, *big.Int, bool, error) {
	return _Store.Contract.CountDown(&_Store.CallOpts)
}

// CountDown is a free data retrieval call binding the contract method 0x5fcbd5b6.
//
// Solidity: function countDown() view returns(uint256, uint256, uint256, bool)
func (_Store *StoreCallerSession) CountDown() (*big.Int, *big.Int, *big.Int, bool, error) {
	return _Store.Contract.CountDown(&_Store.CallOpts)
}

// CycleRng is a free data retrieval call binding the contract method 0x6ddcab26.
//
// Solidity: function cycle_rng(uint256 ) view returns(uint256)
func (_Store *StoreCaller) CycleRng(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "cycle_rng", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CycleRng is a free data retrieval call binding the contract method 0x6ddcab26.
//
// Solidity: function cycle_rng(uint256 ) view returns(uint256)
func (_Store *StoreSession) CycleRng(arg0 *big.Int) (*big.Int, error) {
	return _Store.Contract.CycleRng(&_Store.CallOpts, arg0)
}

// CycleRng is a free data retrieval call binding the contract method 0x6ddcab26.
//
// Solidity: function cycle_rng(uint256 ) view returns(uint256)
func (_Store *StoreCallerSession) CycleRng(arg0 *big.Int) (*big.Int, error) {
	return _Store.Contract.CycleRng(&_Store.CallOpts, arg0)
}

// Draw is a free data retrieval call binding the contract method 0x0eecae21.
//
// Solidity: function draw() view returns(uint256 last_time, uint256 draw_count)
func (_Store *StoreCaller) Draw(opts *bind.CallOpts) (struct {
	LastTime  *big.Int
	DrawCount *big.Int
}, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "draw")

	outstruct := new(struct {
		LastTime  *big.Int
		DrawCount *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.LastTime = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.DrawCount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Draw is a free data retrieval call binding the contract method 0x0eecae21.
//
// Solidity: function draw() view returns(uint256 last_time, uint256 draw_count)
func (_Store *StoreSession) Draw() (struct {
	LastTime  *big.Int
	DrawCount *big.Int
}, error) {
	return _Store.Contract.Draw(&_Store.CallOpts)
}

// Draw is a free data retrieval call binding the contract method 0x0eecae21.
//
// Solidity: function draw() view returns(uint256 last_time, uint256 draw_count)
func (_Store *StoreCallerSession) Draw() (struct {
	LastTime  *big.Int
	DrawCount *big.Int
}, error) {
	return _Store.Contract.Draw(&_Store.CallOpts)
}

// NftAddress is a free data retrieval call binding the contract method 0xc78de709.
//
// Solidity: function nft_address() view returns(address)
func (_Store *StoreCaller) NftAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "nft_address")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NftAddress is a free data retrieval call binding the contract method 0xc78de709.
//
// Solidity: function nft_address() view returns(address)
func (_Store *StoreSession) NftAddress() (common.Address, error) {
	return _Store.Contract.NftAddress(&_Store.CallOpts)
}

// NftAddress is a free data retrieval call binding the contract method 0xc78de709.
//
// Solidity: function nft_address() view returns(address)
func (_Store *StoreCallerSession) NftAddress() (common.Address, error) {
	return _Store.Contract.NftAddress(&_Store.CallOpts)
}

// Recorder is a free data retrieval call binding the contract method 0xf33930d9.
//
// Solidity: function recorder() view returns(address)
func (_Store *StoreCaller) Recorder(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "recorder")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Recorder is a free data retrieval call binding the contract method 0xf33930d9.
//
// Solidity: function recorder() view returns(address)
func (_Store *StoreSession) Recorder() (common.Address, error) {
	return _Store.Contract.Recorder(&_Store.CallOpts)
}

// Recorder is a free data retrieval call binding the contract method 0xf33930d9.
//
// Solidity: function recorder() view returns(address)
func (_Store *StoreCallerSession) Recorder() (common.Address, error) {
	return _Store.Contract.Recorder(&_Store.CallOpts)
}

// XATEST is a paid mutator transaction binding the contract method 0x17f718b5.
//
// Solidity: function XATEST(address _user, uint256 _box, uint256 _series_id) returns()
func (_Store *StoreTransactor) XATEST(opts *bind.TransactOpts, _user common.Address, _box *big.Int, _series_id *big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "XATEST", _user, _box, _series_id)
}

// XATEST is a paid mutator transaction binding the contract method 0x17f718b5.
//
// Solidity: function XATEST(address _user, uint256 _box, uint256 _series_id) returns()
func (_Store *StoreSession) XATEST(_user common.Address, _box *big.Int, _series_id *big.Int) (*types.Transaction, error) {
	return _Store.Contract.XATEST(&_Store.TransactOpts, _user, _box, _series_id)
}

// XATEST is a paid mutator transaction binding the contract method 0x17f718b5.
//
// Solidity: function XATEST(address _user, uint256 _box, uint256 _series_id) returns()
func (_Store *StoreTransactorSession) XATEST(_user common.Address, _box *big.Int, _series_id *big.Int) (*types.Transaction, error) {
	return _Store.Contract.XATEST(&_Store.TransactOpts, _user, _box, _series_id)
}

// Award is a paid mutator transaction binding the contract method 0x41a494c5.
//
// Solidity: function award() returns()
func (_Store *StoreTransactor) Award(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "award")
}

// Award is a paid mutator transaction binding the contract method 0x41a494c5.
//
// Solidity: function award() returns()
func (_Store *StoreSession) Award() (*types.Transaction, error) {
	return _Store.Contract.Award(&_Store.TransactOpts)
}

// Award is a paid mutator transaction binding the contract method 0x41a494c5.
//
// Solidity: function award() returns()
func (_Store *StoreTransactorSession) Award() (*types.Transaction, error) {
	return _Store.Contract.Award(&_Store.TransactOpts)
}

// GetRandomNumber is a paid mutator transaction binding the contract method 0xdbdff2c1.
//
// Solidity: function getRandomNumber() returns(bytes32 requestId)
func (_Store *StoreTransactor) GetRandomNumber(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "getRandomNumber")
}

// GetRandomNumber is a paid mutator transaction binding the contract method 0xdbdff2c1.
//
// Solidity: function getRandomNumber() returns(bytes32 requestId)
func (_Store *StoreSession) GetRandomNumber() (*types.Transaction, error) {
	return _Store.Contract.GetRandomNumber(&_Store.TransactOpts)
}

// GetRandomNumber is a paid mutator transaction binding the contract method 0xdbdff2c1.
//
// Solidity: function getRandomNumber() returns(bytes32 requestId)
func (_Store *StoreTransactorSession) GetRandomNumber() (*types.Transaction, error) {
	return _Store.Contract.GetRandomNumber(&_Store.TransactOpts)
}

// Init is a paid mutator transaction binding the contract method 0xf09a4016.
//
// Solidity: function init(address _nft, address _owner) returns()
func (_Store *StoreTransactor) Init(opts *bind.TransactOpts, _nft common.Address, _owner common.Address) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "init", _nft, _owner)
}

// Init is a paid mutator transaction binding the contract method 0xf09a4016.
//
// Solidity: function init(address _nft, address _owner) returns()
func (_Store *StoreSession) Init(_nft common.Address, _owner common.Address) (*types.Transaction, error) {
	return _Store.Contract.Init(&_Store.TransactOpts, _nft, _owner)
}

// Init is a paid mutator transaction binding the contract method 0xf09a4016.
//
// Solidity: function init(address _nft, address _owner) returns()
func (_Store *StoreTransactorSession) Init(_nft common.Address, _owner common.Address) (*types.Transaction, error) {
	return _Store.Contract.Init(&_Store.TransactOpts, _nft, _owner)
}

// RawFulfillRandomness is a paid mutator transaction binding the contract method 0x94985ddd.
//
// Solidity: function rawFulfillRandomness(bytes32 requestId, uint256 randomness) returns()
func (_Store *StoreTransactor) RawFulfillRandomness(opts *bind.TransactOpts, requestId [32]byte, randomness *big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "rawFulfillRandomness", requestId, randomness)
}

// RawFulfillRandomness is a paid mutator transaction binding the contract method 0x94985ddd.
//
// Solidity: function rawFulfillRandomness(bytes32 requestId, uint256 randomness) returns()
func (_Store *StoreSession) RawFulfillRandomness(requestId [32]byte, randomness *big.Int) (*types.Transaction, error) {
	return _Store.Contract.RawFulfillRandomness(&_Store.TransactOpts, requestId, randomness)
}

// RawFulfillRandomness is a paid mutator transaction binding the contract method 0x94985ddd.
//
// Solidity: function rawFulfillRandomness(bytes32 requestId, uint256 randomness) returns()
func (_Store *StoreTransactorSession) RawFulfillRandomness(requestId [32]byte, randomness *big.Int) (*types.Transaction, error) {
	return _Store.Contract.RawFulfillRandomness(&_Store.TransactOpts, requestId, randomness)
}

// Received is a paid mutator transaction binding the contract method 0x8c78a40c.
//
// Solidity: function received(uint256[] tokenIds, uint256[] types) returns()
func (_Store *StoreTransactor) Received(opts *bind.TransactOpts, tokenIds []*big.Int, types []*big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "received", tokenIds, types)
}

// Received is a paid mutator transaction binding the contract method 0x8c78a40c.
//
// Solidity: function received(uint256[] tokenIds, uint256[] types) returns()
func (_Store *StoreSession) Received(tokenIds []*big.Int, types []*big.Int) (*types.Transaction, error) {
	return _Store.Contract.Received(&_Store.TransactOpts, tokenIds, types)
}

// Received is a paid mutator transaction binding the contract method 0x8c78a40c.
//
// Solidity: function received(uint256[] tokenIds, uint256[] types) returns()
func (_Store *StoreTransactorSession) Received(tokenIds []*big.Int, types []*big.Int) (*types.Transaction, error) {
	return _Store.Contract.Received(&_Store.TransactOpts, tokenIds, types)
}

// RecordDraw is a paid mutator transaction binding the contract method 0x428ca455.
//
// Solidity: function record_draw(address _user, uint256 _box, uint256 _series_id) returns()
func (_Store *StoreTransactor) RecordDraw(opts *bind.TransactOpts, _user common.Address, _box *big.Int, _series_id *big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "record_draw", _user, _box, _series_id)
}

// RecordDraw is a paid mutator transaction binding the contract method 0x428ca455.
//
// Solidity: function record_draw(address _user, uint256 _box, uint256 _series_id) returns()
func (_Store *StoreSession) RecordDraw(_user common.Address, _box *big.Int, _series_id *big.Int) (*types.Transaction, error) {
	return _Store.Contract.RecordDraw(&_Store.TransactOpts, _user, _box, _series_id)
}

// RecordDraw is a paid mutator transaction binding the contract method 0x428ca455.
//
// Solidity: function record_draw(address _user, uint256 _box, uint256 _series_id) returns()
func (_Store *StoreTransactorSession) RecordDraw(_user common.Address, _box *big.Int, _series_id *big.Int) (*types.Transaction, error) {
	return _Store.Contract.RecordDraw(&_Store.TransactOpts, _user, _box, _series_id)
}

// RecordMix is a paid mutator transaction binding the contract method 0xb2f22ede.
//
// Solidity: function record_mix(address _user, uint256 _mix_grade_id, uint256 _series_id) returns()
func (_Store *StoreTransactor) RecordMix(opts *bind.TransactOpts, _user common.Address, _mix_grade_id *big.Int, _series_id *big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "record_mix", _user, _mix_grade_id, _series_id)
}

// RecordMix is a paid mutator transaction binding the contract method 0xb2f22ede.
//
// Solidity: function record_mix(address _user, uint256 _mix_grade_id, uint256 _series_id) returns()
func (_Store *StoreSession) RecordMix(_user common.Address, _mix_grade_id *big.Int, _series_id *big.Int) (*types.Transaction, error) {
	return _Store.Contract.RecordMix(&_Store.TransactOpts, _user, _mix_grade_id, _series_id)
}

// RecordMix is a paid mutator transaction binding the contract method 0xb2f22ede.
//
// Solidity: function record_mix(address _user, uint256 _mix_grade_id, uint256 _series_id) returns()
func (_Store *StoreTransactorSession) RecordMix(_user common.Address, _mix_grade_id *big.Int, _series_id *big.Int) (*types.Transaction, error) {
	return _Store.Contract.RecordMix(&_Store.TransactOpts, _user, _mix_grade_id, _series_id)
}

// ResetLotteryLimit is a paid mutator transaction binding the contract method 0xb901cc7a.
//
// Solidity: function resetLotteryLimit(uint256 _draw_wait, uint256 _draw_number) returns()
func (_Store *StoreTransactor) ResetLotteryLimit(opts *bind.TransactOpts, _draw_wait *big.Int, _draw_number *big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "resetLotteryLimit", _draw_wait, _draw_number)
}

// ResetLotteryLimit is a paid mutator transaction binding the contract method 0xb901cc7a.
//
// Solidity: function resetLotteryLimit(uint256 _draw_wait, uint256 _draw_number) returns()
func (_Store *StoreSession) ResetLotteryLimit(_draw_wait *big.Int, _draw_number *big.Int) (*types.Transaction, error) {
	return _Store.Contract.ResetLotteryLimit(&_Store.TransactOpts, _draw_wait, _draw_number)
}

// ResetLotteryLimit is a paid mutator transaction binding the contract method 0xb901cc7a.
//
// Solidity: function resetLotteryLimit(uint256 _draw_wait, uint256 _draw_number) returns()
func (_Store *StoreTransactorSession) ResetLotteryLimit(_draw_wait *big.Int, _draw_number *big.Int) (*types.Transaction, error) {
	return _Store.Contract.ResetLotteryLimit(&_Store.TransactOpts, _draw_wait, _draw_number)
}

// ResetRecorder is a paid mutator transaction binding the contract method 0xe33cccac.
//
// Solidity: function resetRecorder(address _recorder) returns()
func (_Store *StoreTransactor) ResetRecorder(opts *bind.TransactOpts, _recorder common.Address) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "resetRecorder", _recorder)
}

// ResetRecorder is a paid mutator transaction binding the contract method 0xe33cccac.
//
// Solidity: function resetRecorder(address _recorder) returns()
func (_Store *StoreSession) ResetRecorder(_recorder common.Address) (*types.Transaction, error) {
	return _Store.Contract.ResetRecorder(&_Store.TransactOpts, _recorder)
}

// ResetRecorder is a paid mutator transaction binding the contract method 0xe33cccac.
//
// Solidity: function resetRecorder(address _recorder) returns()
func (_Store *StoreTransactorSession) ResetRecorder(_recorder common.Address) (*types.Transaction, error) {
	return _Store.Contract.ResetRecorder(&_Store.TransactOpts, _recorder)
}

// StoreDrawLogIterator is returned from FilterDrawLog and is used to iterate over the raw logs and unpacked data for DrawLog events raised by the Store contract.
type StoreDrawLogIterator struct {
	Event *StoreDrawLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreDrawLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreDrawLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreDrawLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreDrawLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreDrawLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreDrawLog represents a DrawLog event raised by the Store contract.
type StoreDrawLog struct {
	TokenId  []*big.Int
	Cycle    *big.Int
	SeriesId *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterDrawLog is a free log retrieval operation binding the contract event 0xb18951c545e112da311f4a0bd054cbe178c57b1ef968ec63ef6a093755e9d630.
//
// Solidity: event drawLog(uint256[] tokenId, uint256 cycle, uint256 _series_id)
func (_Store *StoreFilterer) FilterDrawLog(opts *bind.FilterOpts) (*StoreDrawLogIterator, error) {

	logs, sub, err := _Store.contract.FilterLogs(opts, "drawLog")
	if err != nil {
		return nil, err
	}
	return &StoreDrawLogIterator{contract: _Store.contract, event: "drawLog", logs: logs, sub: sub}, nil
}

// WatchDrawLog is a free log subscription operation binding the contract event 0xb18951c545e112da311f4a0bd054cbe178c57b1ef968ec63ef6a093755e9d630.
//
// Solidity: event drawLog(uint256[] tokenId, uint256 cycle, uint256 _series_id)
func (_Store *StoreFilterer) WatchDrawLog(opts *bind.WatchOpts, sink chan<- *StoreDrawLog) (event.Subscription, error) {

	logs, sub, err := _Store.contract.WatchLogs(opts, "drawLog")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreDrawLog)
				if err := _Store.contract.UnpackLog(event, "drawLog", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDrawLog is a log parse operation binding the contract event 0xb18951c545e112da311f4a0bd054cbe178c57b1ef968ec63ef6a093755e9d630.
//
// Solidity: event drawLog(uint256[] tokenId, uint256 cycle, uint256 _series_id)
func (_Store *StoreFilterer) ParseDrawLog(log types.Log) (*StoreDrawLog, error) {
	event := new(StoreDrawLog)
	if err := _Store.contract.UnpackLog(event, "drawLog", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StoreMixLogIterator is returned from FilterMixLog and is used to iterate over the raw logs and unpacked data for MixLog events raised by the Store contract.
type StoreMixLogIterator struct {
	Event *StoreMixLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreMixLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreMixLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreMixLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreMixLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreMixLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreMixLog represents a MixLog event raised by the Store contract.
type StoreMixLog struct {
	TokenId  *big.Int
	Cycle    *big.Int
	SeriesId *big.Int
	Grade    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterMixLog is a free log retrieval operation binding the contract event 0xa51db56e26d1149c600f5b2774374b85e8725830fdbe0de173f0f45f02d54445.
//
// Solidity: event mixLog(uint256 tokenId, uint256 cycle, uint256 _series_id, uint256 _grade)
func (_Store *StoreFilterer) FilterMixLog(opts *bind.FilterOpts) (*StoreMixLogIterator, error) {

	logs, sub, err := _Store.contract.FilterLogs(opts, "mixLog")
	if err != nil {
		return nil, err
	}
	return &StoreMixLogIterator{contract: _Store.contract, event: "mixLog", logs: logs, sub: sub}, nil
}

// WatchMixLog is a free log subscription operation binding the contract event 0xa51db56e26d1149c600f5b2774374b85e8725830fdbe0de173f0f45f02d54445.
//
// Solidity: event mixLog(uint256 tokenId, uint256 cycle, uint256 _series_id, uint256 _grade)
func (_Store *StoreFilterer) WatchMixLog(opts *bind.WatchOpts, sink chan<- *StoreMixLog) (event.Subscription, error) {

	logs, sub, err := _Store.contract.WatchLogs(opts, "mixLog")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreMixLog)
				if err := _Store.contract.UnpackLog(event, "mixLog", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMixLog is a log parse operation binding the contract event 0xa51db56e26d1149c600f5b2774374b85e8725830fdbe0de173f0f45f02d54445.
//
// Solidity: event mixLog(uint256 tokenId, uint256 cycle, uint256 _series_id, uint256 _grade)
func (_Store *StoreFilterer) ParseMixLog(log types.Log) (*StoreMixLog, error) {
	event := new(StoreMixLog)
	if err := _Store.contract.UnpackLog(event, "mixLog", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StoreReceivedLogIterator is returned from FilterReceivedLog and is used to iterate over the raw logs and unpacked data for ReceivedLog events raised by the Store contract.
type StoreReceivedLogIterator struct {
	Event *StoreReceivedLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreReceivedLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreReceivedLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreReceivedLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreReceivedLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreReceivedLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreReceivedLog represents a ReceivedLog event raised by the Store contract.
type StoreReceivedLog struct {
	TokenIds []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterReceivedLog is a free log retrieval operation binding the contract event 0xafe296b0d059a83d40a8cd314d6fc86b44b1d3896692e3757676106d47169902.
//
// Solidity: event receivedLog(uint256[] tokenIds)
func (_Store *StoreFilterer) FilterReceivedLog(opts *bind.FilterOpts) (*StoreReceivedLogIterator, error) {

	logs, sub, err := _Store.contract.FilterLogs(opts, "receivedLog")
	if err != nil {
		return nil, err
	}
	return &StoreReceivedLogIterator{contract: _Store.contract, event: "receivedLog", logs: logs, sub: sub}, nil
}

// WatchReceivedLog is a free log subscription operation binding the contract event 0xafe296b0d059a83d40a8cd314d6fc86b44b1d3896692e3757676106d47169902.
//
// Solidity: event receivedLog(uint256[] tokenIds)
func (_Store *StoreFilterer) WatchReceivedLog(opts *bind.WatchOpts, sink chan<- *StoreReceivedLog) (event.Subscription, error) {

	logs, sub, err := _Store.contract.WatchLogs(opts, "receivedLog")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreReceivedLog)
				if err := _Store.contract.UnpackLog(event, "receivedLog", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReceivedLog is a log parse operation binding the contract event 0xafe296b0d059a83d40a8cd314d6fc86b44b1d3896692e3757676106d47169902.
//
// Solidity: event receivedLog(uint256[] tokenIds)
func (_Store *StoreFilterer) ParseReceivedLog(log types.Log) (*StoreReceivedLog, error) {
	event := new(StoreReceivedLog)
	if err := _Store.contract.UnpackLog(event, "receivedLog", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
