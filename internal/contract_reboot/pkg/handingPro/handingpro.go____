// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package handingPro

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// HandingProCard is an auto generated low-level Go binding around an user-defined struct.
type HandingProCard struct {
	Types    *big.Int
	SeriesId *big.Int
	User     common.Address
	MixCard  []*big.Int
	Grade    *big.Int
	TokenId  *big.Int
	Cycle    *big.Int
}

// StoreMetaData contains all meta data concerning the Store contract.
var StoreMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"linkToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"}],\"name\":\"drawLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"}],\"name\":\"mixLog\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CYCLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DRAW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RNG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_box\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_series_id\",\"type\":\"uint256\"}],\"name\":\"XATEST\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"award\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"grade\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardListArr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clrng\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"linkToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cycle_rng\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"draw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"last_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"draw_count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRandomNumber\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lens\",\"type\":\"uint256\"}],\"name\":\"queryCardListByValue\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"mix_card\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"grade\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"}],\"internalType\":\"structHandingPro.Card[]\",\"name\":\"result\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"queryPlayerTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"mix_card\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"grade\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"}],\"internalType\":\"structHandingPro.Card[]\",\"name\":\"result\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"received\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_box\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_mix\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_mix_grade_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_series_id\",\"type\":\"uint256\"}],\"name\":\"record\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recorder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_draw_wait\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_draw_number\",\"type\":\"uint256\"}],\"name\":\"resetLotteryLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recorder\",\"type\":\"address\"}],\"name\":\"resetRecorder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"user_tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60c06040526001600b60006101000a81548160ff0219169083151502179055503480156200002d5760006000fd5b5060405162003a0238038062003a02833981810160405281019062000053919062000232565b5b81815b8173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815260140150508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815260140150505b50506040518060800160405280856000191681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020015060016000506000820151816000016000509060001916905560208201518160010160005090905560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050505b50505050620003495662000348565b600081519050620001fb81620002ee565b5b92915050565b60008151905062000213816200030c565b5b92915050565b6000815190506200022b816200032a565b5b92915050565b6000600060006000608085870312156200024c5760006000fd5b60006200025c8782880162000202565b94505060206200026f878288016200021a565b93505060406200028287828801620001ea565b92505060606200029587828801620001ea565b9150505b92959194509250565b6000620002af82620002c2565b90505b919050565b60008190505b919050565b600073ffffffffffffffffffffffffffffffffffffffff821690505b919050565b60008190505b919050565b620002f981620002a2565b81141515620003085760006000fd5b5b50565b6200031781620002b7565b81141515620003265760006000fd5b5b50565b6200033581620002e3565b81141515620003445760006000fd5b5b50565b5b60805160601c60a05160601c6136856200037d600039806109c35280611b515250806110b75280611b1552506136856000f3fe60806040523480156100115760006000fd5b50600436106101525760003560e01c8063c2ec396b116100c4578063f09a40161161007d578063f09a401614610389578063f1596400146103a5578063f33930d9146103d5578063f7149220146103f3578063fa70545314610411578063ff2ca5be1461042d57610152565b8063c2ec396b146102bd578063c78de709146102db578063d9f035aa146102f9578063dbdff2c11461032e578063df54cf621461034c578063e33cccac1461036d57610152565b806359a4aacd1161011657806359a4aacd146101eb5780636ddcab261461021b57806394985ddd1461024b5780639e8d48d014610267578063b901cc7a14610285578063bdf5f88f146102a157610152565b80630eecae211461015857806317f718b514610177578063269499841461019357806341a494c5146101b157806347c2773b146101bb57610152565b60006000fd5b61016061045e565b60405161016e92919061335a565b60405180910390f35b610191600480360381019061018c9190612751565b610479565b005b61019b610496565b6040516101a8919061333e565b60405180910390f35b6101b961049f565b005b6101d560048036038101906101d0919061267e565b6106e0565b6040516101e2919061333e565b60405180910390f35b610205600480360381019061020091906128f0565b610718565b60405161021291906130ad565b60405180910390f35b6102356004803603810190610230919061289a565b6109a6565b604051610242919061333e565b60405180910390f35b6102656004803603810190610260919061285b565b6109c1565b005b61026f610a66565b60405161027c919061333e565b60405180910390f35b61029f600480360381019061029a91906128f0565b610a6f565b005b6102bb60048036038101906102b691906127a3565b610b1f565b005b6102c561100a565b6040516102d2919061333e565b60405180910390f35b6102e3611013565b6040516102f09190612f56565b60405180910390f35b610313600480360381019061030e919061289a565b611039565b60405161032596959493929190613384565b60405180910390f35b6103366110a7565b6040516103439190613101565b60405180910390f35b6103546111d3565b6040516103649493929190613147565b60405180910390f35b61038760048036038101906103829190612614565b61123a565b005b6103a3600480360381019061039e919061263f565b611312565b005b6103bf60048036038101906103ba919061289a565b611458565b6040516103cc919061333e565b60405180910390f35b6103dd611480565b6040516103ea9190612f56565b60405180910390f35b6103fb6114a6565b604051610408919061333e565b60405180910390f35b61042b600480360381019061042691906126bd565b6114af565b005b61044760048036038101906104429190612751565b611520565b6040516104559291906130d0565b60405180910390f35b600c6000508060000160005054908060010160005054905082565b606061048f8484836000866114af63ffffffff16565b505b505050565b60086000505481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561056957600760005054600c600050600101600050541015806105275750600860005054600c60005060000160005054420310155b1515610568576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055f906132db565b60405180910390fd5b5b6000600160005060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b81526004016105ce929190612f72565b60206040518083038186803b1580156105e75760006000fd5b505afa1580156105fc573d600060003e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062091906128c5565b90506001600050600101600050548110151515610672576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610669906132fc565b60405180910390fd5b6106b7600160005060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633306001600050600101600050546117ed63ffffffff16565b6106c56110a763ffffffff16565b5060096000818150548092919060010191905090905550505b565b60106000506020528160005260406000206000508181548110151561070157fe5b906000526020600020900160005b91509150505481565b6060600f600050600081548110151561072d57fe5b906000526020600020900160005b505483101561074c578090506109a0565b60006000610764600f6000508661192a63ffffffff16565b915091508115156107795782925050506109a0565b60148411610787578361078a565b60145b93508350600f600050805490508482011015156107b457806001600f600050805490500303935083505b60606001850167ffffffffffffffff811180156107d15760006000fd5b5060405190808252806020026020018201604052801561080b57816020015b6107f861236c565b8152602001906001900390816107f05790505b509050600060008390505b60018785010181101561098f57600e6000506000600f6000508381548110151561083c57fe5b906000526020600020900160005b505481526020019081526020016000206000506040518060e001604052908160008201600050548152602001600182016000505481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160005080548060200260200160405190810160405280929190818152602001828054801561092d57602002820191906000526020600020905b816000505481526020019060010190808311610916575b505050505081526020016004820160005054815260200160058201600050548152602001600682016000505481526020015050838381518110151561096e57fe5b602002602001018190525081806001019250505b8080600101915050610816565b50819450505050506109a056505050505b92915050565b60116000506020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a48906132ba565b60405180910390fd5b610a618282611a1063ffffffff16565b5b5050565b60096000505481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af890613278565b60405180910390fd5b8160086000508190909055508060076000508190909055505b5b5050565b6000828290509050600a8111151515610b6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6490613257565b60405180910390fd5b6000600090505b818110156110035760006000610be8601060005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000508787868181101515610bd657fe5b9050602002013561192a63ffffffff16565b91509150811515610c2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2590613236565b60405180910390fd5b600060116000506000600960005054815260200190815260200160002060005054111515610c91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c88906131d3565b60405180910390fd5b610ce5601060005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005082611a3c63ffffffff16565b610ced61236c565b600e60005060008888878181101515610d0257fe5b9050602002013581526020019081526020016000206000506040518060e001604052908160008201600050548152602001600182016000505481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201600050805480602002602001604051908101604052809291908181526020018280548015610dea57602002820191906000526020600020905b816000505481526020019060010190808311610dd3575b50505050508152602001600482016000505481526020016005820160005054815260200160068201600050548152602001505090506000601160005060008360c001518152602001908152602001600020600050548260a00151604051602001610e55929190612f29565b6040516020818303038152906040528051906020012060001c9050600182600001511415610f2f57600b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e223809a338460200151848c8c8b8181101515610ed057fe5b905060200201356040518563ffffffff1660e01b8152600401610ef69493929190612f9c565b600060405180830381600087803b158015610f115760006000fd5b505af1158015610f26573d600060003e3d6000fd5b50505050610ff1565b600282600001511415610ff057600b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635c4d06e33384602001518560800151858d8d8c8181101515610f9457fe5b905060200201356040518663ffffffff1660e01b8152600401610fbb959493929190612fe2565b600060405180830381600087803b158015610fd65760006000fd5b505af1158015610feb573d600060003e3d6000fd5b505050505b5b505050505b8080600101915050610b74565b50505b5050565b60076000505481565b600b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600e6000506020528060005260406000206000915090508060000160005054908060010160005054908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160005054908060050160005054908060060160005054905086565b60006001600050600101600050547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161110e9190612f56565b60206040518083038186803b1580156111275760006000fd5b505afa15801561113c573d600060003e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116091906128c5565b101515156111a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119a90613215565b60405180910390fd5b6111c9600160005060000160005054600160005060010160005054611b1163ffffffff16565b90506111d0565b90565b60016000508060000160005054908060010160005054908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905084565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c390613278565b60405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b600b60009054906101000a900460ff161515611363576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135a906131f4565b60405180910390fd5b81600b60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555042600c60005060000160005081909090555033600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600b60006101000a81548160ff0219169083151502179055505b5050565b600f6000508181548110151561146a57fe5b906000526020600020900160005b915090505481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a6000505481565b60008411156114ca576114c9848287611caa63ffffffff16565b5b60006000831180156114dd575060008451115b156114fb576001905080506114fa84878486611ff363ffffffff16565b5b808501600c6000506001016000828282505401925050819090905550505b5050505050565b606060006060601060005060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000508054806020026020016040519081016040528092919081815260200182805480156115b857602002820191906000526020600020905b8160005054815260200190600101908083116115a1575b5050505050905060008151905060008114806115d657506001810386115b156115e85783819350935050506117e5565b601485116115f657846115f9565b60145b9450845060608567ffffffffffffffff811180156116175760006000fd5b5060405190808252806020026020018201604052801561165157816020015b61163e61236c565b8152602001906001900390816116365790505b5090506000828789011161166757868801611669565b825b905060008890505b818110156117d157600e6000506000868381518110151561168e57fe5b602002602001015181526020019081526020016000206000506040518060e001604052908160008201600050548152602001600182016000505481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160005080548060200260200160405190810160405280929190818152602001828054801561177757602002820191906000526020600020905b816000505481526020019060010190808311611760575b50505050508152602001600482016000505481526020016005820160005054815260200160068201600050548152602001505083828151811015156117b857fe5b60200260200101819052505b8080600101915050611671565b50818395509550505050506117e556505050505b935093915050565b600060608573ffffffffffffffffffffffffffffffffffffffff166323b872dd86868660405160240161182293929190613036565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516118709190612f11565b6000604051808303816000865af19150503d80600081146118ad576040519150601f19603f3d011682016040523d82523d6000602084013e6118b2565b606091505b50915091508180156118e057506000815114806118df5750808060200190518101906118de9190612830565b5b5b1515611921576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119189061331d565b60405180910390fd5b50505b50505050565b6000600060008480549050141561194b576000600080905091509150611a09565b6000600090506000600186805490500390505b80821115156119f557600061197983836122a163ffffffff16565b905085878281548110151561198a57fe5b906000526020600020900160005b505414156119b35760018194509450505050611a09566119ef565b8587828154811015156119c257fe5b906000526020600020900160005b505411156119e55760018103915081506119ee565b60018101925082505b5b5061195e565b60006000809050935093505050611a095650505b9250929050565b8060116000506000600960005054815260200190815260200160002060005081909090555081505b5050565b818054905081101515611a84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7b90613299565b60405180910390fd5b5b6001828054905003811015611ae5578160018201815481101515611aa557fe5b906000526020600020900160005b50548282815481101515611ac357fe5b906000526020600020900160005b508190909055508080600101915050611a85565b818054801515611af157fe5b600190038181906000526020600020900160005b506000905590555b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f000000000000000000000000000000000000000000000000000000000000000084866000604051602001611b8592919061311d565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401611bb29392919061306e565b602060405180830381600087803b158015611bcd5760006000fd5b505af1158015611be2573d600060003e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c069190612830565b506000611c3d84600030600060005060008960001916600019168152602001908152602001600020600050546122f363ffffffff16565b905060016000600050600086600019166000191681526020019081526020016000206000505401600060005060008660001916600019168152602001908152602001600020600050819090905550611c9b848261233463ffffffff16565b915050611ca456505b92915050565b6060600b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f3c3fceb856040518263ffffffff1660e01b8152600401611d07919061333e565b600060405180830381600087803b158015611d225760006000fd5b505af1158015611d37573d600060003e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611d6091906127ec565b905060606000600090505b8251811015611fea576040518060e00160405280600181526020018681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001838152602001600081526020018483815181101515611dc357fe5b60200260200101518152602001600960005054815260200150600e60005060008584815181101515611df157fe5b6020026020010151815260200190815260200160002060005060008201518160000160005090905560208201518160010160005090905560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003016000509080519060200190611e8e9291906123c2565b5060808201518160040160005090905560a08201518160050160005090905560c082015181600601600050909055905050600f6000508382815181101515611ed257fe5b6020026020010151908060018154018082558091505060019003906000526020600020900160005b90919091909150909055601060005060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000508382815181101515611f5757fe5b6020026020010151908060018154018082558091505060019003906000526020600020900160005b909190919091509090557f2577121d3d8032bb6e71bfce50ad728ac89907cf63b1aa49fb5947f50bef9b6e8382815181101515611fb857fe5b6020026020010151600960005054604051611fd492919061335a565b60405180910390a15b8080600101915050611d6b565b5050505b505050565b6000600b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166358c61c026040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156120605760006000fd5b505af1158015612075573d600060003e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061209991906128c5565b90506040518060e00160405280600281526020018481526020018573ffffffffffffffffffffffffffffffffffffffff168152602001868152602001838152602001828152602001600960005054815260200150600e600050600083815260200190815260200160002060005060008201518160000160005090905560208201518160010160005090905560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301600050908051906020019061218a9291906123c2565b5060808201518160040160005090905560a08201518160050160005090905560c082015181600601600050909055905050600f60005081908060018154018082558091505060019003906000526020600020900160005b90919091909150909055601060005060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005081908060018154018082558091505060019003906000526020600020900160005b909190919091509090557f797afa0720dddb483b94d13042d131c909284ccb822562fc89192bd7f4fdaa5b8160096000505460405161229192919061335a565b60405180910390a1505b50505050565b600060026002838115156122b157fe5b066002858115156122be57fe5b06018115156122c957fe5b046002838115156122d657fe5b046002858115156122e357fe5b04010190506122ed565b92915050565b60008484848460405160200161230c949392919061318d565b6040516020818303038152906040528051906020012060001c905061232c565b949350505050565b60008282604051602001612349929190612ee4565b604051602081830303815290604052805190602001209050612366565b92915050565b6040518060e001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000815260200160008152602001600081526020015090565b828054828255906000526020600020908101928215612403579160200282015b8281111561240257825182600050909055916020019190600101906123e2565b5b5090506124109190612414565b5090565b61243c919061241e565b80821115612438576000818150600090555060010161241e565b5090565b905661364e565b600081359050612452816135e2565b5b92915050565b6000600083601f840112151561246f5760006000fd5b8235905067ffffffffffffffff8111156124895760006000fd5b6020830191508360208202830111156124a25760006000fd5b5b9250929050565b600082601f83011215156124be5760006000fd5b81356124d16124cc82613415565b6133e6565b915081818352602084019350602081019050838560208402820111156124f75760006000fd5b60005b83811015612528578161250d88826125e8565b8452602084019350602083019250505b6001810190506124fa565b505050505b92915050565b600082601f83011215156125475760006000fd5b815161255a61255582613415565b6133e6565b915081818352602084019350602081019050838560208402820111156125805760006000fd5b60005b838110156125b1578161259688826125fe565b8452602084019350602083019250505b600181019050612583565b505050505b92915050565b6000815190506125cb816135fd565b5b92915050565b6000813590506125e181613618565b5b92915050565b6000813590506125f781613633565b5b92915050565b60008151905061260d81613633565b5b92915050565b6000602082840312156126275760006000fd5b600061263584828501612443565b9150505b92915050565b60006000604083850312156126545760006000fd5b600061266285828601612443565b925050602061267385828601612443565b9150505b9250929050565b60006000604083850312156126935760006000fd5b60006126a185828601612443565b92505060206126b2858286016125e8565b9150505b9250929050565b6000600060006000600060a086880312156126d85760006000fd5b60006126e688828901612443565b95505060206126f7888289016125e8565b945050604086013567ffffffffffffffff8111156127155760006000fd5b612721888289016124aa565b9350506060612732888289016125e8565b9250506080612743888289016125e8565b9150505b9295509295909350565b600060006000606084860312156127685760006000fd5b600061277686828701612443565b9350506020612787868287016125e8565b9250506040612798868287016125e8565b9150505b9250925092565b60006000602083850312156127b85760006000fd5b600083013567ffffffffffffffff8111156127d35760006000fd5b6127df85828601612459565b92509250505b9250929050565b6000602082840312156127ff5760006000fd5b600082015167ffffffffffffffff81111561281a5760006000fd5b61282684828501612533565b9150505b92915050565b6000602082840312156128435760006000fd5b6000612851848285016125bc565b9150505b92915050565b60006000604083850312156128705760006000fd5b600061287e858286016125d2565b925050602061288f858286016125e8565b9150505b9250929050565b6000602082840312156128ad5760006000fd5b60006128bb848285016125e8565b9150505b92915050565b6000602082840312156128d85760006000fd5b60006128e6848285016125fe565b9150505b92915050565b60006000604083850312156129055760006000fd5b6000612913858286016125e8565b9250506020612924858286016125e8565b9150505b9250929050565b600061293b8383612e0f565b90505b92915050565b60006129508383612eac565b6020830190505b92915050565b6129668161354c565b82525b5050565b612976816134f5565b82525b5050565b612986816134f5565b82525b5050565b600061299882613461565b6129a281856134a1565b9350836020820285016129b48561343f565b8060005b858110156129f157848403895281516129d1858261292f565b94506129dc83613485565b925060208a019950505b6001810190506129b8565b5082975087955050505050505b92915050565b6000612a0f8261346d565b612a1981856134b3565b9350612a2483613450565b8060005b83811015612a56578151612a3c8882612944565b9750612a4783613493565b9250505b600181019050612a28565b508593505050505b92915050565b612a6d81613515565b82525b5050565b612a85612a8082613515565b6135ba565b82525b5050565b6000612a9782613479565b612aa181856134c5565b9350612ab1818560208601613585565b612aba816135d0565b84019150505b92915050565b6000612ad182613479565b612adb81856134d7565b9350612aeb818560208601613585565b8084019150505b92915050565b6000612b05600e836134e3565b91507f4572723a4e6f206c6f747465727900000000000000000000000000000000000060008301526020820190505b919050565b6000612b46600d836134e3565b91507f4572723a6f6e6c79206f6e63650000000000000000000000000000000000000060008301526020820190505b919050565b6000612b87602b836134e3565b91507f4e6f7420656e6f756768204c494e4b202d2066696c6c20636f6e74726163742060008301527f776974682066617563657400000000000000000000000000000000000000000060208301526040820190505b919050565b6000612bee600d836134e3565b91507f4572723a4e6f742045786973740000000000000000000000000000000000000060008301526020820190505b919050565b6000612c2f6012836134e3565b91507f4572723a6f76657220746865206c696d6974000000000000000000000000000060008301526020820190505b919050565b6000612c70600e836134e3565b91507f4572723a6f6e6c79206f776e657200000000000000000000000000000000000060008301526020820190505b919050565b6000612cb16018836134e3565b91507f4572723a20696e646578206f7574206f6620626f756e6473000000000000000060008301526020820190505b919050565b6000612cf2601f836134e3565b91507f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c0060008301526020820190505b919050565b6000612d33601b836134e3565b91507f4572723a636f6e646974696f6e732077657265206e6f74206d6574000000000060008301526020820190505b919050565b6000612d746016836134e3565b91507f4572723a496e73756666696369656e742066756e64730000000000000000000060008301526020820190505b919050565b6000612db56024836134e3565b91507f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f464160008301527f494c45440000000000000000000000000000000000000000000000000000000060208301526040820190505b919050565b600060e083016000830151612e276000860182612eac565b506020830151612e3a6020860182612eac565b506040830151612e4d604086018261296d565b5060608301518482036060860152612e658282612a04565b9150506080830151612e7a6080860182612eac565b5060a0830151612e8d60a0860182612eac565b5060c0830151612ea060c0860182612eac565b50809150505b92915050565b612eb581613541565b82525b5050565b612ec581613541565b82525b5050565b612edd612ed882613541565b6135c5565b82525b5050565b6000612ef08285612a74565b602082019150612f008284612ecc565b6020820191508190505b9392505050565b6000612f1d8284612ac6565b91508190505b92915050565b6000612f358285612ecc565b602082019150612f458284612ecc565b6020820191508190505b9392505050565b6000602082019050612f6b600083018461297d565b5b92915050565b6000604082019050612f87600083018561295d565b612f94602083018461297d565b5b9392505050565b6000608082019050612fb1600083018761295d565b612fbe6020830186612ebc565b612fcb6040830185612ebc565b612fd86060830184612ebc565b5b95945050505050565b600060a082019050612ff7600083018861295d565b6130046020830187612ebc565b6130116040830186612ebc565b61301e6060830185612ebc565b61302b6080830184612ebc565b5b9695505050505050565b600060608201905061304b600083018661297d565b613058602083018561297d565b6130656040830184612ebc565b5b949350505050565b6000606082019050613083600083018661297d565b6130906020830185612ebc565b81810360408301526130a28184612a8c565b90505b949350505050565b600060208201905081810360008301526130c7818461298d565b90505b92915050565b600060408201905081810360008301526130ea818561298d565b90506130f96020830184612ebc565b5b9392505050565b60006020820190506131166000830184612a64565b5b92915050565b60006040820190506131326000830185612a64565b61313f6020830184612ebc565b5b9392505050565b600060808201905061315c6000830187612a64565b6131696020830186612ebc565b613176604083018561297d565b613183606083018461297d565b5b95945050505050565b60006080820190506131a26000830187612a64565b6131af6020830186612ebc565b6131bc604083018561297d565b6131c96060830184612ebc565b5b95945050505050565b600060208201905081810360008301526131ec81612af8565b90505b919050565b6000602082019050818103600083015261320d81612b39565b90505b919050565b6000602082019050818103600083015261322e81612b7a565b90505b919050565b6000602082019050818103600083015261324f81612be1565b90505b919050565b6000602082019050818103600083015261327081612c22565b90505b919050565b6000602082019050818103600083015261329181612c63565b90505b919050565b600060208201905081810360008301526132b281612ca4565b90505b919050565b600060208201905081810360008301526132d381612ce5565b90505b919050565b600060208201905081810360008301526132f481612d26565b90505b919050565b6000602082019050818103600083015261331581612d67565b90505b919050565b6000602082019050818103600083015261333681612da8565b90505b919050565b60006020820190506133536000830184612ebc565b5b92915050565b600060408201905061336f6000830185612ebc565b61337c6020830184612ebc565b5b9392505050565b600060c0820190506133996000830189612ebc565b6133a66020830188612ebc565b6133b3604083018761297d565b6133c06060830186612ebc565b6133cd6080830185612ebc565b6133da60a0830184612ebc565b5b979650505050505050565b6000604051905081810181811067ffffffffffffffff8211171561340a5760006000fd5b80604052505b919050565b600067ffffffffffffffff82111561342d5760006000fd5b6020820290506020810190505b919050565b60008190506020820190505b919050565b60008190506020820190505b919050565b6000815190505b919050565b6000815190505b919050565b6000815190505b919050565b60006020820190505b919050565b60006020820190505b919050565b60008282526020820190505b92915050565b60008282526020820190505b92915050565b60008282526020820190505b92915050565b60008190505b92915050565b60008282526020820190505b92915050565b600061350082613520565b90505b919050565b600081151590505b919050565b60008190505b919050565b600073ffffffffffffffffffffffffffffffffffffffff821690505b919050565b60008190505b919050565b60006135578261355f565b90505b919050565b600061356a82613572565b90505b919050565b600061357d82613520565b90505b919050565b60005b838110156135a45780820151818401525b602081019050613588565b838111156135b3576000848401525b505b505050565b60008190505b919050565b60008190505b919050565b6000601f19601f83011690505b919050565b6135eb816134f5565b811415156135f95760006000fd5b5b50565b61360681613508565b811415156136145760006000fd5b5b50565b61362181613515565b8114151561362f5760006000fd5b5b50565b61363c81613541565b8114151561364a5760006000fd5b5b50565bfea264697066735822122099a289c89cef2ff9a19758e55839aa47a4210ee432d1a8e8627b734e8dd4e94364736f6c63430006050033",
}

// StoreABI is the input ABI used to generate the binding from.
// Deprecated: Use StoreMetaData.ABI instead.
var StoreABI = StoreMetaData.ABI

// StoreBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StoreMetaData.Bin instead.
var StoreBin = StoreMetaData.Bin

// DeployStore deploys a new Ethereum contract, binding an instance of Store to it.
func DeployStore(auth *bind.TransactOpts, backend bind.ContractBackend, keyHash [32]byte, fee *big.Int, vrfCoordinator common.Address, linkToken common.Address) (common.Address, *types.Transaction, *Store, error) {
	parsed, err := StoreMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StoreBin), backend, keyHash, fee, vrfCoordinator, linkToken)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Store{StoreCaller: StoreCaller{contract: contract}, StoreTransactor: StoreTransactor{contract: contract}, StoreFilterer: StoreFilterer{contract: contract}}, nil
}

// Store is an auto generated Go binding around an Ethereum contract.
type Store struct {
	StoreCaller     // Read-only binding to the contract
	StoreTransactor // Write-only binding to the contract
	StoreFilterer   // Log filterer for contract events
}

// StoreCaller is an auto generated read-only Go binding around an Ethereum contract.
type StoreCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoreTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StoreTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoreFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StoreFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoreSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StoreSession struct {
	Contract     *Store            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StoreCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StoreCallerSession struct {
	Contract *StoreCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// StoreTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StoreTransactorSession struct {
	Contract     *StoreTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StoreRaw is an auto generated low-level Go binding around an Ethereum contract.
type StoreRaw struct {
	Contract *Store // Generic contract binding to access the raw methods on
}

// StoreCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StoreCallerRaw struct {
	Contract *StoreCaller // Generic read-only contract binding to access the raw methods on
}

// StoreTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StoreTransactorRaw struct {
	Contract *StoreTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStore creates a new instance of Store, bound to a specific deployed contract.
func NewStore(address common.Address, backend bind.ContractBackend) (*Store, error) {
	contract, err := bindStore(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Store{StoreCaller: StoreCaller{contract: contract}, StoreTransactor: StoreTransactor{contract: contract}, StoreFilterer: StoreFilterer{contract: contract}}, nil
}

// NewStoreCaller creates a new read-only instance of Store, bound to a specific deployed contract.
func NewStoreCaller(address common.Address, caller bind.ContractCaller) (*StoreCaller, error) {
	contract, err := bindStore(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StoreCaller{contract: contract}, nil
}

// NewStoreTransactor creates a new write-only instance of Store, bound to a specific deployed contract.
func NewStoreTransactor(address common.Address, transactor bind.ContractTransactor) (*StoreTransactor, error) {
	contract, err := bindStore(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StoreTransactor{contract: contract}, nil
}

// NewStoreFilterer creates a new log filterer instance of Store, bound to a specific deployed contract.
func NewStoreFilterer(address common.Address, filterer bind.ContractFilterer) (*StoreFilterer, error) {
	contract, err := bindStore(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StoreFilterer{contract: contract}, nil
}

// bindStore binds a generic wrapper to an already deployed contract.
func bindStore(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StoreABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Store *StoreRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Store.Contract.StoreCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Store *StoreRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Store.Contract.StoreTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Store *StoreRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Store.Contract.StoreTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Store *StoreCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Store.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Store *StoreTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Store.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Store *StoreTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Store.Contract.contract.Transact(opts, method, params...)
}

// CYCLE is a free data retrieval call binding the contract method 0x9e8d48d0.
//
// Solidity: function CYCLE() view returns(uint256)
func (_Store *StoreCaller) CYCLE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "CYCLE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CYCLE is a free data retrieval call binding the contract method 0x9e8d48d0.
//
// Solidity: function CYCLE() view returns(uint256)
func (_Store *StoreSession) CYCLE() (*big.Int, error) {
	return _Store.Contract.CYCLE(&_Store.CallOpts)
}

// CYCLE is a free data retrieval call binding the contract method 0x9e8d48d0.
//
// Solidity: function CYCLE() view returns(uint256)
func (_Store *StoreCallerSession) CYCLE() (*big.Int, error) {
	return _Store.Contract.CYCLE(&_Store.CallOpts)
}

// MAXDRAW is a free data retrieval call binding the contract method 0xc2ec396b.
//
// Solidity: function MAX_DRAW() view returns(uint256)
func (_Store *StoreCaller) MAXDRAW(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "MAX_DRAW")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXDRAW is a free data retrieval call binding the contract method 0xc2ec396b.
//
// Solidity: function MAX_DRAW() view returns(uint256)
func (_Store *StoreSession) MAXDRAW() (*big.Int, error) {
	return _Store.Contract.MAXDRAW(&_Store.CallOpts)
}

// MAXDRAW is a free data retrieval call binding the contract method 0xc2ec396b.
//
// Solidity: function MAX_DRAW() view returns(uint256)
func (_Store *StoreCallerSession) MAXDRAW() (*big.Int, error) {
	return _Store.Contract.MAXDRAW(&_Store.CallOpts)
}

// MAXTIME is a free data retrieval call binding the contract method 0x26949984.
//
// Solidity: function MAX_TIME() view returns(uint256)
func (_Store *StoreCaller) MAXTIME(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "MAX_TIME")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXTIME is a free data retrieval call binding the contract method 0x26949984.
//
// Solidity: function MAX_TIME() view returns(uint256)
func (_Store *StoreSession) MAXTIME() (*big.Int, error) {
	return _Store.Contract.MAXTIME(&_Store.CallOpts)
}

// MAXTIME is a free data retrieval call binding the contract method 0x26949984.
//
// Solidity: function MAX_TIME() view returns(uint256)
func (_Store *StoreCallerSession) MAXTIME() (*big.Int, error) {
	return _Store.Contract.MAXTIME(&_Store.CallOpts)
}

// RNG is a free data retrieval call binding the contract method 0xf7149220.
//
// Solidity: function RNG() view returns(uint256)
func (_Store *StoreCaller) RNG(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "RNG")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RNG is a free data retrieval call binding the contract method 0xf7149220.
//
// Solidity: function RNG() view returns(uint256)
func (_Store *StoreSession) RNG() (*big.Int, error) {
	return _Store.Contract.RNG(&_Store.CallOpts)
}

// RNG is a free data retrieval call binding the contract method 0xf7149220.
//
// Solidity: function RNG() view returns(uint256)
func (_Store *StoreCallerSession) RNG() (*big.Int, error) {
	return _Store.Contract.RNG(&_Store.CallOpts)
}

// CardList is a free data retrieval call binding the contract method 0xd9f035aa.
//
// Solidity: function cardList(uint256 ) view returns(uint256 types, uint256 seriesId, address user, uint256 grade, uint256 tokenId, uint256 cycle)
func (_Store *StoreCaller) CardList(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Types    *big.Int
	SeriesId *big.Int
	User     common.Address
	Grade    *big.Int
	TokenId  *big.Int
	Cycle    *big.Int
}, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "cardList", arg0)

	outstruct := new(struct {
		Types    *big.Int
		SeriesId *big.Int
		User     common.Address
		Grade    *big.Int
		TokenId  *big.Int
		Cycle    *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Types = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.SeriesId = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.User = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.Grade = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.TokenId = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.Cycle = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// CardList is a free data retrieval call binding the contract method 0xd9f035aa.
//
// Solidity: function cardList(uint256 ) view returns(uint256 types, uint256 seriesId, address user, uint256 grade, uint256 tokenId, uint256 cycle)
func (_Store *StoreSession) CardList(arg0 *big.Int) (struct {
	Types    *big.Int
	SeriesId *big.Int
	User     common.Address
	Grade    *big.Int
	TokenId  *big.Int
	Cycle    *big.Int
}, error) {
	return _Store.Contract.CardList(&_Store.CallOpts, arg0)
}

// CardList is a free data retrieval call binding the contract method 0xd9f035aa.
//
// Solidity: function cardList(uint256 ) view returns(uint256 types, uint256 seriesId, address user, uint256 grade, uint256 tokenId, uint256 cycle)
func (_Store *StoreCallerSession) CardList(arg0 *big.Int) (struct {
	Types    *big.Int
	SeriesId *big.Int
	User     common.Address
	Grade    *big.Int
	TokenId  *big.Int
	Cycle    *big.Int
}, error) {
	return _Store.Contract.CardList(&_Store.CallOpts, arg0)
}

// CardListArr is a free data retrieval call binding the contract method 0xf1596400.
//
// Solidity: function cardListArr(uint256 ) view returns(uint256)
func (_Store *StoreCaller) CardListArr(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "cardListArr", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CardListArr is a free data retrieval call binding the contract method 0xf1596400.
//
// Solidity: function cardListArr(uint256 ) view returns(uint256)
func (_Store *StoreSession) CardListArr(arg0 *big.Int) (*big.Int, error) {
	return _Store.Contract.CardListArr(&_Store.CallOpts, arg0)
}

// CardListArr is a free data retrieval call binding the contract method 0xf1596400.
//
// Solidity: function cardListArr(uint256 ) view returns(uint256)
func (_Store *StoreCallerSession) CardListArr(arg0 *big.Int) (*big.Int, error) {
	return _Store.Contract.CardListArr(&_Store.CallOpts, arg0)
}

// Clrng is a free data retrieval call binding the contract method 0xdf54cf62.
//
// Solidity: function clrng() view returns(bytes32 keyHash, uint256 fee, address vrfCoordinator, address linkToken)
func (_Store *StoreCaller) Clrng(opts *bind.CallOpts) (struct {
	KeyHash        [32]byte
	Fee            *big.Int
	VrfCoordinator common.Address
	LinkToken      common.Address
}, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "clrng")

	outstruct := new(struct {
		KeyHash        [32]byte
		Fee            *big.Int
		VrfCoordinator common.Address
		LinkToken      common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.KeyHash = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.Fee = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.VrfCoordinator = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.LinkToken = *abi.ConvertType(out[3], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// Clrng is a free data retrieval call binding the contract method 0xdf54cf62.
//
// Solidity: function clrng() view returns(bytes32 keyHash, uint256 fee, address vrfCoordinator, address linkToken)
func (_Store *StoreSession) Clrng() (struct {
	KeyHash        [32]byte
	Fee            *big.Int
	VrfCoordinator common.Address
	LinkToken      common.Address
}, error) {
	return _Store.Contract.Clrng(&_Store.CallOpts)
}

// Clrng is a free data retrieval call binding the contract method 0xdf54cf62.
//
// Solidity: function clrng() view returns(bytes32 keyHash, uint256 fee, address vrfCoordinator, address linkToken)
func (_Store *StoreCallerSession) Clrng() (struct {
	KeyHash        [32]byte
	Fee            *big.Int
	VrfCoordinator common.Address
	LinkToken      common.Address
}, error) {
	return _Store.Contract.Clrng(&_Store.CallOpts)
}

// CycleRng is a free data retrieval call binding the contract method 0x6ddcab26.
//
// Solidity: function cycle_rng(uint256 ) view returns(uint256)
func (_Store *StoreCaller) CycleRng(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "cycle_rng", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CycleRng is a free data retrieval call binding the contract method 0x6ddcab26.
//
// Solidity: function cycle_rng(uint256 ) view returns(uint256)
func (_Store *StoreSession) CycleRng(arg0 *big.Int) (*big.Int, error) {
	return _Store.Contract.CycleRng(&_Store.CallOpts, arg0)
}

// CycleRng is a free data retrieval call binding the contract method 0x6ddcab26.
//
// Solidity: function cycle_rng(uint256 ) view returns(uint256)
func (_Store *StoreCallerSession) CycleRng(arg0 *big.Int) (*big.Int, error) {
	return _Store.Contract.CycleRng(&_Store.CallOpts, arg0)
}

// Draw is a free data retrieval call binding the contract method 0x0eecae21.
//
// Solidity: function draw() view returns(uint256 last_time, uint256 draw_count)
func (_Store *StoreCaller) Draw(opts *bind.CallOpts) (struct {
	LastTime  *big.Int
	DrawCount *big.Int
}, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "draw")

	outstruct := new(struct {
		LastTime  *big.Int
		DrawCount *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.LastTime = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.DrawCount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Draw is a free data retrieval call binding the contract method 0x0eecae21.
//
// Solidity: function draw() view returns(uint256 last_time, uint256 draw_count)
func (_Store *StoreSession) Draw() (struct {
	LastTime  *big.Int
	DrawCount *big.Int
}, error) {
	return _Store.Contract.Draw(&_Store.CallOpts)
}

// Draw is a free data retrieval call binding the contract method 0x0eecae21.
//
// Solidity: function draw() view returns(uint256 last_time, uint256 draw_count)
func (_Store *StoreCallerSession) Draw() (struct {
	LastTime  *big.Int
	DrawCount *big.Int
}, error) {
	return _Store.Contract.Draw(&_Store.CallOpts)
}

// NftAddress is a free data retrieval call binding the contract method 0xc78de709.
//
// Solidity: function nft_address() view returns(address)
func (_Store *StoreCaller) NftAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "nft_address")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NftAddress is a free data retrieval call binding the contract method 0xc78de709.
//
// Solidity: function nft_address() view returns(address)
func (_Store *StoreSession) NftAddress() (common.Address, error) {
	return _Store.Contract.NftAddress(&_Store.CallOpts)
}

// NftAddress is a free data retrieval call binding the contract method 0xc78de709.
//
// Solidity: function nft_address() view returns(address)
func (_Store *StoreCallerSession) NftAddress() (common.Address, error) {
	return _Store.Contract.NftAddress(&_Store.CallOpts)
}

// QueryCardListByValue is a free data retrieval call binding the contract method 0x59a4aacd.
//
// Solidity: function queryCardListByValue(uint256 _tokenId, uint256 lens) view returns((uint256,uint256,address,uint256[],uint256,uint256,uint256)[] result)
func (_Store *StoreCaller) QueryCardListByValue(opts *bind.CallOpts, _tokenId *big.Int, lens *big.Int) ([]HandingProCard, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "queryCardListByValue", _tokenId, lens)

	if err != nil {
		return *new([]HandingProCard), err
	}

	out0 := *abi.ConvertType(out[0], new([]HandingProCard)).(*[]HandingProCard)

	return out0, err

}

// QueryCardListByValue is a free data retrieval call binding the contract method 0x59a4aacd.
//
// Solidity: function queryCardListByValue(uint256 _tokenId, uint256 lens) view returns((uint256,uint256,address,uint256[],uint256,uint256,uint256)[] result)
func (_Store *StoreSession) QueryCardListByValue(_tokenId *big.Int, lens *big.Int) ([]HandingProCard, error) {
	return _Store.Contract.QueryCardListByValue(&_Store.CallOpts, _tokenId, lens)
}

// QueryCardListByValue is a free data retrieval call binding the contract method 0x59a4aacd.
//
// Solidity: function queryCardListByValue(uint256 _tokenId, uint256 lens) view returns((uint256,uint256,address,uint256[],uint256,uint256,uint256)[] result)
func (_Store *StoreCallerSession) QueryCardListByValue(_tokenId *big.Int, lens *big.Int) ([]HandingProCard, error) {
	return _Store.Contract.QueryCardListByValue(&_Store.CallOpts, _tokenId, lens)
}

// QueryPlayerTokens is a free data retrieval call binding the contract method 0xff2ca5be.
//
// Solidity: function queryPlayerTokens(address player, uint256 start, uint256 limit) view returns((uint256,uint256,address,uint256[],uint256,uint256,uint256)[] result, uint256 len)
func (_Store *StoreCaller) QueryPlayerTokens(opts *bind.CallOpts, player common.Address, start *big.Int, limit *big.Int) (struct {
	Result []HandingProCard
	Len    *big.Int
}, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "queryPlayerTokens", player, start, limit)

	outstruct := new(struct {
		Result []HandingProCard
		Len    *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Result = *abi.ConvertType(out[0], new([]HandingProCard)).(*[]HandingProCard)
	outstruct.Len = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// QueryPlayerTokens is a free data retrieval call binding the contract method 0xff2ca5be.
//
// Solidity: function queryPlayerTokens(address player, uint256 start, uint256 limit) view returns((uint256,uint256,address,uint256[],uint256,uint256,uint256)[] result, uint256 len)
func (_Store *StoreSession) QueryPlayerTokens(player common.Address, start *big.Int, limit *big.Int) (struct {
	Result []HandingProCard
	Len    *big.Int
}, error) {
	return _Store.Contract.QueryPlayerTokens(&_Store.CallOpts, player, start, limit)
}

// QueryPlayerTokens is a free data retrieval call binding the contract method 0xff2ca5be.
//
// Solidity: function queryPlayerTokens(address player, uint256 start, uint256 limit) view returns((uint256,uint256,address,uint256[],uint256,uint256,uint256)[] result, uint256 len)
func (_Store *StoreCallerSession) QueryPlayerTokens(player common.Address, start *big.Int, limit *big.Int) (struct {
	Result []HandingProCard
	Len    *big.Int
}, error) {
	return _Store.Contract.QueryPlayerTokens(&_Store.CallOpts, player, start, limit)
}

// Recorder is a free data retrieval call binding the contract method 0xf33930d9.
//
// Solidity: function recorder() view returns(address)
func (_Store *StoreCaller) Recorder(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "recorder")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Recorder is a free data retrieval call binding the contract method 0xf33930d9.
//
// Solidity: function recorder() view returns(address)
func (_Store *StoreSession) Recorder() (common.Address, error) {
	return _Store.Contract.Recorder(&_Store.CallOpts)
}

// Recorder is a free data retrieval call binding the contract method 0xf33930d9.
//
// Solidity: function recorder() view returns(address)
func (_Store *StoreCallerSession) Recorder() (common.Address, error) {
	return _Store.Contract.Recorder(&_Store.CallOpts)
}

// UserTokens is a free data retrieval call binding the contract method 0x47c2773b.
//
// Solidity: function user_tokens(address , uint256 ) view returns(uint256)
func (_Store *StoreCaller) UserTokens(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "user_tokens", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UserTokens is a free data retrieval call binding the contract method 0x47c2773b.
//
// Solidity: function user_tokens(address , uint256 ) view returns(uint256)
func (_Store *StoreSession) UserTokens(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _Store.Contract.UserTokens(&_Store.CallOpts, arg0, arg1)
}

// UserTokens is a free data retrieval call binding the contract method 0x47c2773b.
//
// Solidity: function user_tokens(address , uint256 ) view returns(uint256)
func (_Store *StoreCallerSession) UserTokens(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _Store.Contract.UserTokens(&_Store.CallOpts, arg0, arg1)
}

// XATEST is a paid mutator transaction binding the contract method 0x17f718b5.
//
// Solidity: function XATEST(address _user, uint256 _box, uint256 _series_id) returns()
func (_Store *StoreTransactor) XATEST(opts *bind.TransactOpts, _user common.Address, _box *big.Int, _series_id *big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "XATEST", _user, _box, _series_id)
}

// XATEST is a paid mutator transaction binding the contract method 0x17f718b5.
//
// Solidity: function XATEST(address _user, uint256 _box, uint256 _series_id) returns()
func (_Store *StoreSession) XATEST(_user common.Address, _box *big.Int, _series_id *big.Int) (*types.Transaction, error) {
	return _Store.Contract.XATEST(&_Store.TransactOpts, _user, _box, _series_id)
}

// XATEST is a paid mutator transaction binding the contract method 0x17f718b5.
//
// Solidity: function XATEST(address _user, uint256 _box, uint256 _series_id) returns()
func (_Store *StoreTransactorSession) XATEST(_user common.Address, _box *big.Int, _series_id *big.Int) (*types.Transaction, error) {
	return _Store.Contract.XATEST(&_Store.TransactOpts, _user, _box, _series_id)
}

// Award is a paid mutator transaction binding the contract method 0x41a494c5.
//
// Solidity: function award() returns()
func (_Store *StoreTransactor) Award(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "award")
}

// Award is a paid mutator transaction binding the contract method 0x41a494c5.
//
// Solidity: function award() returns()
func (_Store *StoreSession) Award() (*types.Transaction, error) {
	return _Store.Contract.Award(&_Store.TransactOpts)
}

// Award is a paid mutator transaction binding the contract method 0x41a494c5.
//
// Solidity: function award() returns()
func (_Store *StoreTransactorSession) Award() (*types.Transaction, error) {
	return _Store.Contract.Award(&_Store.TransactOpts)
}

// GetRandomNumber is a paid mutator transaction binding the contract method 0xdbdff2c1.
//
// Solidity: function getRandomNumber() returns(bytes32 requestId)
func (_Store *StoreTransactor) GetRandomNumber(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "getRandomNumber")
}

// GetRandomNumber is a paid mutator transaction binding the contract method 0xdbdff2c1.
//
// Solidity: function getRandomNumber() returns(bytes32 requestId)
func (_Store *StoreSession) GetRandomNumber() (*types.Transaction, error) {
	return _Store.Contract.GetRandomNumber(&_Store.TransactOpts)
}

// GetRandomNumber is a paid mutator transaction binding the contract method 0xdbdff2c1.
//
// Solidity: function getRandomNumber() returns(bytes32 requestId)
func (_Store *StoreTransactorSession) GetRandomNumber() (*types.Transaction, error) {
	return _Store.Contract.GetRandomNumber(&_Store.TransactOpts)
}

// Init is a paid mutator transaction binding the contract method 0xf09a4016.
//
// Solidity: function init(address _nft, address _owner) returns()
func (_Store *StoreTransactor) Init(opts *bind.TransactOpts, _nft common.Address, _owner common.Address) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "init", _nft, _owner)
}

// Init is a paid mutator transaction binding the contract method 0xf09a4016.
//
// Solidity: function init(address _nft, address _owner) returns()
func (_Store *StoreSession) Init(_nft common.Address, _owner common.Address) (*types.Transaction, error) {
	return _Store.Contract.Init(&_Store.TransactOpts, _nft, _owner)
}

// Init is a paid mutator transaction binding the contract method 0xf09a4016.
//
// Solidity: function init(address _nft, address _owner) returns()
func (_Store *StoreTransactorSession) Init(_nft common.Address, _owner common.Address) (*types.Transaction, error) {
	return _Store.Contract.Init(&_Store.TransactOpts, _nft, _owner)
}

// RawFulfillRandomness is a paid mutator transaction binding the contract method 0x94985ddd.
//
// Solidity: function rawFulfillRandomness(bytes32 requestId, uint256 randomness) returns()
func (_Store *StoreTransactor) RawFulfillRandomness(opts *bind.TransactOpts, requestId [32]byte, randomness *big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "rawFulfillRandomness", requestId, randomness)
}

// RawFulfillRandomness is a paid mutator transaction binding the contract method 0x94985ddd.
//
// Solidity: function rawFulfillRandomness(bytes32 requestId, uint256 randomness) returns()
func (_Store *StoreSession) RawFulfillRandomness(requestId [32]byte, randomness *big.Int) (*types.Transaction, error) {
	return _Store.Contract.RawFulfillRandomness(&_Store.TransactOpts, requestId, randomness)
}

// RawFulfillRandomness is a paid mutator transaction binding the contract method 0x94985ddd.
//
// Solidity: function rawFulfillRandomness(bytes32 requestId, uint256 randomness) returns()
func (_Store *StoreTransactorSession) RawFulfillRandomness(requestId [32]byte, randomness *big.Int) (*types.Transaction, error) {
	return _Store.Contract.RawFulfillRandomness(&_Store.TransactOpts, requestId, randomness)
}

// Received is a paid mutator transaction binding the contract method 0xbdf5f88f.
//
// Solidity: function received(uint256[] tokenIds) returns()
func (_Store *StoreTransactor) Received(opts *bind.TransactOpts, tokenIds []*big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "received", tokenIds)
}

// Received is a paid mutator transaction binding the contract method 0xbdf5f88f.
//
// Solidity: function received(uint256[] tokenIds) returns()
func (_Store *StoreSession) Received(tokenIds []*big.Int) (*types.Transaction, error) {
	return _Store.Contract.Received(&_Store.TransactOpts, tokenIds)
}

// Received is a paid mutator transaction binding the contract method 0xbdf5f88f.
//
// Solidity: function received(uint256[] tokenIds) returns()
func (_Store *StoreTransactorSession) Received(tokenIds []*big.Int) (*types.Transaction, error) {
	return _Store.Contract.Received(&_Store.TransactOpts, tokenIds)
}

// Record is a paid mutator transaction binding the contract method 0xfa705453.
//
// Solidity: function record(address _user, uint256 _box, uint256[] _mix, uint256 _mix_grade_id, uint256 _series_id) returns()
func (_Store *StoreTransactor) Record(opts *bind.TransactOpts, _user common.Address, _box *big.Int, _mix []*big.Int, _mix_grade_id *big.Int, _series_id *big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "record", _user, _box, _mix, _mix_grade_id, _series_id)
}

// Record is a paid mutator transaction binding the contract method 0xfa705453.
//
// Solidity: function record(address _user, uint256 _box, uint256[] _mix, uint256 _mix_grade_id, uint256 _series_id) returns()
func (_Store *StoreSession) Record(_user common.Address, _box *big.Int, _mix []*big.Int, _mix_grade_id *big.Int, _series_id *big.Int) (*types.Transaction, error) {
	return _Store.Contract.Record(&_Store.TransactOpts, _user, _box, _mix, _mix_grade_id, _series_id)
}

// Record is a paid mutator transaction binding the contract method 0xfa705453.
//
// Solidity: function record(address _user, uint256 _box, uint256[] _mix, uint256 _mix_grade_id, uint256 _series_id) returns()
func (_Store *StoreTransactorSession) Record(_user common.Address, _box *big.Int, _mix []*big.Int, _mix_grade_id *big.Int, _series_id *big.Int) (*types.Transaction, error) {
	return _Store.Contract.Record(&_Store.TransactOpts, _user, _box, _mix, _mix_grade_id, _series_id)
}

// ResetLotteryLimit is a paid mutator transaction binding the contract method 0xb901cc7a.
//
// Solidity: function resetLotteryLimit(uint256 _draw_wait, uint256 _draw_number) returns()
func (_Store *StoreTransactor) ResetLotteryLimit(opts *bind.TransactOpts, _draw_wait *big.Int, _draw_number *big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "resetLotteryLimit", _draw_wait, _draw_number)
}

// ResetLotteryLimit is a paid mutator transaction binding the contract method 0xb901cc7a.
//
// Solidity: function resetLotteryLimit(uint256 _draw_wait, uint256 _draw_number) returns()
func (_Store *StoreSession) ResetLotteryLimit(_draw_wait *big.Int, _draw_number *big.Int) (*types.Transaction, error) {
	return _Store.Contract.ResetLotteryLimit(&_Store.TransactOpts, _draw_wait, _draw_number)
}

// ResetLotteryLimit is a paid mutator transaction binding the contract method 0xb901cc7a.
//
// Solidity: function resetLotteryLimit(uint256 _draw_wait, uint256 _draw_number) returns()
func (_Store *StoreTransactorSession) ResetLotteryLimit(_draw_wait *big.Int, _draw_number *big.Int) (*types.Transaction, error) {
	return _Store.Contract.ResetLotteryLimit(&_Store.TransactOpts, _draw_wait, _draw_number)
}

// ResetRecorder is a paid mutator transaction binding the contract method 0xe33cccac.
//
// Solidity: function resetRecorder(address _recorder) returns()
func (_Store *StoreTransactor) ResetRecorder(opts *bind.TransactOpts, _recorder common.Address) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "resetRecorder", _recorder)
}

// ResetRecorder is a paid mutator transaction binding the contract method 0xe33cccac.
//
// Solidity: function resetRecorder(address _recorder) returns()
func (_Store *StoreSession) ResetRecorder(_recorder common.Address) (*types.Transaction, error) {
	return _Store.Contract.ResetRecorder(&_Store.TransactOpts, _recorder)
}

// ResetRecorder is a paid mutator transaction binding the contract method 0xe33cccac.
//
// Solidity: function resetRecorder(address _recorder) returns()
func (_Store *StoreTransactorSession) ResetRecorder(_recorder common.Address) (*types.Transaction, error) {
	return _Store.Contract.ResetRecorder(&_Store.TransactOpts, _recorder)
}

// StoreDrawLogIterator is returned from FilterDrawLog and is used to iterate over the raw logs and unpacked data for DrawLog events raised by the Store contract.
type StoreDrawLogIterator struct {
	Event *StoreDrawLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreDrawLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreDrawLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreDrawLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreDrawLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreDrawLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreDrawLog represents a DrawLog event raised by the Store contract.
type StoreDrawLog struct {
	TokenId *big.Int
	Cycle   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterDrawLog is a free log retrieval operation binding the contract event 0x2577121d3d8032bb6e71bfce50ad728ac89907cf63b1aa49fb5947f50bef9b6e.
//
// Solidity: event drawLog(uint256 tokenId, uint256 cycle)
func (_Store *StoreFilterer) FilterDrawLog(opts *bind.FilterOpts) (*StoreDrawLogIterator, error) {

	logs, sub, err := _Store.contract.FilterLogs(opts, "drawLog")
	if err != nil {
		return nil, err
	}
	return &StoreDrawLogIterator{contract: _Store.contract, event: "drawLog", logs: logs, sub: sub}, nil
}

// WatchDrawLog is a free log subscription operation binding the contract event 0x2577121d3d8032bb6e71bfce50ad728ac89907cf63b1aa49fb5947f50bef9b6e.
//
// Solidity: event drawLog(uint256 tokenId, uint256 cycle)
func (_Store *StoreFilterer) WatchDrawLog(opts *bind.WatchOpts, sink chan<- *StoreDrawLog) (event.Subscription, error) {

	logs, sub, err := _Store.contract.WatchLogs(opts, "drawLog")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreDrawLog)
				if err := _Store.contract.UnpackLog(event, "drawLog", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDrawLog is a log parse operation binding the contract event 0x2577121d3d8032bb6e71bfce50ad728ac89907cf63b1aa49fb5947f50bef9b6e.
//
// Solidity: event drawLog(uint256 tokenId, uint256 cycle)
func (_Store *StoreFilterer) ParseDrawLog(log types.Log) (*StoreDrawLog, error) {
	event := new(StoreDrawLog)
	if err := _Store.contract.UnpackLog(event, "drawLog", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StoreMixLogIterator is returned from FilterMixLog and is used to iterate over the raw logs and unpacked data for MixLog events raised by the Store contract.
type StoreMixLogIterator struct {
	Event *StoreMixLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreMixLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreMixLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreMixLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreMixLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreMixLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreMixLog represents a MixLog event raised by the Store contract.
type StoreMixLog struct {
	TokenId *big.Int
	Cycle   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterMixLog is a free log retrieval operation binding the contract event 0x797afa0720dddb483b94d13042d131c909284ccb822562fc89192bd7f4fdaa5b.
//
// Solidity: event mixLog(uint256 tokenId, uint256 cycle)
func (_Store *StoreFilterer) FilterMixLog(opts *bind.FilterOpts) (*StoreMixLogIterator, error) {

	logs, sub, err := _Store.contract.FilterLogs(opts, "mixLog")
	if err != nil {
		return nil, err
	}
	return &StoreMixLogIterator{contract: _Store.contract, event: "mixLog", logs: logs, sub: sub}, nil
}

// WatchMixLog is a free log subscription operation binding the contract event 0x797afa0720dddb483b94d13042d131c909284ccb822562fc89192bd7f4fdaa5b.
//
// Solidity: event mixLog(uint256 tokenId, uint256 cycle)
func (_Store *StoreFilterer) WatchMixLog(opts *bind.WatchOpts, sink chan<- *StoreMixLog) (event.Subscription, error) {

	logs, sub, err := _Store.contract.WatchLogs(opts, "mixLog")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreMixLog)
				if err := _Store.contract.UnpackLog(event, "mixLog", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMixLog is a log parse operation binding the contract event 0x797afa0720dddb483b94d13042d131c909284ccb822562fc89192bd7f4fdaa5b.
//
// Solidity: event mixLog(uint256 tokenId, uint256 cycle)
func (_Store *StoreFilterer) ParseMixLog(log types.Log) (*StoreMixLog, error) {
	event := new(StoreMixLog)
	if err := _Store.contract.UnpackLog(event, "mixLog", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
