// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package lock

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// LockConfig is an auto generated low-level Go binding around an user-defined struct.
type LockConfig struct {
	PlatformToken   common.Address
	NftToken        common.Address
	BlindBox        common.Address
	PeriodDuration  *big.Int
	RewardsDuration *big.Int
	LockDuration    *big.Int
	ITokenId        common.Address
}

// LockLockedBalanceResp is an auto generated low-level Go binding around an user-defined struct.
type LockLockedBalanceResp struct {
	Amount *big.Int
	Idx    *big.Int
	Lock   bool
}

// LockRewardBalance is an auto generated low-level Go binding around an user-defined struct.
type LockRewardBalance struct {
	Amount *big.Int
	Idx    *big.Int
}

// StoreMetaData contains all meta data concerning the Store contract.
var StoreMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platform_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_periodDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nft_token\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_blind_box\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_itokenId\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"rewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rewardToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ClaimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"internalType\":\"structLock.RewardBalance[]\",\"name\":\"claRewards\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetPeriodInd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"GetStakeAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"lock\",\"type\":\"bool\"}],\"internalType\":\"structLock.LockedBalanceResp[]\",\"name\":\"lockData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"LastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_NFT_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_NFT_REWARD_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QueryConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"contractWrappedToken\",\"name\":\"platform_token\",\"type\":\"address\"},{\"internalType\":\"contractnft\",\"name\":\"nft_token\",\"type\":\"address\"},{\"internalType\":\"contractBlindBox\",\"name\":\"blind_box\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"periodDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"iTokenId\",\"type\":\"address\"}],\"internalType\":\"structLock.Config\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"RewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalAllStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"WithdrawExpiredLocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"contractWrappedToken\",\"name\":\"platform_token\",\"type\":\"address\"},{\"internalType\":\"contractnft\",\"name\":\"nft_token\",\"type\":\"address\"},{\"internalType\":\"contractBlindBox\",\"name\":\"blind_box\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"periodDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"iTokenId\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"periodFinish\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockFinish\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenStored\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"modLeft\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistributeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6080604052600060016000509090553480156200001c5760006000fd5b50604051620049c0380380620049c0833981810160405281019062000042919062000589565b5b6000861115156200008b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000082906200084c565b60405180910390fd5b858510151515620000d3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000ca906200086f565b60405180910390fd5b8484101515156200011b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001129062000829565b60405180910390fd5b86600360005060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600360005060030160005081909090555084600360005060040160005081909090555083600360005060050160005081909090555082600360005060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360005060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360005060060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200027d6200035b60201b60201c565b600a600050819090905550426001600050819090905550600160005054600b6000506000600a60005054815260200190815260200160002060005060030160005081909090555060036000506004016000505460016000505401600b6000506000600a60005054815260200190815260200160002060005060000160005081909090555060036000506005016000505460016000505401600b6000506000600a6000505481526020019081526020016000206000506001016000508190909055506298968060026000508190909055505b50505050505050620009ab565b6000620003a06003600050600301600050546200038c60016000505442620003ae60201b620021591790919060201c565b6200040960201b62002b3e1790919060201c565b6001019050620003ab565b90565b6000620003fb83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152602001506200046460201b60201c565b905062000403565b92915050565b60006200045683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815260200150620004cb60201b60201c565b90506200045e565b92915050565b60008383111582901515620004b1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004a8919062000804565b60405180910390fd5b506000838503905080915050620004c456505b9392505050565b6000600083118290151562000518576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200050f919062000804565b60405180910390fd5b50600083858115156200052757fe5b049050809150506200053556505b939250505056620009aa565b600081519050620005528162000950565b5b92915050565b6000815190506200056a816200096e565b5b92915050565b60008151905062000582816200098c565b5b92915050565b600060006000600060006000600060e0888a031215620005a95760006000fd5b6000620005b98a828b0162000541565b9750506020620005cc8a828b0162000571565b9650506040620005df8a828b0162000571565b9550506060620005f28a828b0162000571565b9450506080620006058a828b0162000541565b93505060a0620006188a828b0162000559565b92505060c06200062b8a828b0162000541565b9150505b92959891949750929550565b6000620006488262000892565b6200065481856200089e565b93506200066681856020860162000906565b62000671816200093e565b84019150505b92915050565b60006200068c6041836200089e565b91507f4c6f636b3a205f6c6f636b4475726174696f6e2073686f756c6420677265617460008301527f6572206f7220657175616c207468656e205f726577617264734475726174696f60208301527f6e0000000000000000000000000000000000000000000000000000000000000060408301526060820190505b919050565b60006200071b602b836200089e565b91507f4c6f636b3a205f706572696f644475726174696f6e2073686f756c642067726560008301527f61746572207468656e203000000000000000000000000000000000000000000060208301526040820190505b919050565b6000620007846043836200089e565b91507f4c6f636b3a205f726577617264734475726174696f6e2073686f756c6420677260008301527f6561746572206f7220657175616c207468656e205f706572696f64447572617460208301527f696f6e000000000000000000000000000000000000000000000000000000000060408301526060820190505b919050565b600060208201905081810360008301526200082081846200063b565b90505b92915050565b6000602082019050818103600083015262000844816200067d565b90505b919050565b6000602082019050818103600083015262000867816200070c565b90505b919050565b600060208201905081810360008301526200088a8162000775565b90505b919050565b6000815190505b919050565b60008282526020820190505b92915050565b6000620008bd82620008da565b90505b919050565b6000620008d282620008da565b90505b919050565b600073ffffffffffffffffffffffffffffffffffffffff821690505b919050565b60008190505b919050565b60005b83811015620009275780820151818401525b60208101905062000909565b8381111562000937576000848401525b505b505050565b6000601f19601f83011690505b919050565b6200095b81620008b0565b811415156200096a5760006000fd5b5b50565b6200097981620008c5565b81141515620009885760006000fd5b5b50565b6200099781620008fb565b81141515620009a65760006000fd5b5b50565b5b61400580620009bb6000396000f3fe60806040523480156100115760006000fd5b50600436106101ae5760003560e01c806363c2a20a116100fa57806380ecdd8b11610098578063b933ceac11610072578063b933ceac14610501578063c5bd5c1814610531578063de5167961461054f578063f20908931461056d576101ae565b806380ecdd8b1461047f5780638e73064f146104b2578063aa33fedb146104d0576101ae565b80636bc9b561116100d45780636bc9b561146103ef57806378e979251461041f57806379502c551461043d5780637ee05a3e14610461576101ae565b806363c2a20a1461038257806363f31d2c146103b35780636b3f76fd146103d1576101ae565b80632f6041fe116101675780634b53863b116101415780634b53863b146102f857806351633a101461032857806351eeaa5e146103465780635bfac41f14610364576101ae565b80632f6041fe1461028657806330f3363c146102b75780633e3cc239146102c1576101ae565b80631be452a7146101b4578063227a473b146101d057806327e235e3146101ec5780632bc0647b1461021c5780632e78fb811461024c5780632f3603a71461026a576101ae565b60006000fd5b6101ce60048036038101906101c991906132cc565b61058b565b005b6101ea60048036038101906101e59190613276565b610983565b005b61020660048036038101906102019190613145565b6110af565b6040516102139190613bab565b60405180910390f35b61023660048036038101906102319190613276565b6110d3565b6040516102439190613bab565b60405180910390f35b6102546110f0565b6040516102619190613bab565b60405180910390f35b610284600480360381019061027f9190613276565b611109565b005b6102a0600480360381019061029b9190613145565b61135a565b6040516102ae929190613bc7565b60405180910390f35b6102bf6114d1565b005b6102db60048036038101906102d69190613276565b611877565b6040516102ef989796959493929190613c6f565b60405180910390f35b610312600480360381019061030d9190613276565b6118da565b60405161031f9190613bab565b60405180910390f35b610330611917565b60405161033d9190613bab565b60405180910390f35b61034e611a2d565b60405161035b9190613bab565b60405180910390f35b61036c611a32565b6040516103799190613bab565b60405180910390f35b61039c60048036038101906103979190613170565b611a3b565b6040516103aa929190613bf8565b60405180910390f35b6103bb611a88565b6040516103c89190613bab565b60405180910390f35b6103d9611a91565b6040516103e69190613bab565b60405180910390f35b61040960048036038101906104049190613170565b611a9a565b6040516104169190613bab565b60405180910390f35b610427611ac5565b6040516104349190613bab565b60405180910390f35b610445611ace565b60405161045897969594939291906139f4565b60405180910390f35b610469611b8a565b6040516104769190613bab565b60405180910390f35b61049960048036038101906104949190613145565b611b93565b6040516104a99493929190613c22565b60405180910390f35b6104ba611e85565b6040516104c79190613bab565b60405180910390f35b6104ea60048036038101906104e59190613170565b611e8e565b6040516104f8929190613bf8565b60405180910390f35b61051b60048036038101906105169190613170565b611edb565b6040516105289190613bab565b60405180910390f35b610539611f06565b6040516105469190613bab565b60405180910390f35b610557611f4a565b6040516105649190613bab565b60405180910390f35b610575611f57565b6040516105829190613b8f565b60405180910390f35b6105996114d163ffffffff16565b6000601060005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005090506000600f60005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005090506000600090506000838054905090508484805490501015610650578380549050945084505b6000811415610662575050505061097f565b6000846001830381548110151561067557fe5b906000526020600020906002020160005b506001016000505490506000600b60005060008381526020019081526020016000206000506001016000505490506000881480156106c75750858054905083145b80156106d35750428111155b156107ae578460000160005054935083506000856000016000508190909055506000600090505b8381101561075a57868181548110151561071057fe5b906000526020600020906002020160005b506001016000505492508250856001016000506000848152602001908152602001600020600050600090555b80806001019150506106fa565b50601060005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006107a99190612ec7565b610908565b60008890505b878110156109065786818154811015156107ca57fe5b906000526020600020906002020160005b506001016000505492508250600b600050600084815260200190815260200160002060005060010160005054915081504282111561081857610906565b610851878281548110151561082957fe5b906000526020600020906002020160005b5060000160005054866120fb90919063ffffffff16565b94508450610895878281548110151561086657fe5b906000526020600020906002020160005b5060000160005054876000016000505461215990919063ffffffff16565b8660000160005081909090555086818154811015156108b057fe5b906000526020600020906002020160005b600082016000506000905560018201600050600090555050856001016000506000848152602001908152602001600020600050600090555b80806001019150506107b4565b505b600084141561091c5750505050505061097f565b610934846014600050546120fb90919063ffffffff16565b6014600050819090905550610978600360005060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633866121b163ffffffff16565b5050505050505b5050565b6002600060005054141515156109ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c590613aea565b60405180910390fd5b600260006000508190909055503273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4290613b4d565b60405180910390fd5b610a6033600a600050546122eb63ffffffff16565b600081111515610aa5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9c90613b0b565b60405180910390fd5b6000600f60005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000509050610b088282600001600050546120fb90919063ffffffff16565b81600001600050819090905550610b4882826001016000506000600a600050548152602001908152602001600020600050546120fb90919063ffffffff16565b816001016000506000600a6000505481526020019081526020016000206000508190909055506000601060005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000509050600081805490509050600081118015610bfd57508160018203815481101515610bdc57fe5b906000526020600020906002020160005b5060010160005054600a60005054145b15610c7257610c3e848360018403815481101515610c1757fe5b906000526020600020906002020160005b50600001600050546120fb90919063ffffffff16565b8260018303815481101515610c4f57fe5b906000526020600020906002020160005b50600001600050819090905550610cdb565b816040518060400160405280868152602001600a60005054815260200150908060018154018082558091505060019003906000526020600020906002020160005b9091909190915060008201518160000160005090905560208201518160010160005090905550505b610d1284600b6000506000600a600050548152602001908152602001600020600050600501600050546120fb90919063ffffffff16565b600b6000506000600a600050548152602001908152602001600020600050600501600050819090905550610d54846012600050546120fb90919063ffffffff16565b6012600050819090905550610d99600360005060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633308761285463ffffffff16565b6000683635c9adc5dea0000085811515610daf57fe5b049050600081111561104b576014811115610dcb576014905080505b60606000600360005060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166330157fb96040518163ffffffff1660e01b815260040160006040518083038186803b158015610e3e5760006000fd5b505afa158015610e53573d600060003e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610e7c91906131f3565b915091506000600090505b83811015611047576000600360005060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630926e497600036336040518463ffffffff1660e01b8152600401610ef7939291906139c1565b602060405180830381600087803b158015610f125760006000fd5b505af1158015610f27573d600060003e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4b91906132a1565b905060008382811515610f5a57fe5b069050600360005060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd26c81833600160008986815181101515610fb457fe5b6020026020010151876040518663ffffffff1660e01b8152600401610fdd95949392919061390b565b600060405180830381600087803b158015610ff85760006000fd5b505af115801561100d573d600060003e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061103691906131af565b5050505b8080600101915050610e87565b5050505b3373ffffffffffffffffffffffffffffffffffffffff167f8f169816223f856d6f6a5945e3f7c520efe6c139d4152b6bb65e454babb2f2cb866040516110919190613bab565b60405180910390a2505050505b600160006000508190909055505b50565b600f6000506020528060005260406000206000915090508060000160005054905081565b60006110e48261299163ffffffff16565b90506110eb565b919050565b6000601460005054601260005054039050611106565b90565b600260006000505414151515611154576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114b90613aea565b60405180910390fd5b600260006000508190909055506111776000600a600050546122eb63ffffffff16565b6000811115156111bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b390613b2c565b60405180910390fd5b6111f6600360005060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633308461285463ffffffff16565b6000600b6000506000600a60005054815260200190815260200160002060005090506112328282600601600050546120fb90919063ffffffff16565b81600601600050819090905550600061125b42836000016000505461215990919063ffffffff16565b90506000611279836002016000505483612ac490919063ffffffff16565b9050611293846011600050546120fb90919063ffffffff16565b60116000508190909055506112ca83600701600050546112bc83876120fb90919063ffffffff16565b6120fb90919063ffffffff16565b935083506112e18285612b3e90919063ffffffff16565b836002016000508190909055506113018285612b9690919063ffffffff16565b836007016000508190909055507f509b6c3f0e03e3971fadcad84664ce9af518c57f864ef513e571b592dee4d9ee8460405161133d9190613bab565b60405180910390a15050505b600160006000508190909055505b50565b600060606000601060005060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000509050808054905067ffffffffffffffff811180156113c35760006000fd5b506040519080825280602002602001820160405280156113fd57816020015b6113ea612eec565b8152602001906001900390816113e25790505b50915081506000818054905090506000600090505b818110156114c8576000838281548110151561142a57fe5b906000526020600020906002020160005b5060010160005054905060006114578883612bee63ffffffff16565b905061146c81886120fb90919063ffffffff16565b9650865080868481518110151561147f57fe5b6020026020010151600001909081815260200150508186848151811015156114a357fe5b60200260200101516020019090818152602001505050505b8080600101915050611412565b5050505b915091565b60026000600050541415151561151c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151390613aea565b60405180910390fd5b600260006000508190909055506000601060005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005090506000818054905090506000600090505b818110156115d4576000838281548110151561159a57fe5b906000526020600020906002020160005b506001016000505490506115c533826122eb63ffffffff16565b505b8080600101915050611582565b506000600e60005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005090506000600d60005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005090506000600090508280549050935083506000841415611689575050505050611867565b6000600090505b8481101561175f57600084828154811015156116a857fe5b906000526020600020906002020160005b506001016000505490506116fc85838154811015156116d457fe5b906000526020600020906002020160005b5060000160005054846120fb90919063ffffffff16565b92508250848281548110151561170e57fe5b906000526020600020906002020160005b60008201600050600090556001820160005060009055505083600082815260200190815260200160002060005060009055505b8080600101915050611690565b848114156117b657600e60005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006117b59190612f09565b5b6117ce826013600050546120fb90919063ffffffff16565b6013600050819090905550611812600360005060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633846121b163ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f2ead7d650427e1b49175deda4434b2a0a65a543b49e012f8be34ecbc135c731a836040516118589190613bab565b60405180910390a25050505050505b600160006000508190909055505b565b600b6000506020528060005260406000206000915090508060000160005054908060010160005054908060020160005054908060030160005054908060040160005054908060050160005054908060060160005054908060070160005054905088565b600061190b42600b600050600085815260200190815260200160002060005060000160005054612d7463ffffffff16565b9050611912565b919050565b6000600061196d60036000506003016000505461195f6003600050600301600050546119516001600050544261215990919063ffffffff16565b612b3e90919063ffffffff16565b612ac490919063ffffffff16565b6001600050540190506000611986611f0663ffffffff16565b90506000600b600050600083815260200190815260200160002060005090506119bf8160050160005054856120fb90919063ffffffff16565b935083505b8281600001600050541180156119da5750600082115b15611a2657600b60005060008360019003935083815260200190815260200160002060005090508050611a1d8160050160005054856120fb90919063ffffffff16565b935083506119c4565b5050505b90565b601481565b600a6000505481565b600e60005060205281600052604060002060005081815481101515611a5c57fe5b906000526020600020906002020160005b91509150508060000160005054908060010160005054905082565b60126000505481565b60146000505481565b600c600050602052816000526040600020600050602052806000526040600020600091509150505481565b60016000505481565b60036000508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160005054908060040160005054908060050160005054908060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905087565b60136000505481565b60006000600060606000601060005060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000509050808054905067ffffffffffffffff81118015611c005760006000fd5b50604051908082528060200260200182016040528015611c3a57816020015b611c27612f2e565b815260200190600190039081611c1f5790505b50915081506000600090505b8180549050811015611e1f5760008282815481101515611c6257fe5b906000526020600020906002020160005b506001016000505490506000600b600050600083815260200190815260200160002060005060010160005054905042811115611d1457611ce28484815481101515611cba57fe5b906000526020600020906002020160005b5060000160005054876120fb90919063ffffffff16565b9550855060018584815181101515611cf657fe5b60200260200101516040019015159081151581526020015050611d7b565b611d4d8484815481101515611d2557fe5b906000526020600020906002020160005b5060000160005054886120fb90919063ffffffff16565b9650865060008584815181101515611d6157fe5b602002602001015160400190151590811515815260200150505b8383815481101515611d8957fe5b906000526020600020906002020160005b50600001600050548584815181101515611db057fe5b6020026020010151600001909081815260200150508383815481101515611dd357fe5b906000526020600020906002020160005b50600101600050548584815181101515611dfa57fe5b60200260200101516020019090818152602001505050505b8080600101915050611c46565b50600f60005060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060000160005054848484945094509450945050611e7e56505b9193509193565b60116000505481565b601060005060205281600052604060002060005081815481101515611eaf57fe5b906000526020600020906002020160005b91509150508060000160005054908060010160005054905082565b600d600050602052816000526040600020600050602052806000526040600020600091509150505481565b6000611f3d600360005060030160005054611f2f6001600050544261215990919063ffffffff16565b612b3e90919063ffffffff16565b6001019050611f47565b90565b683635c9adc5dea0000081565b611f5f612f54565b60036000506040518060e00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160005054815260200160048201600050548152602001600582016000505481526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001505090506120f8565b90565b600060008284019050838110151515612149576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161214090613aa8565b60405180910390fd5b8091505061215356505b92915050565b60006121a483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815260200150612d9263ffffffff16565b90506121ab565b92915050565b600060608473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040516024016121e4929190613997565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161223291906138f3565b6000604051808303816000865af19150503d806000811461226f576040519150601f19603f3d011682016040523d82523d6000602084013e612274565b606091505b50915091508180156122a257506000815114806122a15750808060200190518101906122a0919061324b565b5b5b15156122e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122da90613a87565b60405180910390fd5b50505b505050565b6122fa8161299163ffffffff16565b600b600050600083815260200190815260200160002060005060040160005081909090555061232e816118da63ffffffff16565b600b6000506000838152602001908152602001600020600050600301600050819090905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515612654576123998282612bee63ffffffff16565b600d60005060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060008381526020019081526020016000206000508190909055506000600e60005060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000509050600081805490509050600081118015612482575082826001830381548110151561246757fe5b906000526020600020906002020160005b5060010160005054145b1561251557600d60005060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060008481526020019081526020016000206000505482600183038154811015156124f257fe5b906000526020600020906002020160005b506000016000508190909055506125d2565b816040518060400160405280600d60005060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050600087815260200190815260200160002060005054815260200185815260200150908060018154018082558091505060019003906000526020600020906002020160005b9091909190915060008201518160000160005090905560208201518160010160005090905550505b600b600050600084815260200190815260200160002060005060040160005054600c60005060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050600085815260200190815260200160002060005081909090555050505b612662611f0663ffffffff16565b90508050600a600050548114151561284f5780600a600050819090905550600b6000506000828152602001908152602001600020600060008201600050600090556001820160005060009055600282016000506000905560038201600050600090556004820160005060009055600582016000506000905560068201600050600090556007820160005060009055505042600b600050600083815260200190815260200160002060005060030160005081909090555061278760036000506004016000505461277960036000506003016000505461276b60036000506003016000505461275d6001600050544261215990919063ffffffff16565b612b3e90919063ffffffff16565b612ac490919063ffffffff16565b6120fb90919063ffffffff16565b60016000505401600b60005060008381526020019081526020016000206000506000016000508190909055506128226003600050600501600050546128146003600050600301600050546128066003600050600301600050546127f86001600050544261215990919063ffffffff16565b612b3e90919063ffffffff16565b612ac490919063ffffffff16565b6120fb90919063ffffffff16565b60016000505401600b60005060008381526020019081526020016000206000506001016000508190909055505b5b5050565b600060608573ffffffffffffffffffffffffffffffffffffffff166323b872dd8686866040516024016128899392919061395f565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516128d791906138f3565b6000604051808303816000865af19150503d8060008114612914576040519150601f19603f3d011682016040523d82523d6000602084013e612919565b606091505b50915091508180156129475750600081511480612946575080806020019051810190612945919061324b565b5b5b1515612988576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161297f90613b6e565b60405180910390fd5b50505b50505050565b60006000600b600050600084815260200190815260200160002060005060050160005054905060008114156129e857600b600050600084815260200190815260200160002060005060040160005054915050612abf565b612ab6612a8882612a7a670de0b6b3a7640000612a6c600b60005060008a815260200190815260200160002060005060020160005054612a5e600b60005060008c815260200190815260200160002060005060030160005054612a508c6118da63ffffffff16565b61215990919063ffffffff16565b612ac490919063ffffffff16565b612ac490919063ffffffff16565b612b3e90919063ffffffff16565b600b6000506000868152602001908152602001600020600050600401600050546120fb90919063ffffffff16565b915050612abf56505b919050565b60006000831415612ad85760009050612b38565b60008284029050828482811515612aeb57fe5b04141515612b2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b2590613ac9565b60405180910390fd5b80915050612b3856505b92915050565b6000612b8983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815260200150612df563ffffffff16565b9050612b90565b92915050565b6000612be183836040518060400160405280601881526020017f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000815260200150612e6163ffffffff16565b9050612be8565b92915050565b60006000600f60005060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000509050612d65600d60005060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050600085815260200190815260200160002060005054612d57670de0b6b3a7640000612d49612d1f600c60005060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060008a815260200190815260200160002060005054612d118a61299163ffffffff16565b61215990919063ffffffff16565b8660010160005060008a815260200190815260200160002060005054612ac490919063ffffffff16565b612b3e90919063ffffffff16565b6120fb90919063ffffffff16565b915050612d6e56505b92915050565b6000818310612d835781612d85565b825b9050612d8c565b92915050565b60008383111582901515612ddc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dd39190613a64565b60405180910390fd5b506000838503905080915050612dee56505b9392505050565b60006000831182901515612e3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e369190613a64565b60405180910390fd5b5060008385811515612e4d57fe5b04905080915050612e5a56505b9392505050565b6000600083141582901515612eac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ea39190613a64565b60405180910390fd5b508284811515612eb857fe5b069050612ec0565b9392505050565b5080546000825560020290600052602060002090810190612ee89190612fec565b5b50565b604051806040016040528060008152602001600081526020015090565b5080546000825560020290600052602060002090810190612f2a9190613026565b5b50565b604051806060016040528060008152602001600081526020016000151581526020015090565b6040518060e00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020015090565b6130239190612ff6565b8082111561301f5760006000820160005060009055600182016000506000905550600201612ff6565b5090565b90565b61305d9190613030565b808211156130595760006000820160005060009055600182016000506000905550600201613030565b5090565b9056613fce565b60008135905061307381613f7d565b5b92915050565b600082601f830112151561308e5760006000fd5b81516130a161309c82613d1d565b613cee565b915081818352602084019350602081019050838560208402820111156130c75760006000fd5b60005b838110156130f857816130dd888261312f565b8452602084019350602083019250505b6001810190506130ca565b505050505b92915050565b60008151905061311281613f98565b5b92915050565b60008135905061312881613fb3565b5b92915050565b60008151905061313e81613fb3565b5b92915050565b6000602082840312156131585760006000fd5b600061316684828501613064565b9150505b92915050565b60006000604083850312156131855760006000fd5b600061319385828601613064565b92505060206131a485828601613119565b9150505b9250929050565b6000602082840312156131c25760006000fd5b600082015167ffffffffffffffff8111156131dd5760006000fd5b6131e98482850161307a565b9150505b92915050565b60006000604083850312156132085760006000fd5b600083015167ffffffffffffffff8111156132235760006000fd5b61322f8582860161307a565b92505060206132408582860161312f565b9150505b9250929050565b60006020828403121561325e5760006000fd5b600061326c84828501613103565b9150505b92915050565b6000602082840312156132895760006000fd5b600061329784828501613119565b9150505b92915050565b6000602082840312156132b45760006000fd5b60006132c28482850161312f565b9150505b92915050565b60006000604083850312156132e15760006000fd5b60006132ef85828601613119565b925050602061330085828601613119565b9150505b9250929050565b60006133178383613860565b6060830190505b92915050565b600061333083836138a3565b6040830190505b92915050565b61334681613e55565b82525b5050565b61335681613e09565b82525b5050565b61336681613e09565b82525b5050565b600061337882613d69565b6133828185613db5565b935061338d83613d47565b8060005b838110156133bf5781516133a5888261330b565b97506133b083613d99565b9250505b600181019050613391565b508593505050505b92915050565b60006133d882613d75565b6133e28185613dc7565b93506133ed83613d58565b8060005b8381101561341f5781516134058882613324565b975061341083613da7565b9250505b6001810190506133f1565b508593505050505b92915050565b61343681613e1c565b82525b5050565b60006134498385613dd9565b9350613456838584613f26565b61345f83613f6b565b840190505b9392505050565b600061347682613d81565b6134808185613deb565b9350613490818560208601613f36565b8084019150505b92915050565b6134a681613e68565b82525b5050565b6134b681613e68565b82525b5050565b6134c681613e8e565b82525b5050565b6134d681613e8e565b82525b5050565b6134e681613eb4565b82525b5050565b6134f681613eb4565b82525b5050565b61350681613eda565b82525b5050565b61351681613eed565b82525b5050565b600061352882613d8d565b6135328185613df7565b9350613542818560208601613f36565b61354b81613f6b565b84019150505b92915050565b6000613564601f83613df7565b91507f5472616e7366657248656c7065723a205452414e534645525f4641494c45440060008301526020820190505b919050565b60006135a5601b83613df7565b91507f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060008301526020820190505b919050565b60006135e6602183613df7565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f770000000000000000000000000000000000000000000000000000000000000060208301526040820190505b919050565b600061364d602183613df7565b91507f4c6f636b3a206e6f6e5265656e7472616e74207265656e7472616e742063616c60008301527f6c0000000000000000000000000000000000000000000000000000000000000060208301526040820190505b919050565b60006136b4601a83613df7565b91507f4c6f636b3a207374616b652043616e6e6f74207374616b65203000000000000060008301526020820190505b919050565b60006136f5601d83613df7565b91507f4c6f636b3a20526577617264546f6b656e2077726f6e6720617373657400000060008301526020820190505b919050565b6000613736601783613df7565b91507f4c6f636b204572723a72657175657374206661696c656400000000000000000060008301526020820190505b919050565b6000613777602483613df7565b91507f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f464160008301527f494c45440000000000000000000000000000000000000000000000000000000060208301526040820190505b919050565b60e0820160008201516137e760008501826134bd565b5060208201516137fa60208501826134dd565b50604082015161380d604085018261349d565b50606082015161382060608501826138d3565b50608082015161383360808501826138d3565b5060a082015161384660a08501826138d3565b5060c082015161385960c085018261334d565b50505b5050565b60608201600082015161387660008501826138d3565b50602082015161388960208501826138d3565b50604082015161389c604085018261342d565b50505b5050565b6040820160008201516138b960008501826138d3565b5060208201516138cc60208501826138d3565b50505b5050565b6138dc81613e4a565b82525b5050565b6138ec81613e4a565b82525b5050565b60006138ff828461346b565b91508190505b92915050565b600060a082019050613920600083018861333d565b61392d602083018761350d565b61393a60408301866134fd565b61394760608301856138e3565b61395460808301846138e3565b5b9695505050505050565b6000606082019050613974600083018661335d565b613981602083018561335d565b61398e60408301846138e3565b5b949350505050565b60006040820190506139ac600083018561335d565b6139b960208301846138e3565b5b9392505050565b600060408201905081810360008301526139dc81858761343d565b90506139eb602083018461333d565b5b949350505050565b600060e082019050613a09600083018a6134cd565b613a1660208301896134ed565b613a2360408301886134ad565b613a3060608301876138e3565b613a3d60808301866138e3565b613a4a60a08301856138e3565b613a5760c083018461335d565b5b98975050505050505050565b60006020820190508181036000830152613a7e818461351d565b90505b92915050565b60006020820190508181036000830152613aa081613557565b90505b919050565b60006020820190508181036000830152613ac181613598565b90505b919050565b60006020820190508181036000830152613ae2816135d9565b90505b919050565b60006020820190508181036000830152613b0381613640565b90505b919050565b60006020820190508181036000830152613b24816136a7565b90505b919050565b60006020820190508181036000830152613b45816136e8565b90505b919050565b60006020820190508181036000830152613b6681613729565b90505b919050565b60006020820190508181036000830152613b878161376a565b90505b919050565b600060e082019050613ba460008301846137d1565b5b92915050565b6000602082019050613bc060008301846138e3565b5b92915050565b6000604082019050613bdc60008301856138e3565b8181036020830152613bee81846133cd565b90505b9392505050565b6000604082019050613c0d60008301856138e3565b613c1a60208301846138e3565b5b9392505050565b6000608082019050613c3760008301876138e3565b613c4460208301866138e3565b613c5160408301856138e3565b8181036060830152613c63818461336d565b90505b95945050505050565b600061010082019050613c85600083018b6138e3565b613c92602083018a6138e3565b613c9f60408301896138e3565b613cac60608301886138e3565b613cb960808301876138e3565b613cc660a08301866138e3565b613cd360c08301856138e3565b613ce060e08301846138e3565b5b9998505050505050505050565b6000604051905081810181811067ffffffffffffffff82111715613d125760006000fd5b80604052505b919050565b600067ffffffffffffffff821115613d355760006000fd5b6020820290506020810190505b919050565b60008190506020820190505b919050565b60008190506020820190505b919050565b6000815190505b919050565b6000815190505b919050565b6000815190505b919050565b6000815190505b919050565b60006020820190505b919050565b60006020820190505b919050565b60008282526020820190505b92915050565b60008282526020820190505b92915050565b60008282526020820190505b92915050565b60008190505b92915050565b60008282526020820190505b92915050565b6000613e1482613e29565b90505b919050565b600081151590505b919050565b600073ffffffffffffffffffffffffffffffffffffffff821690505b919050565b60008190505b919050565b6000613e6082613f00565b90505b919050565b6000613e7382613e7b565b90505b919050565b6000613e8682613e29565b90505b919050565b6000613e9982613ea1565b90505b919050565b6000613eac82613e29565b90505b919050565b6000613ebf82613ec7565b90505b919050565b6000613ed282613e29565b90505b919050565b6000613ee582613e4a565b90505b919050565b6000613ef882613e4a565b90505b919050565b6000613f0b82613f13565b90505b919050565b6000613f1e82613e29565b90505b919050565b828183376000838301525b505050565b60005b83811015613f555780820151818401525b602081019050613f39565b83811115613f64576000848401525b505b505050565b6000601f19601f83011690505b919050565b613f8681613e09565b81141515613f945760006000fd5b5b50565b613fa181613e1c565b81141515613faf5760006000fd5b5b50565b613fbc81613e4a565b81141515613fca5760006000fd5b5b50565bfea264697066735822122032ca90ca6fbaacb4700a33c89d86be9bacf3b1531d10223db0ddfd8bb49fd62064736f6c63430006050033",
}

// StoreABI is the input ABI used to generate the binding from.
// Deprecated: Use StoreMetaData.ABI instead.
var StoreABI = StoreMetaData.ABI

// StoreBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StoreMetaData.Bin instead.
var StoreBin = StoreMetaData.Bin

// DeployStore deploys a new Ethereum contract, binding an instance of Store to it.
func DeployStore(auth *bind.TransactOpts, backend bind.ContractBackend, _platform_token common.Address, _periodDuration *big.Int, _rewardsDuration *big.Int, _lockDuration *big.Int, _nft_token common.Address, _blind_box common.Address, _itokenId common.Address) (common.Address, *types.Transaction, *Store, error) {
	parsed, err := StoreMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StoreBin), backend, _platform_token, _periodDuration, _rewardsDuration, _lockDuration, _nft_token, _blind_box, _itokenId)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Store{StoreCaller: StoreCaller{contract: contract}, StoreTransactor: StoreTransactor{contract: contract}, StoreFilterer: StoreFilterer{contract: contract}}, nil
}

// Store is an auto generated Go binding around an Ethereum contract.
type Store struct {
	StoreCaller     // Read-only binding to the contract
	StoreTransactor // Write-only binding to the contract
	StoreFilterer   // Log filterer for contract events
}

// StoreCaller is an auto generated read-only Go binding around an Ethereum contract.
type StoreCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoreTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StoreTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoreFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StoreFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoreSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StoreSession struct {
	Contract     *Store            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StoreCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StoreCallerSession struct {
	Contract *StoreCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// StoreTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StoreTransactorSession struct {
	Contract     *StoreTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StoreRaw is an auto generated low-level Go binding around an Ethereum contract.
type StoreRaw struct {
	Contract *Store // Generic contract binding to access the raw methods on
}

// StoreCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StoreCallerRaw struct {
	Contract *StoreCaller // Generic read-only contract binding to access the raw methods on
}

// StoreTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StoreTransactorRaw struct {
	Contract *StoreTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStore creates a new instance of Store, bound to a specific deployed contract.
func NewStore(address common.Address, backend bind.ContractBackend) (*Store, error) {
	contract, err := bindStore(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Store{StoreCaller: StoreCaller{contract: contract}, StoreTransactor: StoreTransactor{contract: contract}, StoreFilterer: StoreFilterer{contract: contract}}, nil
}

// NewStoreCaller creates a new read-only instance of Store, bound to a specific deployed contract.
func NewStoreCaller(address common.Address, caller bind.ContractCaller) (*StoreCaller, error) {
	contract, err := bindStore(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StoreCaller{contract: contract}, nil
}

// NewStoreTransactor creates a new write-only instance of Store, bound to a specific deployed contract.
func NewStoreTransactor(address common.Address, transactor bind.ContractTransactor) (*StoreTransactor, error) {
	contract, err := bindStore(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StoreTransactor{contract: contract}, nil
}

// NewStoreFilterer creates a new log filterer instance of Store, bound to a specific deployed contract.
func NewStoreFilterer(address common.Address, filterer bind.ContractFilterer) (*StoreFilterer, error) {
	contract, err := bindStore(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StoreFilterer{contract: contract}, nil
}

// bindStore binds a generic wrapper to an already deployed contract.
func bindStore(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StoreABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Store *StoreRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Store.Contract.StoreCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Store *StoreRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Store.Contract.StoreTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Store *StoreRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Store.Contract.StoreTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Store *StoreCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Store.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Store *StoreTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Store.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Store *StoreTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Store.Contract.contract.Transact(opts, method, params...)
}

// ClaimableRewards is a free data retrieval call binding the contract method 0x2f6041fe.
//
// Solidity: function ClaimableRewards(address user) view returns(uint256 total, (uint256,uint256)[] claRewards)
func (_Store *StoreCaller) ClaimableRewards(opts *bind.CallOpts, user common.Address) (struct {
	Total      *big.Int
	ClaRewards []LockRewardBalance
}, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "ClaimableRewards", user)

	outstruct := new(struct {
		Total      *big.Int
		ClaRewards []LockRewardBalance
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Total = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.ClaRewards = *abi.ConvertType(out[1], new([]LockRewardBalance)).(*[]LockRewardBalance)

	return *outstruct, err

}

// ClaimableRewards is a free data retrieval call binding the contract method 0x2f6041fe.
//
// Solidity: function ClaimableRewards(address user) view returns(uint256 total, (uint256,uint256)[] claRewards)
func (_Store *StoreSession) ClaimableRewards(user common.Address) (struct {
	Total      *big.Int
	ClaRewards []LockRewardBalance
}, error) {
	return _Store.Contract.ClaimableRewards(&_Store.CallOpts, user)
}

// ClaimableRewards is a free data retrieval call binding the contract method 0x2f6041fe.
//
// Solidity: function ClaimableRewards(address user) view returns(uint256 total, (uint256,uint256)[] claRewards)
func (_Store *StoreCallerSession) ClaimableRewards(user common.Address) (struct {
	Total      *big.Int
	ClaRewards []LockRewardBalance
}, error) {
	return _Store.Contract.ClaimableRewards(&_Store.CallOpts, user)
}

// GetPeriodInd is a free data retrieval call binding the contract method 0xc5bd5c18.
//
// Solidity: function GetPeriodInd() view returns(uint256)
func (_Store *StoreCaller) GetPeriodInd(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "GetPeriodInd")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPeriodInd is a free data retrieval call binding the contract method 0xc5bd5c18.
//
// Solidity: function GetPeriodInd() view returns(uint256)
func (_Store *StoreSession) GetPeriodInd() (*big.Int, error) {
	return _Store.Contract.GetPeriodInd(&_Store.CallOpts)
}

// GetPeriodInd is a free data retrieval call binding the contract method 0xc5bd5c18.
//
// Solidity: function GetPeriodInd() view returns(uint256)
func (_Store *StoreCallerSession) GetPeriodInd() (*big.Int, error) {
	return _Store.Contract.GetPeriodInd(&_Store.CallOpts)
}

// GetStakeAmounts is a free data retrieval call binding the contract method 0x80ecdd8b.
//
// Solidity: function GetStakeAmounts(address user) view returns(uint256 total, uint256 unlockable, uint256 locked, (uint256,uint256,bool)[] lockData)
func (_Store *StoreCaller) GetStakeAmounts(opts *bind.CallOpts, user common.Address) (struct {
	Total      *big.Int
	Unlockable *big.Int
	Locked     *big.Int
	LockData   []LockLockedBalanceResp
}, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "GetStakeAmounts", user)

	outstruct := new(struct {
		Total      *big.Int
		Unlockable *big.Int
		Locked     *big.Int
		LockData   []LockLockedBalanceResp
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Total = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Unlockable = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Locked = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.LockData = *abi.ConvertType(out[3], new([]LockLockedBalanceResp)).(*[]LockLockedBalanceResp)

	return *outstruct, err

}

// GetStakeAmounts is a free data retrieval call binding the contract method 0x80ecdd8b.
//
// Solidity: function GetStakeAmounts(address user) view returns(uint256 total, uint256 unlockable, uint256 locked, (uint256,uint256,bool)[] lockData)
func (_Store *StoreSession) GetStakeAmounts(user common.Address) (struct {
	Total      *big.Int
	Unlockable *big.Int
	Locked     *big.Int
	LockData   []LockLockedBalanceResp
}, error) {
	return _Store.Contract.GetStakeAmounts(&_Store.CallOpts, user)
}

// GetStakeAmounts is a free data retrieval call binding the contract method 0x80ecdd8b.
//
// Solidity: function GetStakeAmounts(address user) view returns(uint256 total, uint256 unlockable, uint256 locked, (uint256,uint256,bool)[] lockData)
func (_Store *StoreCallerSession) GetStakeAmounts(user common.Address) (struct {
	Total      *big.Int
	Unlockable *big.Int
	Locked     *big.Int
	LockData   []LockLockedBalanceResp
}, error) {
	return _Store.Contract.GetStakeAmounts(&_Store.CallOpts, user)
}

// LastTimeRewardApplicable is a free data retrieval call binding the contract method 0x4b53863b.
//
// Solidity: function LastTimeRewardApplicable(uint256 idx) view returns(uint256)
func (_Store *StoreCaller) LastTimeRewardApplicable(opts *bind.CallOpts, idx *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "LastTimeRewardApplicable", idx)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastTimeRewardApplicable is a free data retrieval call binding the contract method 0x4b53863b.
//
// Solidity: function LastTimeRewardApplicable(uint256 idx) view returns(uint256)
func (_Store *StoreSession) LastTimeRewardApplicable(idx *big.Int) (*big.Int, error) {
	return _Store.Contract.LastTimeRewardApplicable(&_Store.CallOpts, idx)
}

// LastTimeRewardApplicable is a free data retrieval call binding the contract method 0x4b53863b.
//
// Solidity: function LastTimeRewardApplicable(uint256 idx) view returns(uint256)
func (_Store *StoreCallerSession) LastTimeRewardApplicable(idx *big.Int) (*big.Int, error) {
	return _Store.Contract.LastTimeRewardApplicable(&_Store.CallOpts, idx)
}

// MAXNFTREWARD is a free data retrieval call binding the contract method 0x51eeaa5e.
//
// Solidity: function MAX_NFT_REWARD() view returns(uint256)
func (_Store *StoreCaller) MAXNFTREWARD(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "MAX_NFT_REWARD")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXNFTREWARD is a free data retrieval call binding the contract method 0x51eeaa5e.
//
// Solidity: function MAX_NFT_REWARD() view returns(uint256)
func (_Store *StoreSession) MAXNFTREWARD() (*big.Int, error) {
	return _Store.Contract.MAXNFTREWARD(&_Store.CallOpts)
}

// MAXNFTREWARD is a free data retrieval call binding the contract method 0x51eeaa5e.
//
// Solidity: function MAX_NFT_REWARD() view returns(uint256)
func (_Store *StoreCallerSession) MAXNFTREWARD() (*big.Int, error) {
	return _Store.Contract.MAXNFTREWARD(&_Store.CallOpts)
}

// ONENFTREWARDAMOUNT is a free data retrieval call binding the contract method 0xde516796.
//
// Solidity: function ONE_NFT_REWARD_AMOUNT() view returns(uint256)
func (_Store *StoreCaller) ONENFTREWARDAMOUNT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "ONE_NFT_REWARD_AMOUNT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ONENFTREWARDAMOUNT is a free data retrieval call binding the contract method 0xde516796.
//
// Solidity: function ONE_NFT_REWARD_AMOUNT() view returns(uint256)
func (_Store *StoreSession) ONENFTREWARDAMOUNT() (*big.Int, error) {
	return _Store.Contract.ONENFTREWARDAMOUNT(&_Store.CallOpts)
}

// ONENFTREWARDAMOUNT is a free data retrieval call binding the contract method 0xde516796.
//
// Solidity: function ONE_NFT_REWARD_AMOUNT() view returns(uint256)
func (_Store *StoreCallerSession) ONENFTREWARDAMOUNT() (*big.Int, error) {
	return _Store.Contract.ONENFTREWARDAMOUNT(&_Store.CallOpts)
}

// QueryConfig is a free data retrieval call binding the contract method 0xf2090893.
//
// Solidity: function QueryConfig() view returns((address,address,address,uint256,uint256,uint256,address))
func (_Store *StoreCaller) QueryConfig(opts *bind.CallOpts) (LockConfig, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "QueryConfig")

	if err != nil {
		return *new(LockConfig), err
	}

	out0 := *abi.ConvertType(out[0], new(LockConfig)).(*LockConfig)

	return out0, err

}

// QueryConfig is a free data retrieval call binding the contract method 0xf2090893.
//
// Solidity: function QueryConfig() view returns((address,address,address,uint256,uint256,uint256,address))
func (_Store *StoreSession) QueryConfig() (LockConfig, error) {
	return _Store.Contract.QueryConfig(&_Store.CallOpts)
}

// QueryConfig is a free data retrieval call binding the contract method 0xf2090893.
//
// Solidity: function QueryConfig() view returns((address,address,address,uint256,uint256,uint256,address))
func (_Store *StoreCallerSession) QueryConfig() (LockConfig, error) {
	return _Store.Contract.QueryConfig(&_Store.CallOpts)
}

// RewardPerToken is a free data retrieval call binding the contract method 0x2bc0647b.
//
// Solidity: function RewardPerToken(uint256 idx) view returns(uint256)
func (_Store *StoreCaller) RewardPerToken(opts *bind.CallOpts, idx *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "RewardPerToken", idx)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RewardPerToken is a free data retrieval call binding the contract method 0x2bc0647b.
//
// Solidity: function RewardPerToken(uint256 idx) view returns(uint256)
func (_Store *StoreSession) RewardPerToken(idx *big.Int) (*big.Int, error) {
	return _Store.Contract.RewardPerToken(&_Store.CallOpts, idx)
}

// RewardPerToken is a free data retrieval call binding the contract method 0x2bc0647b.
//
// Solidity: function RewardPerToken(uint256 idx) view returns(uint256)
func (_Store *StoreCallerSession) RewardPerToken(idx *big.Int) (*big.Int, error) {
	return _Store.Contract.RewardPerToken(&_Store.CallOpts, idx)
}

// TotalAllStake is a free data retrieval call binding the contract method 0x2e78fb81.
//
// Solidity: function TotalAllStake() view returns(uint256)
func (_Store *StoreCaller) TotalAllStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "TotalAllStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalAllStake is a free data retrieval call binding the contract method 0x2e78fb81.
//
// Solidity: function TotalAllStake() view returns(uint256)
func (_Store *StoreSession) TotalAllStake() (*big.Int, error) {
	return _Store.Contract.TotalAllStake(&_Store.CallOpts)
}

// TotalAllStake is a free data retrieval call binding the contract method 0x2e78fb81.
//
// Solidity: function TotalAllStake() view returns(uint256)
func (_Store *StoreCallerSession) TotalAllStake() (*big.Int, error) {
	return _Store.Contract.TotalAllStake(&_Store.CallOpts)
}

// TotalStake is a free data retrieval call binding the contract method 0x51633a10.
//
// Solidity: function TotalStake() view returns(uint256 total)
func (_Store *StoreCaller) TotalStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "TotalStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalStake is a free data retrieval call binding the contract method 0x51633a10.
//
// Solidity: function TotalStake() view returns(uint256 total)
func (_Store *StoreSession) TotalStake() (*big.Int, error) {
	return _Store.Contract.TotalStake(&_Store.CallOpts)
}

// TotalStake is a free data retrieval call binding the contract method 0x51633a10.
//
// Solidity: function TotalStake() view returns(uint256 total)
func (_Store *StoreCallerSession) TotalStake() (*big.Int, error) {
	return _Store.Contract.TotalStake(&_Store.CallOpts)
}

// Balances is a free data retrieval call binding the contract method 0x27e235e3.
//
// Solidity: function balances(address ) view returns(uint256 total)
func (_Store *StoreCaller) Balances(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "balances", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Balances is a free data retrieval call binding the contract method 0x27e235e3.
//
// Solidity: function balances(address ) view returns(uint256 total)
func (_Store *StoreSession) Balances(arg0 common.Address) (*big.Int, error) {
	return _Store.Contract.Balances(&_Store.CallOpts, arg0)
}

// Balances is a free data retrieval call binding the contract method 0x27e235e3.
//
// Solidity: function balances(address ) view returns(uint256 total)
func (_Store *StoreCallerSession) Balances(arg0 common.Address) (*big.Int, error) {
	return _Store.Contract.Balances(&_Store.CallOpts, arg0)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(address platform_token, address nft_token, address blind_box, uint256 periodDuration, uint256 rewardsDuration, uint256 lockDuration, address iTokenId)
func (_Store *StoreCaller) Config(opts *bind.CallOpts) (struct {
	PlatformToken   common.Address
	NftToken        common.Address
	BlindBox        common.Address
	PeriodDuration  *big.Int
	RewardsDuration *big.Int
	LockDuration    *big.Int
	ITokenId        common.Address
}, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "config")

	outstruct := new(struct {
		PlatformToken   common.Address
		NftToken        common.Address
		BlindBox        common.Address
		PeriodDuration  *big.Int
		RewardsDuration *big.Int
		LockDuration    *big.Int
		ITokenId        common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.PlatformToken = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.NftToken = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.BlindBox = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.PeriodDuration = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.RewardsDuration = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.LockDuration = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.ITokenId = *abi.ConvertType(out[6], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(address platform_token, address nft_token, address blind_box, uint256 periodDuration, uint256 rewardsDuration, uint256 lockDuration, address iTokenId)
func (_Store *StoreSession) Config() (struct {
	PlatformToken   common.Address
	NftToken        common.Address
	BlindBox        common.Address
	PeriodDuration  *big.Int
	RewardsDuration *big.Int
	LockDuration    *big.Int
	ITokenId        common.Address
}, error) {
	return _Store.Contract.Config(&_Store.CallOpts)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(address platform_token, address nft_token, address blind_box, uint256 periodDuration, uint256 rewardsDuration, uint256 lockDuration, address iTokenId)
func (_Store *StoreCallerSession) Config() (struct {
	PlatformToken   common.Address
	NftToken        common.Address
	BlindBox        common.Address
	PeriodDuration  *big.Int
	RewardsDuration *big.Int
	LockDuration    *big.Int
	ITokenId        common.Address
}, error) {
	return _Store.Contract.Config(&_Store.CallOpts)
}

// CurrentIdx is a free data retrieval call binding the contract method 0x5bfac41f.
//
// Solidity: function currentIdx() view returns(uint256)
func (_Store *StoreCaller) CurrentIdx(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "currentIdx")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentIdx is a free data retrieval call binding the contract method 0x5bfac41f.
//
// Solidity: function currentIdx() view returns(uint256)
func (_Store *StoreSession) CurrentIdx() (*big.Int, error) {
	return _Store.Contract.CurrentIdx(&_Store.CallOpts)
}

// CurrentIdx is a free data retrieval call binding the contract method 0x5bfac41f.
//
// Solidity: function currentIdx() view returns(uint256)
func (_Store *StoreCallerSession) CurrentIdx() (*big.Int, error) {
	return _Store.Contract.CurrentIdx(&_Store.CallOpts)
}

// RewardData is a free data retrieval call binding the contract method 0x3e3cc239.
//
// Solidity: function rewardData(uint256 ) view returns(uint256 periodFinish, uint256 lockFinish, uint256 rewardRate, uint256 lastUpdateTime, uint256 rewardPerTokenStored, uint256 collateralAmount, uint256 rewardAmount, uint256 modLeft)
func (_Store *StoreCaller) RewardData(opts *bind.CallOpts, arg0 *big.Int) (struct {
	PeriodFinish         *big.Int
	LockFinish           *big.Int
	RewardRate           *big.Int
	LastUpdateTime       *big.Int
	RewardPerTokenStored *big.Int
	CollateralAmount     *big.Int
	RewardAmount         *big.Int
	ModLeft              *big.Int
}, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "rewardData", arg0)

	outstruct := new(struct {
		PeriodFinish         *big.Int
		LockFinish           *big.Int
		RewardRate           *big.Int
		LastUpdateTime       *big.Int
		RewardPerTokenStored *big.Int
		CollateralAmount     *big.Int
		RewardAmount         *big.Int
		ModLeft              *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.PeriodFinish = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.LockFinish = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.RewardRate = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.LastUpdateTime = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.RewardPerTokenStored = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.CollateralAmount = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.RewardAmount = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)
	outstruct.ModLeft = *abi.ConvertType(out[7], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// RewardData is a free data retrieval call binding the contract method 0x3e3cc239.
//
// Solidity: function rewardData(uint256 ) view returns(uint256 periodFinish, uint256 lockFinish, uint256 rewardRate, uint256 lastUpdateTime, uint256 rewardPerTokenStored, uint256 collateralAmount, uint256 rewardAmount, uint256 modLeft)
func (_Store *StoreSession) RewardData(arg0 *big.Int) (struct {
	PeriodFinish         *big.Int
	LockFinish           *big.Int
	RewardRate           *big.Int
	LastUpdateTime       *big.Int
	RewardPerTokenStored *big.Int
	CollateralAmount     *big.Int
	RewardAmount         *big.Int
	ModLeft              *big.Int
}, error) {
	return _Store.Contract.RewardData(&_Store.CallOpts, arg0)
}

// RewardData is a free data retrieval call binding the contract method 0x3e3cc239.
//
// Solidity: function rewardData(uint256 ) view returns(uint256 periodFinish, uint256 lockFinish, uint256 rewardRate, uint256 lastUpdateTime, uint256 rewardPerTokenStored, uint256 collateralAmount, uint256 rewardAmount, uint256 modLeft)
func (_Store *StoreCallerSession) RewardData(arg0 *big.Int) (struct {
	PeriodFinish         *big.Int
	LockFinish           *big.Int
	RewardRate           *big.Int
	LastUpdateTime       *big.Int
	RewardPerTokenStored *big.Int
	CollateralAmount     *big.Int
	RewardAmount         *big.Int
	ModLeft              *big.Int
}, error) {
	return _Store.Contract.RewardData(&_Store.CallOpts, arg0)
}

// Rewards is a free data retrieval call binding the contract method 0xb933ceac.
//
// Solidity: function rewards(address , uint256 ) view returns(uint256)
func (_Store *StoreCaller) Rewards(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "rewards", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Rewards is a free data retrieval call binding the contract method 0xb933ceac.
//
// Solidity: function rewards(address , uint256 ) view returns(uint256)
func (_Store *StoreSession) Rewards(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _Store.Contract.Rewards(&_Store.CallOpts, arg0, arg1)
}

// Rewards is a free data retrieval call binding the contract method 0xb933ceac.
//
// Solidity: function rewards(address , uint256 ) view returns(uint256)
func (_Store *StoreCallerSession) Rewards(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _Store.Contract.Rewards(&_Store.CallOpts, arg0, arg1)
}

// StartTime is a free data retrieval call binding the contract method 0x78e97925.
//
// Solidity: function startTime() view returns(uint256)
func (_Store *StoreCaller) StartTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "startTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StartTime is a free data retrieval call binding the contract method 0x78e97925.
//
// Solidity: function startTime() view returns(uint256)
func (_Store *StoreSession) StartTime() (*big.Int, error) {
	return _Store.Contract.StartTime(&_Store.CallOpts)
}

// StartTime is a free data retrieval call binding the contract method 0x78e97925.
//
// Solidity: function startTime() view returns(uint256)
func (_Store *StoreCallerSession) StartTime() (*big.Int, error) {
	return _Store.Contract.StartTime(&_Store.CallOpts)
}

// TotalCollateralAmount is a free data retrieval call binding the contract method 0x63f31d2c.
//
// Solidity: function totalCollateralAmount() view returns(uint256)
func (_Store *StoreCaller) TotalCollateralAmount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "totalCollateralAmount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalCollateralAmount is a free data retrieval call binding the contract method 0x63f31d2c.
//
// Solidity: function totalCollateralAmount() view returns(uint256)
func (_Store *StoreSession) TotalCollateralAmount() (*big.Int, error) {
	return _Store.Contract.TotalCollateralAmount(&_Store.CallOpts)
}

// TotalCollateralAmount is a free data retrieval call binding the contract method 0x63f31d2c.
//
// Solidity: function totalCollateralAmount() view returns(uint256)
func (_Store *StoreCallerSession) TotalCollateralAmount() (*big.Int, error) {
	return _Store.Contract.TotalCollateralAmount(&_Store.CallOpts)
}

// TotalDistributeAmount is a free data retrieval call binding the contract method 0x7ee05a3e.
//
// Solidity: function totalDistributeAmount() view returns(uint256)
func (_Store *StoreCaller) TotalDistributeAmount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "totalDistributeAmount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalDistributeAmount is a free data retrieval call binding the contract method 0x7ee05a3e.
//
// Solidity: function totalDistributeAmount() view returns(uint256)
func (_Store *StoreSession) TotalDistributeAmount() (*big.Int, error) {
	return _Store.Contract.TotalDistributeAmount(&_Store.CallOpts)
}

// TotalDistributeAmount is a free data retrieval call binding the contract method 0x7ee05a3e.
//
// Solidity: function totalDistributeAmount() view returns(uint256)
func (_Store *StoreCallerSession) TotalDistributeAmount() (*big.Int, error) {
	return _Store.Contract.TotalDistributeAmount(&_Store.CallOpts)
}

// TotalRewardAmount is a free data retrieval call binding the contract method 0x8e73064f.
//
// Solidity: function totalRewardAmount() view returns(uint256)
func (_Store *StoreCaller) TotalRewardAmount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "totalRewardAmount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalRewardAmount is a free data retrieval call binding the contract method 0x8e73064f.
//
// Solidity: function totalRewardAmount() view returns(uint256)
func (_Store *StoreSession) TotalRewardAmount() (*big.Int, error) {
	return _Store.Contract.TotalRewardAmount(&_Store.CallOpts)
}

// TotalRewardAmount is a free data retrieval call binding the contract method 0x8e73064f.
//
// Solidity: function totalRewardAmount() view returns(uint256)
func (_Store *StoreCallerSession) TotalRewardAmount() (*big.Int, error) {
	return _Store.Contract.TotalRewardAmount(&_Store.CallOpts)
}

// TotalWithdrawCollateralAmount is a free data retrieval call binding the contract method 0x6b3f76fd.
//
// Solidity: function totalWithdrawCollateralAmount() view returns(uint256)
func (_Store *StoreCaller) TotalWithdrawCollateralAmount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "totalWithdrawCollateralAmount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalWithdrawCollateralAmount is a free data retrieval call binding the contract method 0x6b3f76fd.
//
// Solidity: function totalWithdrawCollateralAmount() view returns(uint256)
func (_Store *StoreSession) TotalWithdrawCollateralAmount() (*big.Int, error) {
	return _Store.Contract.TotalWithdrawCollateralAmount(&_Store.CallOpts)
}

// TotalWithdrawCollateralAmount is a free data retrieval call binding the contract method 0x6b3f76fd.
//
// Solidity: function totalWithdrawCollateralAmount() view returns(uint256)
func (_Store *StoreCallerSession) TotalWithdrawCollateralAmount() (*big.Int, error) {
	return _Store.Contract.TotalWithdrawCollateralAmount(&_Store.CallOpts)
}

// UserLocks is a free data retrieval call binding the contract method 0xaa33fedb.
//
// Solidity: function userLocks(address , uint256 ) view returns(uint256 amount, uint256 idx)
func (_Store *StoreCaller) UserLocks(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (struct {
	Amount *big.Int
	Idx    *big.Int
}, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "userLocks", arg0, arg1)

	outstruct := new(struct {
		Amount *big.Int
		Idx    *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Amount = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Idx = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// UserLocks is a free data retrieval call binding the contract method 0xaa33fedb.
//
// Solidity: function userLocks(address , uint256 ) view returns(uint256 amount, uint256 idx)
func (_Store *StoreSession) UserLocks(arg0 common.Address, arg1 *big.Int) (struct {
	Amount *big.Int
	Idx    *big.Int
}, error) {
	return _Store.Contract.UserLocks(&_Store.CallOpts, arg0, arg1)
}

// UserLocks is a free data retrieval call binding the contract method 0xaa33fedb.
//
// Solidity: function userLocks(address , uint256 ) view returns(uint256 amount, uint256 idx)
func (_Store *StoreCallerSession) UserLocks(arg0 common.Address, arg1 *big.Int) (struct {
	Amount *big.Int
	Idx    *big.Int
}, error) {
	return _Store.Contract.UserLocks(&_Store.CallOpts, arg0, arg1)
}

// UserRewardPerTokenPaid is a free data retrieval call binding the contract method 0x6bc9b561.
//
// Solidity: function userRewardPerTokenPaid(address , uint256 ) view returns(uint256)
func (_Store *StoreCaller) UserRewardPerTokenPaid(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "userRewardPerTokenPaid", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UserRewardPerTokenPaid is a free data retrieval call binding the contract method 0x6bc9b561.
//
// Solidity: function userRewardPerTokenPaid(address , uint256 ) view returns(uint256)
func (_Store *StoreSession) UserRewardPerTokenPaid(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _Store.Contract.UserRewardPerTokenPaid(&_Store.CallOpts, arg0, arg1)
}

// UserRewardPerTokenPaid is a free data retrieval call binding the contract method 0x6bc9b561.
//
// Solidity: function userRewardPerTokenPaid(address , uint256 ) view returns(uint256)
func (_Store *StoreCallerSession) UserRewardPerTokenPaid(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _Store.Contract.UserRewardPerTokenPaid(&_Store.CallOpts, arg0, arg1)
}

// UserRewards is a free data retrieval call binding the contract method 0x63c2a20a.
//
// Solidity: function userRewards(address , uint256 ) view returns(uint256 amount, uint256 idx)
func (_Store *StoreCaller) UserRewards(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (struct {
	Amount *big.Int
	Idx    *big.Int
}, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "userRewards", arg0, arg1)

	outstruct := new(struct {
		Amount *big.Int
		Idx    *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Amount = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Idx = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// UserRewards is a free data retrieval call binding the contract method 0x63c2a20a.
//
// Solidity: function userRewards(address , uint256 ) view returns(uint256 amount, uint256 idx)
func (_Store *StoreSession) UserRewards(arg0 common.Address, arg1 *big.Int) (struct {
	Amount *big.Int
	Idx    *big.Int
}, error) {
	return _Store.Contract.UserRewards(&_Store.CallOpts, arg0, arg1)
}

// UserRewards is a free data retrieval call binding the contract method 0x63c2a20a.
//
// Solidity: function userRewards(address , uint256 ) view returns(uint256 amount, uint256 idx)
func (_Store *StoreCallerSession) UserRewards(arg0 common.Address, arg1 *big.Int) (struct {
	Amount *big.Int
	Idx    *big.Int
}, error) {
	return _Store.Contract.UserRewards(&_Store.CallOpts, arg0, arg1)
}

// GetReward is a paid mutator transaction binding the contract method 0x30f3363c.
//
// Solidity: function GetReward() returns()
func (_Store *StoreTransactor) GetReward(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "GetReward")
}

// GetReward is a paid mutator transaction binding the contract method 0x30f3363c.
//
// Solidity: function GetReward() returns()
func (_Store *StoreSession) GetReward() (*types.Transaction, error) {
	return _Store.Contract.GetReward(&_Store.TransactOpts)
}

// GetReward is a paid mutator transaction binding the contract method 0x30f3363c.
//
// Solidity: function GetReward() returns()
func (_Store *StoreTransactorSession) GetReward() (*types.Transaction, error) {
	return _Store.Contract.GetReward(&_Store.TransactOpts)
}

// RewardToken is a paid mutator transaction binding the contract method 0x2f3603a7.
//
// Solidity: function RewardToken(uint256 amount) returns()
func (_Store *StoreTransactor) RewardToken(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "RewardToken", amount)
}

// RewardToken is a paid mutator transaction binding the contract method 0x2f3603a7.
//
// Solidity: function RewardToken(uint256 amount) returns()
func (_Store *StoreSession) RewardToken(amount *big.Int) (*types.Transaction, error) {
	return _Store.Contract.RewardToken(&_Store.TransactOpts, amount)
}

// RewardToken is a paid mutator transaction binding the contract method 0x2f3603a7.
//
// Solidity: function RewardToken(uint256 amount) returns()
func (_Store *StoreTransactorSession) RewardToken(amount *big.Int) (*types.Transaction, error) {
	return _Store.Contract.RewardToken(&_Store.TransactOpts, amount)
}

// Stake is a paid mutator transaction binding the contract method 0x227a473b.
//
// Solidity: function Stake(uint256 amount) returns()
func (_Store *StoreTransactor) Stake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "Stake", amount)
}

// Stake is a paid mutator transaction binding the contract method 0x227a473b.
//
// Solidity: function Stake(uint256 amount) returns()
func (_Store *StoreSession) Stake(amount *big.Int) (*types.Transaction, error) {
	return _Store.Contract.Stake(&_Store.TransactOpts, amount)
}

// Stake is a paid mutator transaction binding the contract method 0x227a473b.
//
// Solidity: function Stake(uint256 amount) returns()
func (_Store *StoreTransactorSession) Stake(amount *big.Int) (*types.Transaction, error) {
	return _Store.Contract.Stake(&_Store.TransactOpts, amount)
}

// WithdrawExpiredLocks is a paid mutator transaction binding the contract method 0x1be452a7.
//
// Solidity: function WithdrawExpiredLocks(uint256 _start, uint256 _end) returns()
func (_Store *StoreTransactor) WithdrawExpiredLocks(opts *bind.TransactOpts, _start *big.Int, _end *big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "WithdrawExpiredLocks", _start, _end)
}

// WithdrawExpiredLocks is a paid mutator transaction binding the contract method 0x1be452a7.
//
// Solidity: function WithdrawExpiredLocks(uint256 _start, uint256 _end) returns()
func (_Store *StoreSession) WithdrawExpiredLocks(_start *big.Int, _end *big.Int) (*types.Transaction, error) {
	return _Store.Contract.WithdrawExpiredLocks(&_Store.TransactOpts, _start, _end)
}

// WithdrawExpiredLocks is a paid mutator transaction binding the contract method 0x1be452a7.
//
// Solidity: function WithdrawExpiredLocks(uint256 _start, uint256 _end) returns()
func (_Store *StoreTransactorSession) WithdrawExpiredLocks(_start *big.Int, _end *big.Int) (*types.Transaction, error) {
	return _Store.Contract.WithdrawExpiredLocks(&_Store.TransactOpts, _start, _end)
}

// StoreRewardPaidIterator is returned from FilterRewardPaid and is used to iterate over the raw logs and unpacked data for RewardPaid events raised by the Store contract.
type StoreRewardPaidIterator struct {
	Event *StoreRewardPaid // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreRewardPaidIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreRewardPaid)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreRewardPaid)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreRewardPaidIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreRewardPaidIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreRewardPaid represents a RewardPaid event raised by the Store contract.
type StoreRewardPaid struct {
	User   common.Address
	Reward *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRewardPaid is a free log retrieval operation binding the contract event 0x2ead7d650427e1b49175deda4434b2a0a65a543b49e012f8be34ecbc135c731a.
//
// Solidity: event rewardPaid(address indexed user, uint256 reward)
func (_Store *StoreFilterer) FilterRewardPaid(opts *bind.FilterOpts, user []common.Address) (*StoreRewardPaidIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Store.contract.FilterLogs(opts, "rewardPaid", userRule)
	if err != nil {
		return nil, err
	}
	return &StoreRewardPaidIterator{contract: _Store.contract, event: "rewardPaid", logs: logs, sub: sub}, nil
}

// WatchRewardPaid is a free log subscription operation binding the contract event 0x2ead7d650427e1b49175deda4434b2a0a65a543b49e012f8be34ecbc135c731a.
//
// Solidity: event rewardPaid(address indexed user, uint256 reward)
func (_Store *StoreFilterer) WatchRewardPaid(opts *bind.WatchOpts, sink chan<- *StoreRewardPaid, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Store.contract.WatchLogs(opts, "rewardPaid", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreRewardPaid)
				if err := _Store.contract.UnpackLog(event, "rewardPaid", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardPaid is a log parse operation binding the contract event 0x2ead7d650427e1b49175deda4434b2a0a65a543b49e012f8be34ecbc135c731a.
//
// Solidity: event rewardPaid(address indexed user, uint256 reward)
func (_Store *StoreFilterer) ParseRewardPaid(log types.Log) (*StoreRewardPaid, error) {
	event := new(StoreRewardPaid)
	if err := _Store.contract.UnpackLog(event, "rewardPaid", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StoreRewardTokenIterator is returned from FilterRewardToken and is used to iterate over the raw logs and unpacked data for RewardToken events raised by the Store contract.
type StoreRewardTokenIterator struct {
	Event *StoreRewardToken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreRewardTokenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreRewardToken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreRewardToken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreRewardTokenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreRewardTokenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreRewardToken represents a RewardToken event raised by the Store contract.
type StoreRewardToken struct {
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRewardToken is a free log retrieval operation binding the contract event 0x509b6c3f0e03e3971fadcad84664ce9af518c57f864ef513e571b592dee4d9ee.
//
// Solidity: event rewardToken(uint256 amount)
func (_Store *StoreFilterer) FilterRewardToken(opts *bind.FilterOpts) (*StoreRewardTokenIterator, error) {

	logs, sub, err := _Store.contract.FilterLogs(opts, "rewardToken")
	if err != nil {
		return nil, err
	}
	return &StoreRewardTokenIterator{contract: _Store.contract, event: "rewardToken", logs: logs, sub: sub}, nil
}

// WatchRewardToken is a free log subscription operation binding the contract event 0x509b6c3f0e03e3971fadcad84664ce9af518c57f864ef513e571b592dee4d9ee.
//
// Solidity: event rewardToken(uint256 amount)
func (_Store *StoreFilterer) WatchRewardToken(opts *bind.WatchOpts, sink chan<- *StoreRewardToken) (event.Subscription, error) {

	logs, sub, err := _Store.contract.WatchLogs(opts, "rewardToken")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreRewardToken)
				if err := _Store.contract.UnpackLog(event, "rewardToken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardToken is a log parse operation binding the contract event 0x509b6c3f0e03e3971fadcad84664ce9af518c57f864ef513e571b592dee4d9ee.
//
// Solidity: event rewardToken(uint256 amount)
func (_Store *StoreFilterer) ParseRewardToken(log types.Log) (*StoreRewardToken, error) {
	event := new(StoreRewardToken)
	if err := _Store.contract.UnpackLog(event, "rewardToken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StoreStakedIterator is returned from FilterStaked and is used to iterate over the raw logs and unpacked data for Staked events raised by the Store contract.
type StoreStakedIterator struct {
	Event *StoreStaked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreStakedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreStaked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreStaked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreStakedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreStakedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreStaked represents a Staked event raised by the Store contract.
type StoreStaked struct {
	User   common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterStaked is a free log retrieval operation binding the contract event 0x8f169816223f856d6f6a5945e3f7c520efe6c139d4152b6bb65e454babb2f2cb.
//
// Solidity: event staked(address indexed user, uint256 amount)
func (_Store *StoreFilterer) FilterStaked(opts *bind.FilterOpts, user []common.Address) (*StoreStakedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Store.contract.FilterLogs(opts, "staked", userRule)
	if err != nil {
		return nil, err
	}
	return &StoreStakedIterator{contract: _Store.contract, event: "staked", logs: logs, sub: sub}, nil
}

// WatchStaked is a free log subscription operation binding the contract event 0x8f169816223f856d6f6a5945e3f7c520efe6c139d4152b6bb65e454babb2f2cb.
//
// Solidity: event staked(address indexed user, uint256 amount)
func (_Store *StoreFilterer) WatchStaked(opts *bind.WatchOpts, sink chan<- *StoreStaked, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Store.contract.WatchLogs(opts, "staked", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreStaked)
				if err := _Store.contract.UnpackLog(event, "staked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStaked is a log parse operation binding the contract event 0x8f169816223f856d6f6a5945e3f7c520efe6c139d4152b6bb65e454babb2f2cb.
//
// Solidity: event staked(address indexed user, uint256 amount)
func (_Store *StoreFilterer) ParseStaked(log types.Log) (*StoreStaked, error) {
	event := new(StoreStaked)
	if err := _Store.contract.UnpackLog(event, "staked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StoreWithdrawnIterator is returned from FilterWithdrawn and is used to iterate over the raw logs and unpacked data for Withdrawn events raised by the Store contract.
type StoreWithdrawnIterator struct {
	Event *StoreWithdrawn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreWithdrawnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreWithdrawnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreWithdrawn represents a Withdrawn event raised by the Store contract.
type StoreWithdrawn struct {
	User   common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdrawn is a free log retrieval operation binding the contract event 0x6fb24f3ad0678f9d138e80b17293be051d87911eb34e9e60f0d1b9c3805e885a.
//
// Solidity: event withdrawn(address indexed user, uint256 amount)
func (_Store *StoreFilterer) FilterWithdrawn(opts *bind.FilterOpts, user []common.Address) (*StoreWithdrawnIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Store.contract.FilterLogs(opts, "withdrawn", userRule)
	if err != nil {
		return nil, err
	}
	return &StoreWithdrawnIterator{contract: _Store.contract, event: "withdrawn", logs: logs, sub: sub}, nil
}

// WatchWithdrawn is a free log subscription operation binding the contract event 0x6fb24f3ad0678f9d138e80b17293be051d87911eb34e9e60f0d1b9c3805e885a.
//
// Solidity: event withdrawn(address indexed user, uint256 amount)
func (_Store *StoreFilterer) WatchWithdrawn(opts *bind.WatchOpts, sink chan<- *StoreWithdrawn, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Store.contract.WatchLogs(opts, "withdrawn", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreWithdrawn)
				if err := _Store.contract.UnpackLog(event, "withdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawn is a log parse operation binding the contract event 0x6fb24f3ad0678f9d138e80b17293be051d87911eb34e9e60f0d1b9c3805e885a.
//
// Solidity: event withdrawn(address indexed user, uint256 amount)
func (_Store *StoreFilterer) ParseWithdrawn(log types.Log) (*StoreWithdrawn, error) {
	event := new(StoreWithdrawn)
	if err := _Store.contract.UnpackLog(event, "withdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
